#!/bin/sh
# License: CC0
# OpenWrt >= 19.07, Compatible with 24.10.0
# Important! OpenWrt OS only works with Almquist Shell, not Bourne-again shell.
# ÂêÑÁ®ÆÂÖ±ÈÄöÂá¶ÁêÜÔºà„Éò„É´„ÉóË°®Á§∫„ÄÅ„Ç´„É©„ÉºÂá∫Âäõ„ÄÅ„Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±Á¢∫Ë™ç„ÄÅË®ÄË™ûÈÅ∏Êäû„ÄÅÁ¢∫Ë™ç„ÉªÈÄöÁü•„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂ§öË®ÄË™ûÂØæÂøú„Å™„Å©Ôºâ„ÇíÊèê‰æõ„Åô„Çã„ÄÇ

SCRIPT_VERSION="2025.02.20-12-07"
echo -e "\033[7;40mUpdated to version $SCRIPT_VERSION common.sh \033[0m"

DEV_NULL="${DEV_NULL:-on}"
# „Çµ„Ç§„É¨„É≥„Éà„É¢„Éº„Éâ
# export DEV_NULL="on"
# ÈÄöÂ∏∏„É¢„Éº„Éâ
# unset DEV_NULL

# Âü∫Êú¨ÂÆöÊï∞„ÅÆË®≠ÂÆö 
BASE_WGET="${BASE_WGET:-wget -q -O}"
# BASE_WGET="${BASE_WGET:-wget -O}"
BASE_URL="${BASE_URL:-https://raw.githubusercontent.com/site-u2023/aios/main}"
BASE_DIR="${BASE_DIR:-/tmp/aios}"
CACHE_DIR="${CACHE_DIR:-$BASE_DIR/cache}"
LOG_DIR="${LOG_DIR:-$BASE_DIR/logs}"
mkdir -p "$CACHE_DIR" "$LOG_DIR"
DEBUG_MODE="${DEBUG_MODE:-false}"

# üîµ„ÄÄ„Ç®„É©„Éº„Éª„Éá„Éê„ÉÉ„Ç∞„Éª„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ-------------------------------------------------------------------------------------------------------------------------------------------
#########################################################################
# Last Update: 2025-02-16 16:00:00 (JST) üöÄ
# "Clarity in errors, precision in handling. Every function must be robust."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. „Åô„Åπ„Å¶„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí `messages.db` „ÅßÁÆ°ÁêÜ„Åó„ÄÅÂ§öË®ÄË™ûÂØæÂøú„Åô„Çã„ÄÇ
# 2. `debug_log("ERROR", message)` „ÇÇ `message.db` „Çí‰ΩøÁî®„Åô„Çã„ÄÇ
# 3. `{file}`, `{version}` „Å™„Å©„ÅÆÂ§âÊï∞„ÇíÂãïÁöÑ„Å´ÁΩÆÊèõ„ÄÇ
# 4. ÂΩ±ÈüøÁØÑÂõ≤: `aios` & `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
handle_error() {
    local error_key="$1"
    local file="$2"
    local version="$3"
    local exit_required="${4:-no}"

    local error_message
    error_message=$(get_message "$error_key")

    # „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂèñÂæó„Åß„Åç„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
    if [ -z "$error_message" ]; then
        error_message="Unknown error occurred. Key: $error_key"
    fi

    # Â§âÊï∞„ÇíÁΩÆÊèõ
    error_message=$(echo "$error_message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # „É≠„Ç∞Ë®òÈå≤ & Ë°®Á§∫
    debug_log "ERROR" "$error_message"
    echo -e "$(color red "$error_message")"

    if [ "$exit_required" = "yes" ]; then
        debug_log "ERROR" "Critical error occurred, exiting: $error_message"
        exit 1
    else
        debug_log "WARN" "Non-critical error: $error_message"
        return 1
    fi
}

#########################################################################
# Last Update: 2025-02-16 16:10:00 (JST) üöÄ
# "Logging with clarity, debugging with precision."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. „Åô„Åπ„Å¶„ÅÆ„É≠„Ç∞„É°„ÉÉ„Çª„Éº„Ç∏„Çí `messages.db` „ÅßÁÆ°ÁêÜ„Åó„ÄÅÂ§öË®ÄË™ûÂØæÂøú„Åô„Çã„ÄÇ
# 2. `{file}`, `{version}` „Å™„Å©„ÅÆÂ§âÊï∞„Çí `sed` „ÅßÂãïÁöÑ„Å´ÁΩÆÊèõ„Åô„Çã„ÄÇ
# 3. `DEBUG_MODE` „ÅÆË®≠ÂÆö„Å´Âøú„Åò„Å¶ `DEBUG`, `INFO`, `WARN`, `ERROR` „ÇíÁÆ°ÁêÜ„Åô„Çã„ÄÇ
# 4. ÂΩ±ÈüøÁØÑÂõ≤: `aios` & `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
debug_log() {
    local level="$1"
    local message="$2"
    local file="$3"
    local version="$4"

    # `$1` „Å´„É≠„Ç∞„É¨„Éô„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÄÅ„Éá„Éï„Ç©„É´„Éà„Çí `DEBUG` „Å´„Åô„Çã
    case "$level" in
        "DEBUG"|"INFO"|"WARN"|"ERROR") ;;  # ‰Ωï„ÇÇ„Åó„Å™„ÅÑ (Ê≠£„Åó„ÅÑ„É≠„Ç∞„É¨„Éô„É´)
        "")
            level="DEBUG"
            message="$1"
            file="$2"
            version="$3"
            ;;
        *)
            message="$1"
            file="$2"
            version="$3"
            level="DEBUG"
            ;;
    esac

    # Â§âÊï∞„ÇíÁΩÆÊèõ
    message=$(echo "$message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # „É≠„Ç∞„É¨„Éô„É´Âà∂Âæ°
    case "$DEBUG_LEVEL" in
        DEBUG)    allowed_levels="DEBUG INFO WARN ERROR" ;;
        INFO)     allowed_levels="INFO WARN ERROR" ;;
        WARN)     allowed_levels="WARN ERROR" ;;
        ERROR)    allowed_levels="ERROR" ;;
        *)        allowed_levels="ERROR" ;;
    esac

    if echo "$allowed_levels" | grep -q "$level"; then
        local timestamp
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        local log_message="[$timestamp] $level: $message"

        # „Ç´„É©„ÉºË°®Á§∫
        case "$level" in
            "ERROR") echo -e "$(color red "$log_message")" ;;
            "WARN") echo -e "$(color yellow "$log_message")" ;;
            "INFO") echo -e "$(color cyan "$log_message")" ;;
            "DEBUG") echo -e "$(color white "$log_message")" ;;
        esac

        # „É≠„Ç∞„Éï„Ç°„Ç§„É´„Å´Ë®òÈå≤
        echo "$log_message" >> "$LOG_DIR/debug.log"
    fi
}


#########################################################################
# Last Update: 2025-02-16 17:30:00 (JST) üöÄ
# "Debug with clarity, test with precision. Every log tells a story."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `test_country_search()`, `test_timezone_search()`, `test_cache_contents()` „ÇíÁµ±Âêà„ÄÇ
# 2. `debug_log()` „Çí‰ΩøÁî®„Åó„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„Çí `message.db` „Åã„ÇâÂèñÂæó„ÄÇ
# 3. `country.db` „ÅÆÊ§úÁ¥¢ÁµêÊûú„ÅåÈÅ©Âàá„Å´Âá∫Âäõ„Åï„Çå„Çã„ÅãÁ¢∫Ë™ç„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã„ÄÇ
# 4. ÂΩ±ÈüøÁØÑÂõ≤: `common.sh` „ÅÆ„ÅøÔºà`aios` „Å´„ÅØÂΩ±Èüø„Å™„ÅóÔºâ„ÄÇ
#########################################################################
test_debug_functions() {
    local test_type="$1"
    local test_input="$2"

    case "$test_type" in
        country)
            debug_log "INFO" "MSG_TEST_COUNTRY_SEARCH" "$test_input"
            if [ ! -f "${BASE_DIR}/country.db" ]; then
                handle_error "ERR_FILE_NOT_FOUND" "country.db"
                return 1
            fi
            awk -v query="$test_input" '
                $2 ~ query || $3 ~ query || $4 ~ query || $5 ~ query {
                    print NR, $2, $3, $4, $5, $6, $7, $8, $9
                }' "${BASE_DIR}/country.db"
            ;;

        timezone)
            debug_log "INFO" "MSG_TEST_TIMEZONE_SEARCH" "$test_input"
            if [ ! -f "${BASE_DIR}/country.db" ]; then
                handle_error "ERR_FILE_NOT_FOUND" "country.db"
                return 1
            fi
            awk -v country="$test_input" '
                $2 == country || $4 == country || $5 == country {
                    print NR, $5, $6, $7, $8, $9, $10, $11
                }' "${BASE_DIR}/country.db"
            ;;

        cache)
            debug_log "INFO" "MSG_TEST_CACHE_CONTENTS"
            for cache_file in "country_tmp.ch" "zone_tmp.ch"; do
                if [ -f "${CACHE_DIR}/$cache_file" ]; then
                    debug_log "INFO" "MSG_CACHE_CONTENTS" "$cache_file"
                    cat "${CACHE_DIR}/$cache_file"
                else
                    debug_log "WARN" "MSG_CACHE_NOT_FOUND" "$cache_file"
                fi
            done
            ;;
        
        *)
            debug_log "ERROR" "ERR_INVALID_ARGUMENT" "$test_type"
            return 1
            ;;
    esac
}

# üî¥„ÄÄ„Ç®„É©„Éº„Éª„Éá„Éê„ÉÉ„Ç∞„Éª„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥-------------------------------------------------------------------------------------------------------------------------------------------

#########################################################################
# print_help: „Éò„É´„Éó„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
#########################################################################
print_help() {
    echo "Usage: aios.sh [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -reset, --reset, -r     Reset all cached data"
    echo "  -help, --help, -h       Show this help message"
    echo "  ja, en, zh-cn, ...      Set language"
    echo ""
    echo "Examples:"
    echo "  sh aios.sh full ja       # Run in full mode with language set to Japanese"
    echo "  sh aios.sh full          # If language cache exists, use it; otherwise, prompt for language"
}

#########################################################################
# color: ANSI „Ç®„Çπ„Ç±„Éº„Éó„Ç∑„Éº„Ç±„É≥„Çπ„Çí‰Ωø„Å£„Å¶Ëâ≤‰ªò„Åç„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá∫Âäõ„Åô„ÇãÈñ¢Êï∞
#########################################################################
color() {
    local color_code
    color_code=$(color_code_map "$1")
    shift
    echo -e "${color_code}$*$(color_code_map "reset")"
}

#########################################################################
# color_code_map: „Ç´„É©„ÉºÂêç„Åã„Çâ ANSI „Ç®„Çπ„Ç±„Éº„Éó„Ç∑„Éº„Ç±„É≥„Çπ„ÇíËøî„ÅôÈñ¢Êï∞
#########################################################################
color_code_map() {
    local color="$1"
    case "$color" in
        "red") echo "\033[1;31m" ;;
        "green") echo "\033[1;32m" ;;
        "yellow") echo "\033[1;33m" ;;
        "blue") echo "\033[1;34m" ;;
        "magenta") echo "\033[1;35m" ;;
        "cyan") echo "\033[1;36m" ;;
        "white") echo "\033[1;37m" ;;
        "red_underline") echo "\033[4;31m" ;;
        "green_underline") echo "\033[4;32m" ;;
        "yellow_underline") echo "\033[4;33m" ;;
        "blue_underline") echo "\033[4;34m" ;;
        "magenta_underline") echo "\033[4;35m" ;;
        "cyan_underline") echo "\033[4;36m" ;;
        "white_underline") echo "\033[4;37m" ;;
        "red_white") echo "\033[1;41m" ;;
        "green_white") echo "\033[1;42m" ;;
        "yellow_white") echo "\033[1;43m" ;;
        "blue_white") echo "\033[1;44m" ;;
        "magenta_white") echo "\033[1;45m" ;;
        "cyan_white") echo "\033[1;46m" ;;
        "white_black") echo "\033[7;40m" ;;
        "reset") echo "\033[0;39m" ;;
        *) echo "\033[0;39m" ;;  # „Éá„Éï„Ç©„É´„Éà„Åß„É™„Çª„ÉÉ„Éà
    esac
}

#########################################################################
# check_openwrt: OpenWrt„ÅÆ„Éê„Éº„Ç∏„Éß„É≥Á¢∫Ë™ç„ÉªÊ§úË®º
#########################################################################
check_openwrt() {
    local version_file="${CACHE_DIR}/openwrt.ch"
    if [ -f "$version_file" ]; then
        CURRENT_VERSION=$(cat "$version_file")
    else
        CURRENT_VERSION=$(awk -F"'" '/DISTRIB_RELEASE/ {print $2}' /etc/openwrt_release | cut -d'-' -f1)
        echo "$CURRENT_VERSION" > "$version_file"
    fi

    if grep -q "^$CURRENT_VERSION=" "${BASE_DIR}/openwrt.db"; then
        local db_entry=$(grep "^$CURRENT_VERSION=" "${BASE_DIR}/openwrt.db" | cut -d'=' -f2)
        PACKAGE_MANAGER=$(echo "$db_entry" | cut -d'|' -f1)
        VERSION_STATUS=$(echo "$db_entry" | cut -d'|' -f2)
        echo -e "$(color green "Version $CURRENT_VERSION is supported ($VERSION_STATUS)")"
    else
        handle_error "Unsupported OpenWrt version: $CURRENT_VERSION"
    fi
}

#########################################################################
# check_downloader: „Éë„ÉÉ„Ç±„Éº„Ç∏„Éû„Éç„Éº„Ç∏„É£„ÉºÂà§ÂÆöÔºàapk / opkg ÂØæÂøúÔºâ
#########################################################################
check_downloader() {
    if [ -f "${BASE_DIR}/downloader_ch" ]; then
        PACKAGE_MANAGER=$(cat "${CACHE_DIR}/downloader_ch")
    else
        if command -v apk >/dev/null 2>&1; then
            PACKAGE_MANAGER="apk"
        elif command -v opkg >/dev/null 2>&1; then
            PACKAGE_MANAGER="opkg"
        else
            PACKAGE_MANAGER="opkg"  # „Éá„Éï„Ç©„É´„Éà„Çí„Çª„ÉÉ„Éà
        fi
        echo "$PACKAGE_MANAGER" > "${CACHE_DIR}/downloader_ch"
    fi
    echo -e "$(color green "Downloader $PACKAGE_MANAGER")"
}

#########################################################################
# Last Update: 2025-02-18 23:00:00 (JST) üöÄ
# "Standardizing version formatting for consistency."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÇíÁµ±‰∏Ä**
#    - `YYYY.MM.DD-Ëá™Áî±ÂΩ¢Âºè`
#    - `YYYYMMDDHHMMSS-Ëá™Áî±ÂΩ¢Âºè`
#    - Ë®±ÂèØ„Åï„Çå„ÇãÂå∫Âàá„ÇäÊñáÂ≠ó: `- . , ; : Á©∫ÁôΩ`
#
# 2. **Âá¶ÁêÜÂÜÖÂÆπ**
#    - **Ë®±ÂèØ„Åï„Çå„ÅüÊñáÂ≠ó„ÅÆ„Åø„ÇíÊäΩÂá∫**
#    - **ÂÖàÈ†≠„ÅÆ„Çº„É≠„ÇíÂâäÈô§Ôºà‰æã: `02` ‚Üí `2`Ôºâ**
#    - **ÂâçÂæå„ÅÆ‰ΩôË®à„Å™„Çπ„Éö„Éº„Çπ„ÇíÂâäÈô§**
#
# 3. **ÈÅ©Áî®ÂØæË±°**
#    - **`download()`**: **„Çπ„ÇØ„É™„Éó„Éà„Éê„Éº„Ç∏„Éß„É≥„ÅÆÂèñÂæó„ÉªÊØîËºÉ**
#    - **`compare_versions()`**: **„Éê„Éº„Ç∏„Éß„É≥ÊØîËºÉÊôÇ„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÁµ±‰∏Ä**
#
# 4. **ÈÅ©Áî®„Åó„Å™„ÅÑÂØæË±°**
#    - **„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„ÅÆËß£Èáà„ÇíÂ§âÊõ¥„Åó„Å™„ÅÑÔºàÈ†ÜÁï™„ÅÆÂÖ•„ÇåÊõø„Åà„ÅØ„Åó„Å™„ÅÑÔºâ**
#    - **Êó•‰ªò‰ª•Â§ñ„ÅÆÊñáÂ≠óÂàó„ÅØÂâäÈô§„Åõ„Åö„ÄÅ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆÊ®ôÊ∫ñÂåñ„ÅÆ„ÅøË°å„ÅÜ**
#
# 5. **‰æùÂ≠òÈñ¢‰øÇ**
#    - `normalize_input()` „Çí‰ΩøÁî®„Åó„ÄÅiconv „Å´„Çà„ÇãÂá¶ÁêÜ„ÇíÁµ±‰∏Ä
#
# 6. **ÂΩ±ÈüøÁØÑÂõ≤**
#    - `common.sh` „Å´Áµ±Âêà„Åó„ÄÅ`download()` & `compare_versions()` „Åß‰ΩøÁî®
#########################################################################
normalize_version() {
    input="$1"

    # **‰∫å„Éê„Ç§„Éà ‚Üí ‰∏Ä„Éê„Ç§„ÉàÂ§âÊèõ**
    input=$(normalize_input "$input")
    [ -z "$input" ] && { echo "Error: normalize_input() returned empty string"; return 1; }

    # **Ë®±ÂèØ„Åï„Çå„ÅüÊñáÂ≠óÔºàÊï∞Â≠ó, Ë®òÂè∑Ôºâ‰ª•Â§ñ„ÇíÂâäÈô§**
    input=$(echo "$input" | sed 's/[^0-9A-Za-z._-]//g')

    # **‰∏çË¶Å„Å™ÊîπË°å„ÇÑ„Çπ„Éö„Éº„Çπ„ÇíÂâäÈô§**
    input=$(echo "$input" | tr -d '\n' | sed 's/ *$//')

    # **Âå∫Âàá„ÇäÊñáÂ≠ó„ÇíÊ≠£„Åó„ÅèÂá¶ÁêÜ**
    input=$(echo "$input" | awk -F'[._-]' '{
        for (i=1; i<=NF; i++) {
            if ($i ~ /^[0-9]+$/) sub(/^0+/, "", $i)  # ÂÖàÈ†≠„Çº„É≠ÂâäÈô§Ôºà„Åü„Å†„ÅóÂå∫Âàá„Çä„ÅØ‰øùÊåÅÔºâ
            printf "%s%s", $i, (i<NF ? (FS == "_" ? "-" : ".") : "")
        }
        print ""
    }')

    echo "$input"
}

#########################################################################
# Last Update: 2025-02-18 18:00:00 (JST) üöÄ
# "Efficiency in retrieval, clarity in communication."
# get_message: „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂèñÂæó„É≠„Ç∏„ÉÉ„ÇØ**
#    - `$ACTIVE_LANGUAGE` „ÇíÊúÄÂÑ™ÂÖà„Åß‰ΩøÁî®Ôºà`normalize_language()` „ÅßË®≠ÂÆöÔºâ
#    - `$ACTIVE_LANGUAGE` „ÅåÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÅØ `US` „Çí„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Å®„Åó„Å¶‰ΩøÁî®
#
# 2. **„É°„ÉÉ„Çª„Éº„Ç∏Ê§úÁ¥¢„ÅÆÈ†ÜÂ∫è**
#    ‚ë† `$ACTIVE_LANGUAGE|„Ç≠„Éº=` „Åß `messages.db` „ÇíÊ§úÁ¥¢
#    ‚ë° `US|„Ç≠„Éº=` „Åß `messages.db` „ÇíÊ§úÁ¥¢Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
#    ‚ë¢ „Å©„Å°„Çâ„Å´„ÇÇË©≤ÂΩì„Åó„Å™„ÅÑÂ†¥Âêà„ÄÅ`„Ç≠„Éº` „Çí„Åù„ÅÆ„Åæ„ÅæËøî„Åô
#
# 3. **Âãï‰Ωú„ÅÆÊúÄÈÅ©Âåñ**
#    - `$ACTIVE_LANGUAGE` „ÇíÁõ¥Êé•ÂèÇÁÖß„Åó„ÄÅ„Ç≠„É£„ÉÉ„Ç∑„É• (`message.ch`) „Å´„ÅØ‰æùÂ≠ò„Åó„Å™„ÅÑ
#    - `$quiet_flag` „Å´ `"quiet"` „ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà„ÄÅÂá∫Âäõ„Åõ„Åö„Å´ `return 0`
#
# 4. **„É°„É≥„ÉÜ„Éä„É≥„Çπ**
#    - Ë®ÄË™ûÂèñÂæó„É≠„Ç∏„ÉÉ„ÇØ„Çí `normalize_language()` „Å´Áµ±‰∏Ä„Åó„ÄÅË≤¨Âãô„ÇíÂàÜÈõ¢
#    - `get_message()` „ÅØ„ÄåÂèñÂæó„Åô„Çã„Å†„Åë„Äç„Å´ÁâπÂåñ„Åó„ÄÅÊõ∏„ÅçËæº„Åø„ÉªË®≠ÂÆö„ÅØË°å„Çè„Å™„ÅÑ
#
# 5. **ÂΩ±ÈüøÁØÑÂõ≤**
#    - `common.sh` ÂÜÖ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæóÂÖ®Ëà¨Ôºà`debug_log()` Âê´„ÇÄÔºâ
#    - `messages.db` „ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊõ¥ÊôÇ„ÇÇ `get_message()` „ÅÆ‰øÆÊ≠£„ÅØ‰∏çË¶Å
#########################################################################
get_message() {
    local key="$1"
    local quiet_flag="$2"
    local message_db="${BASE_DIR}/messages.db"
    local lang="${ACTIVE_LANGUAGE:-US}"  # `ACTIVE_LANGUAGE` „ÅåÊú™Ë®≠ÂÆö„Å™„Çâ `US`

    # `messages.db` „ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÄÅ„Ç≠„Éº„Åù„ÅÆ„Åæ„Åæ„ÇíËøî„Åô
    if [ ! -f "$message_db" ]; then
        debug_log "WARN" "messages.db not found. Returning key as message."
        message="$key"
    else
        # **Ë®ÄË™ûÂÑ™ÂÖàÊ§úÁ¥¢**
        message=$(grep "^${lang}|${key}=" "$message_db" | cut -d'=' -f2-)

        # **„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ§úÁ¥¢**
        if [ -z "$message" ]; then
            message=$(grep "^US|${key}=" "$message_db" | cut -d'=' -f2-)
        fi

        # **„Åù„Çå„Åß„ÇÇË¶ã„Å§„Åã„Çâ„Å™„Åë„Çå„Å∞„ÄÅ„Ç≠„Éº„Åù„ÅÆ„Åæ„Åæ„ÇíËøî„Åô**
        if [ -z "$message" ]; then
            debug_log "WARN" "Message key '$key' not found in messages.db."
            message="$key"
        fi
    fi

    # **quiet „É¢„Éº„ÉâÂØæÂøú**
    if [ "$quiet_flag" = "quiet" ]; then
        return 0
    else
        echo "$message"
    fi
}

# üîµ„ÄÄ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

#########################################################################
# Last Update: 2025-02-18 23:30:00 (JST) üöÄ
# "Efficient downloading with precise versioning and silent modes."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `BASE_WGET` „Çí‰ΩøÁî®„Åó„Å¶„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åô„Çã„ÄÇ
# 2. `hidden` „Ç™„Éó„Ç∑„Éß„É≥:
#    - „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÅÆÊàêÂê¶„É≠„Ç∞„ÇíË®òÈå≤„Åô„Çã„Åå„ÄÅÊó¢Â≠ò„Éï„Ç°„Ç§„É´„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆÂá∫Âäõ„ÇíÊäëÂà∂„Åô„Çã„ÄÇ
# 3. `quiet` „Ç™„Éó„Ç∑„Éß„É≥:
#    - `check_option()` „ÅßË®≠ÂÆö„Åï„Çå„Åü `QUIET_MODE` „Å´Âæì„ÅÑ„ÄÅ„Åô„Åπ„Å¶„ÅÆ„É≠„Ç∞„ÇíÊäëÂà∂„Åô„Çã„ÄÇ
# 4. **ÂºïÊï∞„ÅÆÈ†ÜÂ∫è„ÅØËá™Áî±** (`hidden` `quiet` „ÅÆÈ†ÜÁï™„ÅØ‰ªªÊÑè)„ÄÇ
# 5. `wget` „ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÇíË°å„ÅÑ„ÄÅÂ§±ÊïóÊôÇ„ÅÆË©≥Á¥∞„Çí `debug_log()` „Å´Ë®òÈå≤„Åô„Çã„ÄÇ
# 6. **ÂΩ±ÈüøÁØÑÂõ≤:** `common.sh` „ÅÆ `download()` „ÅÆ„ÅøÔºà‰ªñ„ÅÆÈñ¢Êï∞„Å´„ÅØÂΩ±Èüø„Å™„ÅóÔºâ„ÄÇ
#########################################################################
download() {
    local hidden_mode="false"
    local quiet_mode="${QUIET_MODE:-false}"
    local file_name=""
    local local_version=""
    local remote_version=""
    local script_db="${CACHE_DIR}/script.ch"

    # **ÂºïÊï∞Ëß£ÊûêÔºàÈ†Ü‰∏çÂêåÂØæÂøúÔºâ**
    while [ "$#" -gt 0 ]; do
        case "$1" in
            hidden) hidden_mode="true" ;;
            quiet) quiet_mode="true" ;;
            debug) DEBUG_MODE="true" ;;
            *) file_name="$1" ;;  # ÊúÄÂàù„Å´Ë¶ã„Å§„Åã„Å£„ÅüÈùû„Ç™„Éó„Ç∑„Éß„É≥ÂºïÊï∞„Çí„Éï„Ç°„Ç§„É´Âêç„Å®„Åô„Çã
        esac
        shift
    done

    # **„Éï„Ç°„Ç§„É´Âêç„ÅÆÊ≠£Ë¶èÂåñ**
    file_name=$(normalize_input "$file_name")

    local install_path="${BASE_DIR}/${file_name}"
    local remote_url="${BASE_URL}/${file_name}"

    # **script.ch „Åå„Å™„Åë„Çå„Å∞‰ΩúÊàê**
    if [ ! -f "$script_db" ]; then
        touch "$script_db"
    fi

    # **„É≠„Éº„Ç´„É´„Éê„Éº„Ç∏„Éß„É≥„ÅÆÂèñÂæóÔºàscript.ch „ÇíÂèÇÁÖßÔºâ**
    if grep -q "^${file_name}=" "$script_db"; then
        local_version=$(grep "^${file_name}=" "$script_db" | cut -d'=' -f2)
    fi

    # **„É™„É¢„Éº„Éà„Éê„Éº„Ç∏„Éß„É≥„ÅÆÂèñÂæó**
    remote_version=""
    remote_version=$(wget -qO- "$remote_url" | grep -Eo 'SCRIPT_VERSION=["'"'"']?[0-9]{4}[-.][0-9]{2}[-.][0-9]{2}[-.0-9]*' | cut -d'=' -f2 | tr -d '"')

    # **„É™„É¢„Éº„Éà„Éê„Éº„Ç∏„Éß„É≥„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ‰ªÆ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇíË®≠ÂÆö**
    if [ -z "$remote_version" ]; then
        debug_log "DEBUG" "No version information found for $file_name. Skipping version check and proceeding with download."
        remote_version="2025.01.01-00-00"
    fi

    # **„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊôÇ„ÅÆ„Åø„ÄÅ„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíË®òÈå≤**
    debug_log "DEBUG" "Download function executed - Target Version: $remote_version"

    # **hidden „É¢„Éº„ÉâÊôÇ„ÄÅ„É≠„Éº„Ç´„É´„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çã„Å™„ÇâÂç≥„É™„Çø„Éº„É≥**
    if [ "$hidden_mode" = "true" ] && [ -f "$install_path" ]; then
        debug_log "DEBUG" "hidden mode enabled - Skipping download for $file_name"
        return 0
    fi

    # **„Éê„Éº„Ç∏„Éß„É≥„ÉÅ„Çß„ÉÉ„ÇØ**
    if [ -z "$local_version" ]; then
        debug_log "DEBUG" "No local version found for $file_name. Downloading..."
    elif [ "$local_version" = "$remote_version" ]; then
        if [ "$quiet_mode" != "true" ]; then
            echo "$(color yellow "$file_name is already up-to-date. (Version: $local_version)")"
        fi
        return 0
    else
        debug_log "DEBUG" "Updating $file_name (Local: $local_version, Remote: $remote_version)"
    fi

    # **„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÈñãÂßã**
    if ! $BASE_WGET "$install_path" "$remote_url"; then
        debug_log "ERROR" "Download failed: $file_name"
        return 1
    fi

    # **Á©∫„Éï„Ç°„Ç§„É´„ÉÅ„Çß„ÉÉ„ÇØ**
    if [ ! -s "$install_path" ]; then
        debug_log "ERROR" "Download failed: $file_name is empty."
        return 1
    fi

    # **„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏Ôºàhidden „Åß„ÇÇÂ∏∏„Å´Ë°®Á§∫Ôºâ**
    echo "$(color green "Download completed: $file_name - Version: $remote_version")"

    debug_log "DEBUG" "Download completed: $file_name is valid."

    # **script.ch „Å´„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíÊõ¥Êñ∞**
    if grep -q "^${file_name}=" "$script_db"; then
        sed -i "s|^${file_name}=.*|${file_name}=${remote_version}|" "$script_db"
    else
        echo "${file_name}=${remote_version}" >> "$script_db"
    fi

    debug_log "DEBUG" "Updated script.ch: ${file_name}=${remote_version}"

    return 0
}

#######################################################################
get_script_version() {
    local script_file="$1"
    local script_db="${CACHE_DIR}/script.ch"

    # **„Çπ„ÇØ„É™„Éó„Éà„Éï„Ç°„Ç§„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç®„É©„Éº**
    if [ -z "$script_file" ]; then
        echo "Error: No script file specified." >&2
        return 1
    fi

    # **„Çπ„ÇØ„É™„Éó„Éà„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç®„É©„Éº**
    if [ ! -f "$script_file" ]; then
        echo "Error: Script file not found: $script_file" >&2
        return 1
    fi

    local version=""
    
    # **`SCRIPT_VERSION="..."` „ÅÆÂÄ§„ÇíÂèñÂæó**
    version=$(grep -Eo 'SCRIPT_VERSION=["'"'"']?[0-9]{4}[-.][0-9]{2}[-.][0-9]{2}[-.0-9]*' "$script_file" | cut -d'=' -f2 | tr -d '"')

    # **„Éê„Éº„Ç∏„Éß„É≥„ÅÆÊ≠£Ë¶èÂåñ**
    version=$(normalize_version "$version")

    # **„Éê„Éº„Ç∏„Éß„É≥ÂèñÂæó„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„Ç®„É©„Éº**
    if [ -z "$version" ]; then
        echo "Error: Could not extract SCRIPT_VERSION from $script_file" >&2
        return 1
    fi

    # **script.ch „Åå„Å™„Åë„Çå„Å∞‰ΩúÊàê**
    if [ ! -f "$script_db" ]; then
        touch "$script_db"
    fi

    # **script.ch „Å∏„ÅÆÊõ∏„ÅçËæº„Åø**
    if grep -q "^${script_file}=" "$script_db"; then
        sed -i "s|^${script_file}=.*|${script_file}=${version}|" "$script_db"
    else
        echo "${script_file}=${version}" >> "$script_db"
    fi

    # **„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„Å´Ë®òÈå≤**
    debug_log "INFO" "Updated script.ch: ${script_file}=${version}"

    echo "$version"
}

# üî¥„ÄÄ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

# üîµ„ÄÄ„É©„É≥„Ç≤„Éº„Ç∏ÔºàË®ÄË™û„Éª„Çæ„Éº„É≥ÔºâÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ-------------------------------------------------------------------------------------------------------------------------------------------

#########################################################################
# Last Update: 2025-02-18 23:00:00 (JST) üöÄ
# "Ensuring consistent input handling and text normalization."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **ÂÖ•Âäõ„ÉÜ„Ç≠„Çπ„Éà„ÇíÊ≠£Ë¶èÂåñÔºàNormalize InputÔºâ**
#    - `iconv` „ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÄÅUTF-8 „Åã„Çâ ASCII//TRANSLIT „Å´Â§âÊèõ
#    - `iconv` „Åå„Å™„ÅÑÂ†¥Âêà„ÄÅÂÖÉ„ÅÆÂÖ•Âäõ„Çí„Åù„ÅÆ„Åæ„ÅæËøî„ÅôÔºà„Çπ„É´„ÉºÔºâ
#
# 2. **ÈÅ©Áî®ÂØæË±°**
#    - **`select_country()`**: **Y/N Á¢∫Ë™çÊôÇ„ÅÆ„ÅøÈÅ©Áî®**
#    - **`select_list()`**: **Áï™Âè∑ÈÅ∏Êäû & Y/N Á¢∫Ë™çÊôÇ„ÅÆ„ÅøÈÅ©Áî®**
#    - **`download()`**: **„Éï„Ç°„Ç§„É´Âêç„ÅÆÊ≠£Ë¶èÂåñ**
#
# 3. **ÈÅ©Áî®„Åó„Å™„ÅÑÂØæË±°**
#    - **Ë®ÄË™ûÈÅ∏Êäû„ÅÆÊõñÊòßÊ§úÁ¥¢„Å´„ÅØÈÅ©Áî®„Åó„Å™„ÅÑ**Ôºà‰æã: `Êó•Êú¨Ë™û` ‚Üí `ja` „Å´Â§âÊèõ„Åó„Å™„ÅÑÔºâ
#    - **„Éê„Éº„Ç∏„Éß„É≥„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆÂ§âÊõ¥„ÅØ„Åó„Å™„ÅÑ**
#
# 4. **‰æùÂ≠òÈñ¢‰øÇ**
#    - `iconv` „Åå **„Å™„ÅÑÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ**
#    - `sed` „ÇÑ `awk` „Çí‰Ωø„Çè„Åö `echo` „Éô„Éº„Çπ„ÅßÂá¶ÁêÜ
#
# 5. **ÂΩ±ÈüøÁØÑÂõ≤**
#    - `common.sh` „Å´Áµ±Âêà„Åó„ÄÅÂÖ®„Çπ„ÇØ„É™„Éó„Éà„ÅßÂÖ±ÈÄöÈñ¢Êï∞„Å®„Åó„Å¶Âà©Áî®
#########################################################################
normalize_input() {
    input="$1"
    # **ÂÖ®ËßíÊï∞Â≠ó ‚Üí ÂçäËßíÊï∞Â≠ó**
    input=$(echo "$input" | sed 'y/ÔºêÔºëÔºíÔºìÔºîÔºïÔºñÔºóÔºòÔºô/0123456789/')

    # **‰∏çË¶Å„Å™„É≠„Ç∞„ÇíÂâäÈô§Ôºàecho „ÅÆ„Åø„Çí‰ΩøÁî®Ôºâ**
    echo "$input"
}

#########################################################################
# Last Update: 2025-02-18 23:30:00 (JST) üöÄ
# "Country selection with precise Y/N confirmation."
# select_country: „É¶„Éº„Ç∂„Éº„Å´ÂõΩ„ÅÆÈÅ∏Êäû„Çí‰øÉ„ÅôÔºàÊ§úÁ¥¢Ê©üËÉΩ‰ªò„ÅçÔºâ
#
# select_country()
# ‚îú‚îÄ‚îÄ select_list()  ‚Üí ÈÅ∏ÊäûÁµêÊûú„Çí country_tmp.ch „Å´‰øùÂ≠ò
# ‚îú‚îÄ‚îÄ country_write()   ‚Üí country.ch, country.ch, luci.ch, zone.ch „Å´Á¢∫ÂÆö
# ‚îî‚îÄ‚îÄ select_zone()     ‚Üí zone.ch „Åã„Çâ zonename.ch, timezone.ch „Å´Á¢∫ÂÆö
#
# [1] „É¶„Éº„Ç∂„Éº„ÅåÂõΩ„ÇíÈÅ∏Êäû ‚Üí select_list()
# [2] ‰∏ÄÊôÇ„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò (country_tmp.ch)
# [3] country_write() „ÇíÂÆüË°å
# [4] Á¢∫ÂÆö„Ç≠„É£„ÉÉ„Ç∑„É•„Çí‰ΩúÊàêÔºàcountry.ch, country.ch, luci.ch, zone.chÔºâ‚Üí Êõ∏„ÅçËæº„ÅøÁ¶ÅÊ≠¢„Å´„Åô„Çã
# [5] select_zone() „ÇíÂÆüË°å
#
# #Ô∏è‚É£ `$1` „ÅÆÂ≠òÂú®Á¢∫Ë™ç
#   ‚îú‚îÄ „ÅÇ„Çä ‚Üí `country.db` „ÅßÊ§úÁ¥¢
#   |    ‚îú‚îÄ Ë¶ã„Å§„Åã„Çã ‚Üí `select_zone()`Ôºà„Çæ„Éº„É≥ÈÅ∏Êäû„Å∏Ôºâ
#   |    ‚îú‚îÄ Ë¶ã„Å§„Åã„Çâ„Å™„ÅÑ ‚Üí Ë®ÄË™ûÈÅ∏Êäû„ÇíÂÆüË°å
#   ‚îú‚îÄ „Å™„Åó ‚Üí `country.ch` „ÇíÁ¢∫Ë™ç
#        ‚îú‚îÄ „ÅÇ„Çä ‚Üí Ë®ÄË™ûÁ≥ªÁµÇ‰∫ÜÔºà‰ª•Èôç„ÅÆÂá¶ÁêÜ„Å™„ÅóÔºâ
#        ‚îú‚îÄ „Å™„Åó ‚Üí Ë®ÄË™ûÈÅ∏Êäû„ÇíÂÆüË°å
#########################################################################
select_country() {
    debug_log "DEBUG" "Entering select_country() with arg: '$1'"

    local cache_country="${CACHE_DIR}/country.ch"
    local tmp_country="${CACHE_DIR}/country_tmp.ch"
    local input_lang="$1"  # ÂºïÊï∞„Å®„Åó„Å¶Ê∏°„Åï„Çå„ÅüË®ÄË™û„Ç≥„Éº„ÉâÔºàÁÑ°„Åë„Çå„Å∞Âæå„ÅßÂÖ•ÂäõÔºâ

    # „Ç≠„É£„ÉÉ„Ç∑„É•„Åå„ÅÇ„Çå„Å∞„Çæ„Éº„É≥ÈÅ∏Êäû„Å∏„Çπ„Ç≠„ÉÉ„Éó
    if [ -f "$cache_country" ]; then
        debug_log "DEBUG" "Country cache found. Skipping selection."
        select_zone
        return
    fi

    while true; do
        # `$1` „Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ read „Åõ„Åö„ÄÅÁõ¥Êé• `input_lang` „Çí‰Ωø„ÅÜ
        if [ -z "$input_lang" ]; then
            printf "%s\n" "$(color cyan "$(get_message "MSG_ENTER_COUNTRY")")"
            printf "%s" "$(color cyan "$(get_message "MSG_SEARCH_KEYWORD")")"
            read -r input_lang
        fi

        # ÂÖ•Âäõ„ÅÆÊ≠£Ë¶èÂåñ: "/", ",", "_" „Çí„Çπ„Éö„Éº„Çπ„Å´ÁΩÆ„ÅçÊèõ„Åà
        local cleaned_input
        cleaned_input=$(echo "$input_lang" | sed 's/[\/,_]/ /g')

        # üîπ `country.db` „Åã„ÇâÊ§úÁ¥¢Ôºà„Éï„É´„É©„Ç§„É≥ÂèñÂæóÔºâ
        local full_results
        full_results=$(awk -v search="$cleaned_input" 'BEGIN {IGNORECASE=1} { if ($0 ~ search) print $0 }' "$BASE_DIR/country.db" 2>>"$LOG_DIR/debug.log")

        if [ -z "$full_results" ]; then
            printf "%s\n" "$(color red "Error: No matching country found for '$input_lang'. Please try again.")"
            input_lang=""  # üîπ „Ç®„É©„ÉºÊôÇ„ÅØ„É™„Çª„ÉÉ„Éà„Åó„Å¶ÂÜçÂÖ•Âäõ
            continue
        fi

        debug_log "DEBUG" "Country found for '$input_lang'. Presenting selection list."

        # üîπ Ë°®Á§∫Áî®„É™„Çπ„Éà‰ΩúÊàêÔºà`$2 $3` „ÅÆ„Åø„ÇíÊäΩÂá∫„Åó„Å¶„É™„Çπ„ÉàË°®Á§∫Ôºâ
        local display_results
        display_results=$(echo "$full_results" | awk '{print $2, $3}')

        # üîπ ÈÅ∏Êäû„É™„Çπ„ÉàË°®Á§∫ÔºàÁï™Âè∑‰ªò„ÅçÔºâ
        echo "$display_results" > "$tmp_country"
        select_list "$display_results" "$tmp_country" "country"

        # üîπ „É¶„Éº„Ç∂„ÉºÈÅ∏ÊäûÁï™Âè∑„ÇíÂèñÂæó
        local selected_number
        selected_number=$(awk 'END {print NR}' "$tmp_country")

        if [ -z "$selected_number" ]; then
            printf "%s\n" "$(color red "Error: No selection made. Please try again.")"
            continue
        fi

        # üîπ `full_results` „Åã„ÇâË©≤ÂΩìË°å„ÅÆ„Éï„É´„Éá„Éº„Çø„ÇíÂèñÂæó
        local selected_full
        selected_full=$(echo "$full_results" | sed -n "${selected_number}p")

        if [ -z "$selected_full" ]; then
            printf "%s\n" "$(color red "Error: Failed to retrieve full country information. Please try again.")"
            continue
        fi

        # üîπ „Éï„É´„É©„Ç§„É≥„Çí `tmp_country` „Å´‰øùÂ≠ò
        echo "$selected_full" > "$tmp_country"

        # üîπ `country_write()` „Å´Ê∏°„ÅôÔºà„Ç≠„É£„ÉÉ„Ç∑„É•Êõ∏„ÅçËæº„ÅøÔºâ
        country_write

        # üîπ „Çæ„Éº„É≥ÈÅ∏Êäû„Å∏ÈÄ≤„ÇÄ
        debug_log "DEBUG" "Country selection completed. Proceeding to select_zone()."
        select_zone
        return
    done
}

#########################################################################
# Last Update: 2025-02-18 23:30:00 (JST) üöÄ
# "Handling numbered list selections with confirmation."
# select_list()
# ÈÅ∏Êäû„É™„Çπ„Éà„Çí‰ΩúÊàê„Åó„ÄÅÈÅ∏ÊäûÁµêÊûú„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞„ÄÇ
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `mode=country`:
#     - ÂõΩ„É™„Çπ„Éà„Çí `$2 $3 $4 $5`ÔºàÂõΩÂêç„ÉªË®ÄË™û„ÉªË®ÄË™û„Ç≥„Éº„Éâ„ÉªÂõΩ„Ç≥„Éº„ÉâÔºâ„ÅßË°®Á§∫
#     - `$6` ‰ª•ÈôçÔºà„Çæ„Éº„É≥„Éç„Éº„É†„Éª„Çø„Ç§„É†„Çæ„Éº„É≥Ôºâ„ÅØ **`zone_list_tmp.ch` „Å´‰øùÂ≠ò**
# 2. `mode=zone`:
#     - „Çæ„Éº„É≥„É™„Çπ„Éà„ÇíË°®Á§∫
#     - **„Çæ„Éº„É≥ÊÉÖÂ†±„ÅÆ‰øùÂ≠ò„ÅØ `select_zone()` „Å´‰ªª„Åõ„Çã**
# 3. „Åù„ÅÆ‰ªñ:
#     - ÂÖ•Âäõ„Éá„Éº„Çø„ÅåÁ©∫„Å™„Çâ„Ç®„É©„Éº„ÇíËøî„Åô
#     - ÈÅ∏ÊäûÂæå„Å´ `Y/N` „ÅßÁ¢∫Ë™ç
#########################################################################
select_list() {
    local input_data="$1"
    local output_file="$2"
    local mode="$3"
    local list_file="${CACHE_DIR}/${mode}_tmp.ch"
    local i=1

    # **„É™„Çπ„Éà„Éï„Ç°„Ç§„É´„ÇíÂàùÊúüÂåñ**
    : > "$list_file"

    # **„É™„Çπ„Éà„ÇíË°®Á§∫**
    echo "$input_data" | while IFS= read -r line; do
        printf "[%d] %s\n" "$i" "$line"
        echo "$line" >> "$list_file"
        i=$((i + 1))
    done

    while true; do
        printf "%s\n" "$(color cyan "$(get_message "MSG_ENTER_NUMBER_CHOICE")")"
        printf "%s" "$(get_message "MSG_SELECT_NUMBER")"
        read -r choice

        # **ÂÖ•Âäõ„ÇíÊ≠£Ë¶èÂåñÔºàÂÖ®Ëßí‚ÜíÂçäËßíÔºâ**
        choice=$(normalize_input "$choice")

        local selected_value
        selected_value=$(awk -v num="$choice" 'NR == num {print $0}' "$list_file")

        if [ -z "$selected_value" ]; then
            printf "%s\n" "$(color red "$(get_message "MSG_INVALID_SELECTION")")"
            debug_log "DEBUG" "Invalid selection: '$choice'. Available options: $(cat "$list_file")"
            continue
        fi

        printf "%s\n" "$(color cyan "$(get_message "MSG_CONFIRM_SELECTION")")"
        printf "%s" "$(get_message "MSG_CONFIRM_YNR")"
        read -r yn

        # **Á¢∫Ë™çÁî®„ÅÆÂÖ•Âäõ„ÇÇÊ≠£Ë¶èÂåñ**
        yn=$(normalize_input "$yn")

        if [ "$yn" = "Y" ] || [ "$yn" = "y" ]; then
            printf "%s\n" "$selected_value" > "$output_file"
            return
        elif [ "$yn" = "R" ] || [ "$yn" = "r" ]; then
            debug_log "DEBUG" "User chose to restart selection."
            rm -f "${CACHE_DIR}/country.ch"  # **„Ç≠„É£„ÉÉ„Ç∑„É•ÂâäÈô§„ÅßÂÆåÂÖ®„É™„Çª„ÉÉ„Éà**
            select_country
            return
            #continue  # **ÈÅ∏Êäû„Çí„É™„Çπ„Çø„Éº„Éà**
        fi
    done  
}

#########################################################################
# Last Update: 2025-02-13 14:18:00 (JST) üöÄ
# "Precision in code, clarity in purpose. Every update refines the path."
# country_write(): ÂõΩ„ÅÆÈÅ∏ÊäûÊÉÖÂ†±„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `country.ch` „ÅØ **„Åô„Åπ„Å¶„ÅÆÂü∫Ê∫ñÔºàÁúüÔºâ**
#     - `select_country()` „ÅßÈÅ∏Êäû„Åó„Åü„Éá„Éº„Çø„Çí **ÁÑ°Êù°‰ª∂„Åß `country.ch` „Å´‰øùÂ≠ò**
#     - `country.ch` „ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Å® `zone()` „ÇÑ `country()` „ÅØÂãï‰Ωú„Åó„Å™„ÅÑ
#     - `country.ch` ‰ΩúÊàêÊôÇ„Å´ **Âç≥ `chattr +i` „Åß‰∏äÊõ∏„ÅçÁ¶ÅÊ≠¢**
#     - **country.ch „ÅÆ„Éá„Éº„Çø„ÇíÂÖÉ„Å´„ÄÅ‰ª•‰∏ã„ÅÆ `ch` „Éï„Ç°„Ç§„É´„ÇÇ‰ΩúÊàê**
#       - `country.ch` (`$3`: Ë®ÄË™ûÂêç)
#       - `luci.ch` (`$4`: Ë®ÄË™û„Ç≥„Éº„Éâ)
#
# 2. `zone_tmp.ch` „ÅØ **„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅÆ„Åæ„Åæ‰øùÂ≠ò**
#     - `$6` ‰ª•Èôç„ÅÆ„Éá„Éº„Çø„Çí **„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅÆ„Åæ„Åæ `zone_tmp.ch` „Å´‰øùÂ≠ò**Ôºà„Çø„Ç§„É†„Çæ„Éº„É≥ÊÉÖÂ†±„ÅØ„Çª„ÉÉ„Éà„Å†„Åã„ÇâÔºâ
#     - `zone()` „ÅÆ„Çø„Ç§„Éü„É≥„Ç∞„Åß **ÈÅ∏Êäû„Åï„Çå„ÅüË°å„Çí `zonename.ch` / `timezone.ch` „Å´ÂàÜÂâ≤‰øùÂ≠ò**
#       - `zonename.ch` ‚Üí `$6`Ôºà„Çæ„Éº„É≥ÂêçÔºâ
#       - `timezone.ch` ‚Üí `$7`Ôºà„Çø„Ç§„É†„Çæ„Éº„É≥Ôºâ
#
# 3. ‰∏äÊõ∏„ÅçÁ¶ÅÊ≠¢ (`ch` „Éï„Ç°„Ç§„É´)
#     - `country.ch`
#     - `luci.ch`
#     - `country.ch`
#     - `zonename.ch`
#     - `timezone.ch`
#
# 4. `zone_tmp.ch` „Åã„Çâ `[1] Áï™Âè∑‰ªò„ÅçÈÅ∏ÊäûÊñπÂºè`
#     - `zone_tmp.ch` „Å´„ÅØ **„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅÆ„Åæ„Åæ** ‰øùÂ≠ò
#     - **ÈÅ∏ÊäûÊôÇ„Å´ `zonename.ch` / `timezone.ch` „Å´ÂàÜÂâ≤Êõ∏„ÅçËæº„Åø**
#     - **`zonename.ch` / `timezone.ch` „ÅØ‰∏äÊõ∏„ÅçÁ¶ÅÊ≠¢Ôºà1Âõû„Å†„ÅëÊõ∏„ÅçËæº„ÅøÂèØËÉΩÔºâ**
#
# 5. `zone_tmp.ch` „ÅåÁ©∫„Å™„ÇâÂÜçÈÅ∏Êäû
#     - `zone_tmp.ch` „Åå **Á©∫„Å†„Å£„Åü„Çâ„ÄÅ`select_country()` „Å´Êàª„Çã**
#     - `zone_tmp.ch` „ÅÆ **`NO_TIMEZONE` „ÅØË®±ÂèØ„Åó„Å™„ÅÑ**
#########################################################################
#########################################################################
# country_write: ÈÅ∏Êäû„Åï„Çå„ÅüÂõΩÊÉÖÂ†±„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò
#
# „ÄêË¶Å‰ª∂„Äë
# - `country.ch` „Å´ **Ë©≤ÂΩìË°å„Çí‰∏∏„Åî„Å®‰øùÂ≠ò**Ôºà„Éá„Éº„Çø„ÅÆÂü∫Ê∫ñÔºâ
# - `language.ch` „Å´ **$5ÔºàË®ÄË™ûÂêçÔºâ** „Çí‰øùÂ≠ò
# - `luci.ch` „Å´ **$4ÔºàË®ÄË™û„Ç≥„Éº„ÉâÔºâ** „Çí‰øùÂ≠ò
# - `country_tmp.ch`Ôºà$1-$5Ôºâ„Çí‰ΩúÊàê
# - `zone_tmp.ch`Ôºà$6-Ôºâ„Çí‰ΩúÊàêÔºà„Çæ„Éº„É≥ÊÉÖÂ†±„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ `NO_TIMEZONE` „ÇíË®òÈå≤Ôºâ
# - `zonename.ch`„ÄÅ`timezone.ch` „ÅØ `select_zone()` „Åß‰ΩúÊàê
#########################################################################
country_write() {
    local tmp_country="${CACHE_DIR}/country_tmp.ch"
    local cache_country="${CACHE_DIR}/country.ch"
    local cache_language="${CACHE_DIR}/language.ch"
    local cache_luci="${CACHE_DIR}/luci.ch"
    local cache_zone="${CACHE_DIR}/zone.ch"

    local country_data
    country_data=$(cat "$tmp_country" 2>/dev/null)
    if [ -z "$country_data" ]; then
        debug_log "ERROR" "No country data found in tmp_country."
        return 1
    fi

    local field_count
    field_count=$(echo "$country_data" | awk '{print NF}')

    local language_name=""
    local luci_code=""
    local zone_data=""

    if [ "$field_count" -ge 5 ]; then
        # „Éï„É´„É©„Ç§„É≥„Å´ÂøÖË¶Å„Å™„Éï„Ç£„Éº„É´„Éâ„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà:
        # $1: ÂõΩÂêç, $2: ‰Ωï„Åã, $3: ‰Ωï„Åã, $4: Ë®ÄË™û„Ç≥„Éº„Éâ, $5: Ë®ÄË™ûÂêç, $6ÔΩû: „Çæ„Éº„É≥ÊÉÖÂ†±
        luci_code=$(echo "$country_data" | awk '{print $4}')
        language_name=$(echo "$country_data" | awk '{print $5}')
        zone_data=$(echo "$country_data" | awk '{for(i=6;i<=NF;i++) printf "%s ", $i; print ""}')
    else
        # „ÇÇ„Åó„Éï„Ç£„Éº„É´„ÉâÊï∞„Åå2„ÅÆÂ†¥ÂêàÔºàË°®Á§∫Áî®„Å®„Åó„Å¶ country.db „Åã„ÇâÊäΩÂá∫„Åï„Çå„Åü„Ç±„Éº„ÇπÔºâ
        # ÊÉ≥ÂÆö: $1: ÂõΩÂêç, $2: Ë®ÄË™ûÂêç
        luci_code="default"  # „Éá„Éï„Ç©„É´„ÉàÂÄ§
        language_name=$(echo "$country_data" | awk '{print $2}')
        zone_data="NO_TIMEZONE"
    fi

    # „Ç≠„É£„ÉÉ„Ç∑„É•„Éï„Ç°„Ç§„É´„Å∏Êõ∏„ÅçËæº„Åø
    echo "$country_data" > "$cache_country"
    echo "$language_name" > "$cache_language"
    echo "$luci_code" > "$cache_luci"
    echo "$zone_data" > "$cache_zone"

    chmod 444 "$cache_country" "$cache_language" "$cache_luci" "$cache_zone"

    normalize_language
}

#########################################################################
# Last Update: 2025-02-12 17:25:00 (JST) üöÄ
# "Precision in code, clarity in purpose. Every update refines the path.""
# select_zone: ÈÅ∏Êäû„Åó„ÅüÂõΩ„Å´ÂØæÂøú„Åô„Çã„Çø„Ç§„É†„Çæ„Éº„É≥„ÇíÈÅ∏Êäû
#
# [1] „É¶„Éº„Ç∂„Éº„Åå„Çæ„Éº„É≥„ÇíÈÅ∏Êäû ‚Üê zone.ch
# [2] ‰∏ÄÊôÇ„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò (zone_tmp.ch)
# [3] zone.ch „Åã„Çâ zonename.ch, timezone.ch „ÇíÂàÜÈõ¢
# [4] zonename.ch, timezone.ch „ÇíÊõ∏„ÅçËæº„ÅøÁ¶ÅÊ≠¢„Å´„Åô„Çã
#[5] ‚Üí normalize_language()
#########################################################################
select_zone() {
    local cache_zone="${CACHE_DIR}/zone.ch"
    local cache_zone_tmp="${CACHE_DIR}/zone_tmp.ch"
    local cache_zonename="${CACHE_DIR}/zonename.ch"
    local cache_timezone="${CACHE_DIR}/timezone.ch"
    local flag_zone="${CACHE_DIR}/timezone_success_done"
    
    if [ -s "$cache_zonename" ] && [ -s "$cache_timezone" ]; then
        debug_log "INFO" "Timezone is already set. Skipping select_zone()."
        return
    fi
    
    local zone_data=$(cat "$cache_zone" 2>/dev/null)
    if [ -z "$zone_data" ]; then
        return
    fi

    local formatted_zone_list=$(awk '{gsub(",", " "); for (i=1; i<=NF; i+=2) print $i, $(i+1)}' "$cache_zone")

    select_list "$formatted_zone_list" "$cache_zone_tmp" "zone"

    local selected_zone=$(cat "$cache_zone_tmp" 2>/dev/null)
    if [ -z "$selected_zone" ]; then
        return
    fi

    local zonename=$(echo "$selected_zone" | awk '{print $1}')
    local timezone=$(echo "$selected_zone" | awk '{print $2}')

    echo "$zonename" > "$cache_zonename"
    echo "$timezone" > "$cache_timezone"

    chmod 444 "$cache_zonename" "$cache_timezone"

    if [ ! -f "$flag_zone" ]; then
        echo "$(get_message "MSG_TIMEZONE_SUCCESS")"
        touch "$flag_zone"
    fi
}

#########################################################################
# Last Update: 2025-02-18 11:00:00 (JST) üöÄ
# "Precision in code, clarity in purpose. Every update refines the path."
# normalize_language: Ë®ÄË™ûË®≠ÂÆö„ÅÆÊ≠£Ë¶èÂåñ
#
# „ÄêË¶Å‰ª∂„Äë
# 1. Ë®ÄË™û„ÅÆÊ±∫ÂÆö:
#    - `country.ch` „ÇíÊúÄÂÑ™ÂÖà„ÅßÂèÇÁÖßÔºàÂ§âÊõ¥‰∏çÂèØÔºâ
#    - `country.ch` „ÅåÁÑ°„ÅÑÂ†¥Âêà„ÅØ `select_country()` „ÇíÂÆüË°å„Åó„ÄÅÊâãÂãïÈÅ∏Êäû
#
# 2. „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË®ÄË™û (`message.ch`) „ÅÆÁ¢∫ÂÆö:
#    - `messages.db` „ÅÆ `SUPPORTED_LANGUAGES` „ÇíÁ¢∫Ë™ç
#    - `country.ch` „Å´Ë®òÈå≤„Åï„Çå„ÅüË®ÄË™û„Åå `SUPPORTED_LANGUAGES` „Å´Âê´„Åæ„Çå„ÇãÂ†¥Âêà„ÄÅ„Åù„Çå„Çí `message.ch` „Å´‰øùÂ≠ò
#    - `SUPPORTED_LANGUAGES` „Å´ÁÑ°„ÅÑÂ†¥Âêà„ÄÅ`message.ch` „Å´ `US`Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ„ÇíË®≠ÂÆö
#
# 3. `country.ch` „Å®„ÅÆÈñ¢‰øÇ:
#    - `country.ch` „ÅØ„Éá„Éê„Ç§„ÇπË®≠ÂÆöÁî®ÔºàÂ§âÊõ¥‰∏çÂèØÔºâ
#    - `message.ch` „ÅØ„Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫Áî®Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂèØËÉΩÔºâ
#
# 4. `$ACTIVE_LANGUAGE` „ÅÆÁÆ°ÁêÜ:
#    - `normalize_language()` ÂÆüË°åÊôÇ„Å´ `$ACTIVE_LANGUAGE` „ÇíË®≠ÂÆö
#    - `$ACTIVE_LANGUAGE` „ÅØ `message.ch` „ÅÆÂÄ§„ÇíÂ∏∏„Å´ÂèÇÁÖß
#    - `$ACTIVE_LANGUAGE` „ÅåÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Åß `US`
#
# 5. „É°„É≥„ÉÜ„Éä„É≥„Çπ:
#    - `country.ch` „ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å™Â†¥Âêà„Åß„ÇÇÂ§âÊõ¥„Åó„Å™„ÅÑ
#    - `message.ch` „ÅÆ„Åø„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÈÅ©Áî®„Åó„ÄÅ„Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ‰∏ÄË≤´ÊÄß„ÇíÁ∂≠ÊåÅ
#    - Ë®ÄË™ûË®≠ÂÆö„Å´ÂΩ±Èüø„Çí‰∏é„Åà„Åö„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË°®Á§∫„ÅÆ„Åø„ÇíÂà∂Âæ°„Åô„Çã
#########################################################################
normalize_language() {
    local message_db="${BASE_DIR}/messages.db"
    local country_cache="${CACHE_DIR}/country.ch"
    local message_cache="${CACHE_DIR}/message.ch"
    local selected_language=""
    local flag_file="${CACHE_DIR}/country_success_done"

    if [ -f "$flag_file" ]; then
        debug_log "INFO" "normalize_language() already done. Skipping repeated success message."
        return 0
    fi

    if [ ! -f "$country_cache" ]; then
        debug_log "ERROR" "country.ch not found. Cannot determine language."
        return 1
    fi

    local field_count
    field_count=$(awk '{print NF}' "$country_cache")

    if [ "$field_count" -ge 5 ]; then
        selected_language=$(awk '{print $5}' "$country_cache")
    else
        selected_language=$(awk '{print $2}' "$country_cache")
    fi

    debug_log "DEBUG" "Selected language extracted from country.ch -> $selected_language"

    local supported_languages
    supported_languages=$(grep "^SUPPORTED_LANGUAGES=" "$message_db" | cut -d'=' -f2 | tr -d '"')

    if echo "$supported_languages" | grep -qw "$selected_language"; then
        debug_log "DEBUG" "Using message database language: $selected_language"
        echo "$selected_language" > "$message_cache"
        ACTIVE_LANGUAGE="$selected_language"
    else
        debug_log "WARNING" "Language '$selected_language' not found in messages.db. Using 'US' as fallback."
        echo "US" > "$message_cache"
        ACTIVE_LANGUAGE="US"
    fi

    debug_log "DEBUG" "Final system message language -> $ACTIVE_LANGUAGE"
    echo "$(get_message "MSG_COUNTRY_SUCCESS")"
    touch "$flag_file"
}


# üî¥„ÄÄ„É©„É≥„Ç≤„Éº„Ç∏ÔºàË®ÄË™û„Éª„Çæ„Éº„É≥ÔºâÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

# üîµ„ÄÄ„Éë„ÉÉ„Ç±„Éº„Ç∏Á≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ-------------------------------------------------------------------------------------------------------------------------------------------

#########################################################################
# Last Update: 2025-02-20 16:22:00 (JST) üöÄ
# install_package: „Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´Âá¶ÁêÜ (OpenWrt / Alpine Linux)
#
# „ÄêÊ¶ÇË¶Å„Äë
# ÊåáÂÆö„Åï„Çå„Åü„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„ÄÅ„Ç™„Éó„Ç∑„Éß„É≥„Å´Âøú„Åò„Å¶‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã„ÄÇ
#„ÄÄGitHub „ÅÆ package.db „ÅÆ„É™„É¢„Éº„ÉàÁÆ°ÁêÜ„ÄÄ„ÄÄÔºúÔºúÔºú„ÄÄËøΩÂä†Ë¶Å‰ª∂
#
# „Äê„Éï„É≠„Éº„Äë
# 2Ô∏è‚É£ „Éá„Éê„Ç§„Çπ„Å´„Éë„ÉÉ„Ç±„Éº„Ç∏„Åå„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅãÁ¢∫Ë™ç
# 1Ô∏è‚É£ update „ÅØÂàùÂõû„Å´‰∏ÄÂõûÂæåÊúÄÈÅ©„Å™ÁÆ°ÁêÜÔºàÔºíÔºîÊôÇÈñì„ÅßÊõ¥Êñ∞Ôºâ„ÄÅopkg update / apk update „ÇíÂÆüË°å
# 3Ô∏è‚É£ „Éë„ÉÉ„Ç±„Éº„Ç∏„Åå„É™„Éù„Ç∏„Éà„É™„Å´Â≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
# 4Ô∏è‚É£ „Ç§„É≥„Çπ„Éà„Éº„É´Á¢∫Ë™çÔºàyn „Ç™„Éó„Ç∑„Éß„É≥„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥ÂêàÔºâ
# 5Ô∏è‚É£ „Ç§„É≥„Çπ„Éà„Éº„É´„ÅÆÂÆüË°å
# 6Ô∏è‚É£ Ë®ÄË™û„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÈÅ©Áî®Ôºàlang „Ç™„Éó„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥ÂêàÔºâ
# 7Ô∏è‚É£ local-package.db „ÅÆÈÅ©Áî®Ôºànotpack „Ç™„Éó„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥ÂêàÔºâ
# 8Ô∏è‚É£ Ë®≠ÂÆö„ÅÆÊúâÂäπÂåñÔºà„Éá„Éï„Ç©„É´„Éà enabled„ÄÅdisabled „Ç™„Éó„Ç∑„Éß„É≥„ÅßÁÑ°ÂäπÂåñÔºâ
#
# „Äê„Ç∞„É≠„Éº„Éê„É´„Ç™„Éó„Ç∑„Éß„É≥„Äë
# DEV_NULL
# DEBUG : Ë¶ÅÊâÄ„Å´„Çª„ÉÉ„Éà
#
# „Äê„Ç™„Éó„Ç∑„Éß„É≥„Äë
# - yn         : „Ç§„É≥„Çπ„Éà„Éº„É´Ââç„Å´Á¢∫Ë™ç„Åô„ÇãÔºà„Éá„Éï„Ç©„É´„Éà: Á¢∫Ë™ç„Å™„ÅóÔºâ
# - nolang     : Ë®ÄË™û„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÈÅ©Áî®„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºà„Éá„Éï„Ç©„É´„Éà: ÈÅ©Áî®„Åô„ÇãÔºâ
# - force      : Âº∑Âà∂„Ç§„É≥„Çπ„Éà„Éº„É´ Ôºà„Éá„Éï„Ç©„É´„Éà: ÈÅ©Áî®„Åó„Å™„ÅÑÔºâ
# - notpack    : package.db „Åß„ÅÆË®≠ÂÆöÈÅ©Áî®„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºà„Éá„Éï„Ç©„É´„Éà: ÈÅ©Áî®„Åô„ÇãÔºâ
# - disabled   : Ë®≠ÂÆö„Çí disabled „Å´„Åô„ÇãÔºà„Éá„Éï„Ç©„É´„Éà: enabledÔºâ
# - hidden     : Êó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅÆÂ†¥Âêà„ÄÅ"„Éë„ÉÉ„Ç±„Éº„Ç∏ xxx „ÅØ„Åô„Åß„Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åô" „ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈùûË°®Á§∫„Å´„Åô„Çã
# - test       : „Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏„Åß„ÅÇ„Å£„Å¶„ÇÇ„ÄÅ„Ç§„É≥„Çπ„Éà„Éº„É´Âá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã
# - update     : opkg update / apk update „ÇíÂº∑Âà∂ÁöÑ„Å´ÂÆüË°å„Åó„ÄÅupdate.ch „ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÁÑ°Ë¶ñ„Åô„Çã
#
# „Äê‰ªïÊßò„Äë
# - update.ch „ÇíÊõ∏„ÅçÂá∫„Åó„ÄÅupdate„ÇíÁÆ°ÁêÜ„Åô„ÇãÔºà${CACHE_DIR}/update.chÔºâ
# - update „Ç™„Éó„Ç∑„Éß„É≥„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà„ÄÅupdate.ch „ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÁÑ°Ë¶ñ„Åó„Å¶Âº∑Âà∂ÁöÑ„Å´ update „ÇíÂÆüË°å
# - downloader_ch „Åã„Çâ opkg „Åæ„Åü„ÅØ apk „ÇíÂèñÂæó„Åó„ÄÅÈÅ©Âàá„Å™„Éë„ÉÉ„Ç±„Éº„Ç∏ÁÆ°ÁêÜ„ÉÑ„Éº„É´„Çí‰ΩøÁî®
# - messages.db „ÇíÂèÇÁÖß„Åó„ÄÅ„Åô„Åπ„Å¶„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæóÔºàJP/US ÂØæÂøúÔºâ
# - local-package.db „ÅÆË®≠ÂÆö„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅuci set „ÇíÂÆüË°å„ÅóÈÅ©Áî®Ôºànotset „Ç™„Éó„Ç∑„Éß„É≥„ÅßÁÑ°ÂäπÂåñÂèØËÉΩÔºâ
# - Ë®ÄË™û„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅØ luci-app-xxx ÂΩ¢Âºè„ÇíÂØæË±°„Å´ÈÅ©Áî®Ôºàdont „Ç™„Éó„Ç∑„Éß„É≥„ÅßÁÑ°ÂäπÂåñÂèØËÉΩÔºâ
# - Ë®≠ÂÆö„ÅÆÊúâÂäπÂåñ„ÅØ„Éá„Éï„Ç©„É´„Éà enabled„ÄÅdisabled „Ç™„Éó„Ç∑„Éß„É≥ÊåáÂÆöÊôÇ„ÅÆ„Åø disabled
# - update „ÅØÊòéÁ§∫ÁöÑ„Å´ install_package update „ÅßÂÆüË°åÔºà„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´ÊôÇ„Å´„ÅØËá™ÂãïÂÆüË°å„Åó„Å™„ÅÑÔºâ
#
# „Äê‰ΩøÁî®‰æã„Äë
# - install_package ttyd                  ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÁ¢∫Ë™ç„Å™„Åó„ÄÅpackage.db ÈÅ©Áî®„ÄÅË®ÄË™û„Éë„ÉÉ„ÇØÈÅ©Áî®Ôºâ
# - install_package ttyd yn               ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÁ¢∫Ë™ç„ÅÇ„ÇäÔºâ
# - install_package ttyd nolang           ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàË®ÄË™û„Éë„ÉÉ„ÇØÈÅ©Áî®„Å™„ÅóÔºâ
# - install_package ttyd notpack          ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´Ôºàpackage.db „ÅÆÈÅ©Áî®„Å™„ÅóÔºâ
# - install_package ttyd disabled         ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàË®≠ÂÆö„Çí disabled „Å´„Åô„ÇãÔºâ
# - install_package ttyd yn nolang disabled hidden
#   ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÁ¢∫Ë™ç„ÅÇ„Çä„ÄÅË®ÄË™û„Éë„ÉÉ„ÇØÈÅ©Áî®„Å™„Åó„ÄÅË®≠ÂÆö„Çí disabled „Å´„Åó„ÄÅ
#      Êó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÈùûË°®Á§∫Ôºâ
# - install_package ttyd test             ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´Ôºà„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„Åß„ÇÇÂº∑Âà∂„Ç§„É≥„Çπ„Éà„Éº„É´Ôºâ
# - install_package ttyd update           ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´Ôºàopkg update / apk update „ÇíÂº∑Âà∂ÂÆüË°åÔºâ
#
# „Äêmessages.db„ÅÆË®òËø∞‰æã„Äë
# [ttyd]
# opkg update
# uci commit ttyd
# initd/ttyd/restat
# [ttyd] opkg update; uci commit ttyd; initd/ttyd/restat
#########################################################################
install_package() {
    local confirm_install="no"
    local skip_lang_pack="no"
    local skip_package_db="no"
    local set_disabled="no"
    local hidden="no"
    local test_mode="no"
    local force_install="no"
    local update_mode="no"
    local package_name=""
    local package_db_remote="${BASE_URL}/packages.db"
    local package_db_local="${CACHE_DIR}/local-package.db"
    local update_cache="${CACHE_DIR}/update.ch"

    # **„Ç™„Éó„Ç∑„Éß„É≥„ÅÆÂá¶ÁêÜ**
    for arg in "$@"; do
        case "$arg" in
            yn) confirm_install="yes" ;;
            nolang) skip_lang_pack="yes" ;;
            notpack) skip_package_db="yes" ;;
            disabled) set_disabled="yes" ;;
            hidden) hidden="yes" ;;
            test) test_mode="yes" ;;
            force) force_install="yes" ;;
            update) update_mode="yes" ;;
            *)
                if [ -z "$package_name" ]; then
                    package_name="$arg"
                else
                    debug_log "WARN" "Unknown option: $arg"
                fi
                ;;
        esac
    done

    if [ -z "$package_name" ]; then
        echo "$(get_message "MSG_INSTALL_ABORTED")" >&2
        return 1
    fi

    # **„Éë„ÉÉ„Ç±„Éº„Ç∏„Éû„Éç„Éº„Ç∏„É£„Éº„ÅÆÁ¢∫Ë™ç**
    if [ -f "${CACHE_DIR}/downloader_ch" ]; then
        PACKAGE_MANAGER=$(cat "${CACHE_DIR}/downloader_ch")
    else 
        echo "$(get_message "MSG_ERROR_NO_PACKAGE_MANAGER")" >&2
        return 1
    fi

    # **„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÉÅ„Çß„ÉÉ„ÇØ**
    if [ "$test_mode" = "no" ] && [ "$force_install" = "no" ]; then
        if [ "$PACKAGE_MANAGER" = "opkg" ] && opkg list-installed | grep -q "^$package_name "; then
            [ "$hidden" != "yes" ] && echo "$(get_message "MSG_PACKAGE_ALREADY_INSTALLED" | sed "s/{pkg}/$package_name/")"
            return 0
        elif [ "$PACKAGE_MANAGER" = "apk" ] && apk info -e "$package_name" >/dev/null 2>&1; then
            [ "$hidden" != "yes" ] && echo "$(get_message "MSG_PACKAGE_ALREADY_INSTALLED" | sed "s/{pkg}/$package_name/")"
            return 0
        fi
    fi

    # **update „ÅÆÁÆ°ÁêÜ**
    local current_date
    current_date=$(date '+%Y-%m-%d')

    if [ "$update_mode" = "yes" ] || [ ! -f "$update_cache" ] || ! grep -q "LAST_UPDATE=$current_date" "$update_cache"; then
        debug_log "DEBUG" "$(get_message "MSG_RUNNING_UPDATE")"

        # **„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„ÅÆÈñãÂßã„É°„ÉÉ„Çª„Éº„Ç∏Ôºàhidden „Åß„ÇÇÂøÖ„ÅöË°®Á§∫Ôºâ**
        echo -en "\r$(color cyan "$(get_message "MSG_UPDATE_IN_PROGRESS")") "

        # **„Çπ„Éî„Éä„ÉºË°®Á§∫„ÇíÈñãÂßãÔºà„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâÔºâ**
        spin() {
            local delay=0.1  # „Çπ„Éî„Éä„Éº„ÅÆÊõ¥Êñ∞ÈñìÈöî
            local spin_chars='-\|/'  # „Çπ„Éî„Éä„Éº„ÅÆÂõûËª¢„Éë„Çø„Éº„É≥
            local i=0

            while true; do
                # „Çπ„Éî„Éä„Éº„ÅÆË°®Á§∫
                printf "\r%s %s" "$(color cyan "$(get_message "MSG_UPDATE_IN_PROGRESS")")" "${spin_chars:i++%4:1}"
            
                # `usleep` „Åå„ÅÇ„Çå„Å∞Á≤æÂØÜ„Å™ÂæÖÊ©ü„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØ `sleep`
                if command -v usleep >/dev/null 2>&1; then
                    usleep 100000  # 0.1Áßí = 100,000„Éû„Ç§„ÇØ„É≠Áßí
                else
                    sleep "$delay"
                fi
            done
        }

        # „Çπ„Éî„Éä„Éº„Çí„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂÆüË°å„Åó„ÄÅ„Éó„É≠„Çª„ÇπID„Çí‰øùÂ≠ò
        spin &  
        SPINNER_PID=$!

        # **„Éà„É©„ÉÉ„Éó„ÇíË®≠ÂÆö„Åó„ÄÅ„Çπ„ÇØ„É™„Éó„ÉàÁµÇ‰∫ÜÊôÇ„Å´„Çπ„Éî„Éä„Éº„ÇíÁ¢∫ÂÆü„Å´ÂÅúÊ≠¢**
        XXX_cleanup_spinner() {
            if [ -n "$SPINNER_PID" ] && ps | grep -q " $SPINNER_PID "; then
                kill "$SPINNER_PID" >/dev/null 2>&1
                sleep 0.1  # „Éó„É≠„Çª„ÇπÁµÇ‰∫ÜÂæÖÊ©ü
                kill -9 "$SPINNER_PID" >/dev/null 2>&1
            fi
            unset SPINNER_PID  # `wait` „ÅÆ„Ç®„É©„Éº„ÇíÈò≤„Åê
        }

        cleanup_spinner() {
            if [ -n "$SPINNER_PID" ] && ps | grep -q " $SPINNER_PID "; then
                kill "$SPINNER_PID" >/dev/null 2>&1
                sleep 0.1
                kill -9 "$SPINNER_PID" >/dev/null 2>&1
            fi
            unset SPINNER_PID
        }

        trap cleanup_spinner EXIT INT TERM

        # **ÂÆüÈöõ„ÅÆ update „Ç≥„Éû„É≥„Éâ**
        if [ "$PACKAGE_MANAGER" = "opkg" ]; then
            opkg update > "${LOG_DIR}/opkg_update.log" 2>&1
            UPDATE_STATUS=$?
        elif [ "$PACKAGE_MANAGER" = "apk" ]; then
            apk update > "${LOG_DIR}/apk_update.log" 2>&1
            UPDATE_STATUS=$?
        fi

        # **„Çπ„Éî„Éä„Éº„ÇíÂÅúÊ≠¢**
        cleanup_spinner

        # **„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞**
        if [ "$UPDATE_STATUS" -ne 0 ]; then
            debug_log "ERROR" "$(get_message "MSG_UPDATE_FAILED")"
            printf "\r%s\n" "$(color red "$(get_message "MSG_UPDATE_FAILED")")"  # `\r` „ÅßË°å„Çí‰∏äÊõ∏„Åç + `\n` „ÅßÊîπË°å
            return 1
        else
            echo "LAST_UPDATE=$(date '+%Y-%m-%d')" > "$update_cache"
            printf "\r%s\n" "$(color green "$(get_message "MSG_UPDATE_COMPLETE")")"  # ‚úÖ ‰øÆÊ≠£
        fi

        # **„Éà„É©„ÉÉ„ÉóËß£Èô§**
        trap - EXIT
    fi
    
    # **„Ç§„É≥„Çπ„Éà„Éº„É´Ââç„ÅÆÁ¢∫Ë™ç**
    if [ "$confirm_install" = "yes" ]; then
        while true; do
            echo "$(get_message "MSG_CONFIRM_INSTALL" | sed "s/{pkg}/$package_name/")"
            echo -n "$(get_message "MSG_CONFIRM_ONLY_YN")"
            read -r yn
            case "$yn" in
                [Yy]*) break ;;
                [Nn]*) return 1 ;;
                *) echo "Invalid input. Please enter Y or N." ;;
            esac
        done
    fi

    debug_log "DEBUG" "Installing package: $package_name"
    if [ "$DEV_NULL" = "on" ]; then
        $PACKAGE_MANAGER install "$package_name" > /dev/null 2>&1
    else
        $PACKAGE_MANAGER install "$package_name"
    fi

    echo "$(get_message "MSG_PACKAGE_INSTALLED" | sed "s/{pkg}/$package_name/")"
    debug_log "DEBUG" "Successfully installed package: $package_name"
}

#########################################################################
# Last Update: 2025-02-19 20:15:00 (JST) üöÄ
# install_build: „Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Éì„É´„ÉâÂá¶ÁêÜ (OpenWrt / Alpine Linux)
#
# „ÄêÊ¶ÇË¶Å„Äë
# ÊåáÂÆö„Åï„Çå„Åü„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Éì„É´„ÉâÂæå„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„ÄÅ„Ç™„Éó„Ç∑„Éß„É≥„Å´Âøú„Åò„Å¶‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã„ÄÇ
# 1Âõû„ÅÆÂãï‰Ωú„ÅßÔºë„Å§„ÅÆ„Éì„É´„Éâ„ÅÆ„Åø„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí‰Ωú„Çä„Ç§„É≥„Çπ„Éà„Éº„É´‰ΩúÊ•≠
# DEV_NULL „Å´Âøú„Åò„Å¶Âá∫ÂäõÂà∂Âæ°
# DEBUG „Å´Âøú„Åò„Å¶Âá∫ÂäõÂà∂Âæ°ÔºàË¶ÅÊâÄ„Å´„Çª„ÉÉ„ÉàÔºâ
# packageÂêç„ÅØ„ÄÅ„Éì„É´„ÉâÂâç„ÅØ build_*, „Éì„É´„ÉâÂæå„ÅØ *
# ‰æãÔºöbuild_uconv„ÄÄ>>>„ÄÄuconv
#
# „Äê„Éï„É≠„Éº„Äë
# 2Ô∏è‚É£ „Éá„Éê„Ç§„Çπ„Å´„Éë„ÉÉ„Ç±„Éº„Ç∏„Åå„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅãÁ¢∫Ë™çÔºà„Éì„É´„ÉâÂæå„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏Âêç„ÅßÁ¢∫Ë™çÔºâ
# 4Ô∏è‚É£ „Ç§„É≥„Çπ„Éà„Éº„É´Á¢∫Ë™çÔºàyn „Ç™„Éó„Ç∑„Éß„É≥„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥ÂêàÔºâ
# 4Ô∏è‚É£ „Éì„É´„ÉâÁî®Ê±éÁî®„Éë„ÉÉ„Ç±„Éº„Ç∏Ôºà‰æãÔºömake, gccÔºâ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´ ‚Äªinstall_package()Âà©Áî®
# 4Ô∏è‚É£ „Éì„É´„Éâ‰ΩúÊ•≠
# 7Ô∏è‚É£ package.db „ÅÆÈÅ©Áî®Ôºà„Éì„É´„ÉâÁî®Ë®≠ÂÆöÔºöDB„ÅÆË®òËø∞„Å´Âæì„ÅÜÔºâ
# 5Ô∏è‚É£ „Ç§„É≥„Çπ„Éà„Éº„É´„ÅÆÂÆüË°åÔºàinstall_package()Âà©Áî®Ôºâ
# 7Ô∏è‚É£ package.db „ÅÆÈÅ©Áî®Ôºà„Éì„É´„ÉâÂæå„ÅÆË®≠ÂÆöÈÅ©Áî®„Åå„ÅÇ„ÇãÂ†¥ÂêàÔºöDB„ÅÆË®òËø∞„Å´Âæì„ÅÜÔºâ
#
# „Äê„Ç∞„É≠„Éº„Éê„É´„Ç™„Éó„Ç∑„Éß„É≥„Äë
# DEV_NULL
# DEBUG : Ë¶ÅÊâÄ„Å´„Çª„ÉÉ„Éà
#
# „Äê„Ç™„Éó„Ç∑„Éß„É≥„Äë‚ÄªÈ†Ü‰∏çÂêå„ÅßÈÅ©Áî®ÂèØ
# - yn         : „Ç§„É≥„Çπ„Éà„Éº„É´Ââç„Å´Á¢∫Ë™ç„Åô„ÇãÔºà„Éá„Éï„Ç©„É´„Éà: Á¢∫Ë™ç„Å™„ÅóÔºâ
# - hidden     : Êó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅÆÂ†¥Âêà„ÄÅ"„Éë„ÉÉ„Ç±„Éº„Ç∏ xxx „ÅØ„Åô„Åß„Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åô" „ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈùûË°®Á§∫„Å´„Åô„Çã
#
# „Äê‰ªïÊßò„Äë
# - downloader_ch „Åã„Çâ opkg „Åæ„Åü„ÅØ apk „ÇíÂèñÂæó„Åó„ÄÅÈÅ©Âàá„Å™„Éë„ÉÉ„Ç±„Éº„Ç∏ÁÆ°ÁêÜ„ÉÑ„Éº„É´„Çí‰ΩøÁî®
# - package.db „ÅÆË®≠ÂÆö„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅË©≤ÂΩì„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆË®òËø∞ „ÇíÂÆüË°å„ÅóÈÅ©Áî®
# - messages.db „ÇíÂèÇÁÖß„Åó„ÄÅ„Åô„Åπ„Å¶„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæóÔºàJP/US ÂØæÂøúÔºâ
#
# „Äê‰ΩøÁî®‰æã„Äë
# - install_build build_uconv                  ‚Üí uconv „Çí„Éì„É´„ÉâÂæå„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÁ¢∫Ë™ç„Å™„ÅóÔºâ
# - install_build build_uconv yn               ‚Üí uconv „Çí„Éì„É´„ÉâÂæå„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÁ¢∫Ë™ç„ÅÇ„ÇäÔºâ
# - install_build build_uconv yn hidden        ‚Üí uconv „Çí„Éì„É´„ÉâÂæå„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÁ¢∫Ë™ç„ÅÇ„Çä„ÄÅÊó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÈùûË°®Á§∫Ôºâ
# - install_build make                         ‚Üí „Éì„É´„ÉâÁí∞Â¢ÉÁî®„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏Ôºà‰æãÔºömake, gccÔºâ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´
#
# „Äêmessages.db„ÅÆË®òËø∞‰æã„Äë
# [build_uconv]„ÄÄ‚ÄªË°å„ÄÅÂàóÂïè„Çè„ÅöË®òËø∞ÂèØ
# [uconv]„ÄÄ‚ÄªË°å„ÄÅÂàóÂïè„Çè„ÅöË®òËø∞ÂèØ
#########################################################################
install_build() {
    local confirm_install="no"
    local hidden="no"
    local package_name=""
    
    # „Ç™„Éó„Ç∑„Éß„É≥„ÅÆÂá¶ÁêÜ
    for arg in "$@"; do
        case "$arg" in
            yn) confirm_install="yes" ;;
            hidden) hidden="yes" ;;
            *)
                if [ -z "$package_name" ]; then
                    package_name="$arg"
                else
                    debug_log "WARN" "Unknown option: $arg"
                fi
                ;;
        esac
    done

    if [ -z "$package_name" ]; then
        echo "Error: No package specified." >&2
        return 1
    fi

    # „Éë„ÉÉ„Ç±„Éº„Ç∏„Éû„Éç„Éº„Ç∏„É£„Éº„ÅÆÁ¢∫Ë™çÔºàdownloader_ch „ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂèÇÁÖßÔºâ
    if [ -f "${CACHE_DIR}/downloader_ch" ]; then
        PACKAGE_MANAGER=$(cat "${CACHE_DIR}/downloader_ch")
    else
        echo "Error: No package manager information found in cache." >&2
        return 1
    fi

    if [ "$confirm_install" = "yes" ]; then
        while true; do
            echo "$(get_message "MSG_CONFIRM_INSTALL" | sed "s/{pkg}/$package_name/")"
            echo -n "$(get_message "MSG_CONFIRM_ONLY_YN")"
            read -r yn
            case "$yn" in
                [Yy]*) break ;;
                [Nn]*) return 1 ;;
                *) echo "Invalid input. Please enter Y or N." ;;
            esac
        done
    fi

    # „Éì„É´„ÉâÁî®„ÅÆÊ±éÁî®„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´Ôºàhidden „ÅßÁ¢∫Ë™ç„Å™„ÅóÔºâ
    if [ "$PACKAGE_MANAGER" = "opkg" ]; then
        install_package make hidden
        install_package gcc hidden
        install_package git hidden
        install_package libtool hidden
        install_package automake hidden
        install_package pkg-config hidden
        install_package zlib-dev hidden
        install_package libssl-dev hidden
        install_package libicu-dev hidden
        install_package ncurses-dev hidden
        install_package libcurl4-openssl-dev hidden
        install_package libxml2-dev hidden
    elif [ "$PACKAGE_MANAGER" = "apk" ]; then
        install_package build-base hidden
        install_package gcc hidden
        install_package musl-dev hidden
        install_package libtool hidden
        install_package automake hidden
        install_package pkgconfig hidden
        install_package zlib-dev hidden
        install_package openssl-dev hidden
        install_package icu-dev hidden
        install_package ncurses-dev hidden
        install_package curl-dev hidden
        install_package libxml2-dev hidden
    else
        echo "Error: Unsupported package manager '$PACKAGE_MANAGER'." >&2
        return 1
    fi

    # „Éì„É´„ÉâÂâç„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏Âêç„ÇíÂèñÂæó
    local built_package="${package_name#build_}"

    # „Åô„Åß„Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™çÔºàopkg „Åæ„Åü„ÅØ apk „Å´ÂØæÂøúÔºâ
    if [ "$PACKAGE_MANAGER" = "opkg" ]; then
        if opkg list-installed | grep -q "^$built_package "; then
            [ "$hidden" != "yes" ] && echo "$(get_message "MSG_PACKAGE_ALREADY_INSTALLED" | sed "s/{pkg}/$built_package/")"
            return 0
        fi
    elif [ "$PACKAGE_MANAGER" = "apk" ]; then
        if apk info -e "$built_package" >/dev/null 2>&1; then
            [ "$hidden" != "yes" ] && echo "$(get_message "MSG_PACKAGE_ALREADY_INSTALLED" | sed "s/{pkg}/$built_package/")"
            return 0
        fi
    fi

    # „Éì„É´„ÉâÈñãÂßã„É°„ÉÉ„Çª„Éº„Ç∏
    echo "$(get_message "MSG_BUILD_START" | sed "s/{pkg}/$built_package/")"

    # „Éì„É´„ÉâÁî®„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´Ôºàinstall_package() „ÇíÂà©Áî®Ôºâ
    install_package "$package_name"

    # „Éì„É´„Éâ‰ΩúÊ•≠„ÅÆÈñãÂßãÊôÇÈñì„ÇíË®òÈå≤
    local start_time=$(date +%s)
    debug_log "INFO" "Building package: $built_package"
    if ! build_package "$package_name"; then
        echo "$(get_message "MSG_BUILD_FAIL" | sed "s/{pkg}/$built_package/")"
        debug_log "ERROR" "Build failed for package: $built_package"
        return 1
    fi
    local end_time=$(date +%s)
    local build_time=$((end_time - start_time))
    echo "$(get_message "MSG_BUILD_TIME" | sed "s/{pkg}/$built_package/" | sed "s/{time}/$build_time/")"
    debug_log "INFO" "Build time for $built_package: $build_time seconds"

    # package.db „ÅÆÈÅ©Áî®Ôºà„Éì„É´„ÉâÁî®Ë®≠ÂÆöÔºâ
    if grep -q "^$package_name=" "${BASE_DIR}/packages.db"; then
        eval "$(grep "^$package_name=" "${BASE_DIR}/packages.db" | cut -d'=' -f2-)"
    fi

    # „Éì„É´„ÉâÂæå„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„Çí install_package() „Å´‰æùÈ†º
    install_package "$built_package"
    echo "$(get_message "MSG_BUILD_SUCCESS" | sed "s/{pkg}/$built_package/")"
    debug_log "INFO" "Successfully built and installed package: $built_package"
}

# üî¥„ÄÄ„Éë„ÉÉ„Ç±„Éº„Ç∏Á≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

#########################################################################
# country_info: ÈÅ∏Êäû„Åï„Çå„ÅüÂõΩ„Å®Ë®ÄË™û„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíË°®Á§∫
#########################################################################
country_info() {
    local country_info_file="${BASE_DIR}/country.ch"
    local selected_language_code=$(cat "${BASE_DIR}/check_country")
    if [ -f "$country_info_file" ]; then
        grep -w "$selected_language_code" "$country_info_file"
    else
        printf "%s\n" "$(color red "Country information not found.")"
    fi
}

#########################################################################
# handle_exit: Ê≠£Â∏∏ÁµÇ‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åó„Å¶ÁµÇ‰∫Ü
#########################################################################
handle_exit() {
    local message="$1"
    color yellow "$message"
    exit 0
}

#########################################################################
# Last Update: 2025-02-15 10:00:00 (JST) üöÄ
# check_option: „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥„Ç™„Éó„Ç∑„Éß„É≥Ëß£Êûê„ÉªÊ≠£Ë¶èÂåñÈñ¢Êï∞
#
# „ÄêÊ¶ÇË¶Å„Äë
# „Åì„ÅÆÈñ¢Êï∞„ÅØ„ÄÅaios Ëµ∑ÂãïÊôÇ„Å´Ê∏°„Åï„Çå„Åü„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÇíËß£Êûê„Åó„ÄÅ
# „ÉÄ„ÉÉ„Ç∑„É•‰ªò„Åç„ÅÆÂºïÊï∞„ÅØ„Ç™„Éó„Ç∑„Éß„É≥„Å®„Åó„Å¶Ëß£Êûê„ÄÅÈùû„ÉÄ„ÉÉ„Ç∑„É•ÂºïÊï∞„ÅØ„Åô„Åπ„Å¶
# Ë®ÄË™û„Ç™„Éó„Ç∑„Éß„É≥„Å®„Åó„Å¶Êâ±„ÅÑ„ÄÅÊúÄÂàù„Å´Ë¶ã„Å§„Åã„Å£„ÅüÂÄ§„Çí SELECTED_LANGUAGE „Å´Ë®≠ÂÆö„Åó„Åæ„Åô„ÄÇ
#
# ‚Äª MODE „ÅÆÊåáÂÆö„ÅØÂøÖ„Åö„ÉÄ„ÉÉ„Ç∑„É•‰ªò„Åç„ÅßË°å„ÅÑ„ÄÅ‰ª•‰∏ã„ÅÆÂêÑ„Éë„Çø„Éº„É≥„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åô„ÄÇ
#     common_full  : -cf, --cf, -common_full, --common_full  ‚Üí MODE="full"
#     common_light : -cl, --cl, -ocommon_light, --ocommon_light ‚Üí MODE="light"
#     common_debug : -cd, --cd, -common_debug, --common_debug, --ocommon_debug ‚Üí MODE="debug"
#     reset        : -r, --r, -reset, --reset, -resrt, --resrt ‚Üí MODE="reset" „Åä„Çà„Å≥ RESET="true"
#
# „ÄêÂØæÂøú„Ç™„Éó„Ç∑„Éß„É≥„Äë
#  - „Éò„É´„Éó:         -h, --h, -help, --help, -?, --?  
#  - „Éê„Éº„Ç∏„Éß„É≥:     -v, --v, -version, --version  
#  - „Éá„Éê„ÉÉ„Ç∞:       -d, --d, -debug, --debug, -d1, --d1  
#                     ‚Üí DEBUG_MODE="true", DEBUG_LEVEL="DEBUG"
#                   -d2, --d2, -debug2, --debug2  
#                     ‚Üí DEBUG_MODE="true", DEBUG_LEVEL="DEBUG2"
#  - „É¢„Éº„ÉâÊåáÂÆö:
#       - full:       -cf, --cf, -common_full, --common_full  ‚Üí MODE="full"
#       - light:      -cl, --cl, -ocommon_light, --ocommon_light ‚Üí MODE="light"
#       - debug:      -cd, --cd, -common_debug, --common_debug, --ocommon_debug ‚Üí MODE="debug"
#       - reset:      -r, --r, -reset, --reset, -resrt, --resrt ‚Üí MODE="reset", RESET="true"
#  - Âº∑Âà∂ÂÆüË°å:       -f, --f, -force, --force  ‚Üí FORCE="true"
#  - „Éâ„É©„Ç§„É©„É≥:     -dr, --dr, -dry-run, --dry-run  ‚Üí DRY_RUN="true"
#  - „É≠„Ç∞Âá∫ÂäõÂÖà:     -l, --l, -logfile, --logfile <path>  ‚Üí LOGFILE „Å´ÊåáÂÆö„Éë„Çπ
#
# „Äê‰ªïÊßò„Äë
# 1. „ÉÄ„ÉÉ„Ç∑„É•‰ªò„Åç„ÅÆÂºïÊï∞„ÅØ„Ç™„Éó„Ç∑„Éß„É≥„Å®„Åó„Å¶Ëß£Êûê„Åó„ÄÅÈùû„ÉÄ„ÉÉ„Ç∑„É•ÂºïÊï∞„ÅØ„Åô„Åπ„Å¶ SELECTED_LANGUAGE „Å®„Åó„Å¶Êâ±„ÅÑ„Åæ„Åô„ÄÇ
# 2. Ëß£ÊûêÁµêÊûú„ÅØ„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ SELECTED_LANGUAGE, DEBUG_MODE, DEBUG_LEVEL, MODE, DRY_RUN, LOGFILE, FORCE, RESET, HELP „Å®„Åó„Å¶„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åï„Çå„ÄÅ
#    ÂæåÁ∂ö„ÅÆ check_common(), select_country(), debug(), script_version() „Å™„Å©„Å´Ê≠£Ë¶èÂåñ„Åï„Çå„ÅüÂÄ§„Å®„Åó„Å¶Ê∏°„Åï„Çå„Åæ„Åô„ÄÇ
#
# „Äê‰ΩøÁî®‰æã„Äë
#   sh aios.sh -d --dry-run --reset -l /var/log/aios.log -f -cf en
#    ‚Üí Ë®ÄË™û "en" „Åå SELECTED_LANGUAGE „Å´Ë®≠ÂÆö„Åï„Çå„ÄÅMODE „ÅØ "full"Ôºà-cfÁ≠â„ÅßÊåáÂÆöÔºâ„ÄÅ„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊúâÂäπ„ÄÅ
#       „Ç≠„É£„ÉÉ„Ç∑„É•„É™„Çª„ÉÉ„Éà„ÄÅ„Éâ„É©„Ç§„É©„É≥„ÄÅ„É≠„Ç∞Âá∫ÂäõÂÖà /var/log/aios.log„ÄÅÂº∑Âà∂ÂÆüË°å„ÅåÊúâÂäπ„Å´„Å™„Çã„ÄÇ
#########################################################################
check_option() {
    debug_log DEBUG "check_option received before args: $*"

    # „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÅÆË®≠ÂÆö
    SELECTED_LANGUAGE=""
    MODE="full"
    DEBUG_MODE="false"
    DEBUG_LEVEL="INFO"
    DRY_RUN="false"
    LOGFILE=""
    FORCE="false"
    RESET="false"
    HELP="false"

    # Ë®ÄË™û„Åä„Çà„Å≥„Ç™„Éó„Ç∑„Éß„É≥ÂºïÊï∞„ÅÆÂá¶ÁêÜ
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--h|-help|--help|-\?|--\?)
                HELP="true"
                print_help
                exit 0
                ;;
            -v|--v|-version|--version)
                script_version
                exit 0
                ;;
            -d|--d|-debug|--debug|-d1|--d1)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG"
                ;;
            -d2|--d2|-debug2|--debug2)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG2"
                ;;
            -cf|--cf|-common_full|--common_full)
                MODE="full"
                ;;
            -cl|--cl|-ocommon_light|--ocommon_light)
                MODE="light"
                ;;
            -cd|--cd|-common_debug|--common_debug|--ocommon_debug)
                MODE="debug"
                ;;
            -r|--r|-reset|--reset|-resrt|--resrt)
                MODE="reset"
                RESET="true"
                ;;
            -f|--f|-force|--force)
                FORCE="true"
                ;;
            -dr|--dr|-dry-run|--dry-run)
                DRY_RUN="true"
                ;;
            -l|--l|-logfile|--logfile)
                if [ -n "$2" ] && [ "${2#-}" != "$2" ]; then
                    LOGFILE="$2"
                    shift
                else
                    echo "Error: --logfile requires a path argument"
                    exit 1
                fi
                ;;
            -*)
                echo "Warning: Unknown option: $1" >&2
                ;;
            *)
                if [ -z "$SELECTED_LANGUAGE" ]; then
                    SELECTED_LANGUAGE="$1"
                fi
                ;;
        esac
        shift
    done

    # Áí∞Â¢ÉÂ§âÊï∞„Å®„Åó„Å¶Ë®≠ÂÆö
    export SELECTED_LANGUAGE DEBUG_MODE DEBUG_LEVEL MODE DRY_RUN LOGFILE FORCE RESET HELP

    # „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂá∫Âäõ
    debug_log DEBUG "check_option: SELECTED_LANGUAGE='$SELECTED_LANGUAGE', MODE='$MODE', DEBUG_MODE='$DEBUG_MODE', DEBUG_LEVEL='$DEBUG_LEVEL', DRY_RUN='$DRY_RUN', LOGFILE='$LOGFILE', FORCE='$FORCE', RESET='$RESET', HELP='$HELP'"

    # Ë®≠ÂÆö„Åï„Çå„ÅüË®ÄË™û„Çí `check_common()` „Å´Ê∏°„Åô
    check_common "$SELECTED_LANGUAGE"
} 

#########################################################################
# Last Update: 2025-02-16 21:45:00 (JST) üöÄ
# "Ensuring seamless updates, one script at a time."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `download_script()` „Çí `download()` „Å´Áµ±Âêà„Åó„ÄÅ‰∏ÄË≤´ÊÄß„ÇíÁ¢∫‰øù„Åô„Çã„ÄÇ
# 2. `debug_log()` „ÇíÂº∑Âåñ„Åó„ÄÅ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁä∂Ê≥Å„ÇíË©≥Á¥∞„Å´Ë®òÈå≤„ÄÇ
# 3. `download()` „ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÇíË¶ãÁõ¥„Åó„ÄÅÂ§±ÊïóÊôÇ„ÅÆÊåôÂãï„ÇíÊîπÂñÑ„ÄÇ
# 4. `openwrt.db`, `messages.db`, `country.db`, `packages.db` „ÇíÈÅ©Âàá„Å´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÄÇ
# 5. ÂΩ±ÈüøÁØÑÂõ≤: `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
check_common() {
    local lang_code="$1"
    local mode="${2:-full}" 
 
    # „É¢„Éº„Éâ„Åî„Å®„ÅÆÂá¶ÁêÜ
    case "$mode" in
        reset)
            rm -f "${CACHE_DIR}/country.ch" \
                  "${CACHE_DIR}/language.ch" \
                  "${CACHE_DIR}/luci.ch" \
                  "${CACHE_DIR}/zone.ch" \
                  "${CACHE_DIR}/zonename.ch" \
                  "${CACHE_DIR}/timezone.ch" \
                  "${CACHE_DIR}/country_success_done" \
                  "${CACHE_DIR}/timezone_success_done"
            echo "$(get_message "MSG_RESET_COMPLETE")"
            exit 0
            ;;
        full)
            download "hidden" "messages.db"
            download "hidden" "openwrt.db"
            download "hidden" "country.db"
            download "hidden" "local-package.db"
            check_openwrt
            check_downloader
            select_country "$lang_code"
            ;;
        light|debug)
            download "messages.db"
            download "openwrt.db"
            download "country.db"
            download "local-package.db"
            check_openwrt
            check_downloader
            select_country "$lang_code"
            ;;
        return)
            rm -f "${CACHE_DIR}/country.ch" \
                  "${CACHE_DIR}/language.ch" \
                  "${CACHE_DIR}/luci.ch" \
                  "${CACHE_DIR}/zone.ch" \
                  "${CACHE_DIR}/zonename.ch" \
                  "${CACHE_DIR}/timezone.ch" \
                  "${CACHE_DIR}/country_success_done" \
                  "${CACHE_DIR}/timezone_success_done"
            select_country
            ;;
        *)
            ;;
    esac
}
