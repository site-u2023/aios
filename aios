#!/bin/sh

SCRIPT_VERSION="2025.04.06-00-00"

# =========================================================
# 📌 OpenWrt / Alpine Linux POSIX-Compliant Shell Script
# 🚀 Last Update: 2025-02-21
#
# 🏷️ License: CC0 (Public Domain)
# 🎯 Compatibility: OpenWrt >= 19.07 (Tested on 24.10.0)
#
# ⚠️ IMPORTANT NOTICE:
# OpenWrt OS exclusively uses **Almquist Shell (ash)** and
# is **NOT** compatible with Bourne-Again Shell (bash).
#
# 📢 POSIX Compliance Guidelines:
# ✅ Use `[` instead of `[[` for conditions
# ✅ Use $(command) instead of backticks `command`
# ✅ Use $(( )) for arithmetic instead of let
# ✅ Define functions as func_name() {} (no function keyword)
# ✅ No associative arrays (declare -A is NOT supported)
# ✅ No here-strings (<<< is NOT supported)
# ✅ No -v flag in test or [[
# ✅ Avoid bash-specific string operations like ${var:0:3}
# ✅ Avoid arrays entirely when possible (even indexed arrays can be problematic)
# ✅ Use printf followed by read instead of read -p
# ✅ Use printf instead of echo -e for portable formatting
# ✅ Avoid process substitution <() and >()
# ✅ Prefer case statements over complex if/elif chains
# ✅ Use command -v instead of which or type for command existence checks
# ✅ Keep scripts modular with small, focused functions
# ✅ Use simple error handling instead of complex traps
# ✅ Test scripts with ash/dash explicitly, not just bash
#
# 🛠️ Keep it simple, POSIX-compliant, and lightweight for OpenWrt!
### =========================================================
### 📌 AI Assistance Request: POSIX-Compliant Debugging Guide
### 
### When debugging or fixing errors in this POSIX shell script:
### 
### 1️⃣ Create a minimal reproducible test case (avoid bash features)
### 2️⃣ Test with ash/dash explicitly: dash ./test.sh
### 3️⃣ Use portable debugging methods: echo, printf, or set -x
### 4️⃣ Validate fixes against all POSIX compliance guidelines
### 5️⃣ Ensure the solution works in resource-constrained OpenWrt
### 
### ⚠️ IMPORTANT:
### - Avoid suggesting bash-specific solutions
### - Always test fixes with ash/dash before implementation
### - Prefer simple solutions over complex ones
### - Do not modify production code without test verification
### 
### 🛠️ Keep debugging simple, focused, and POSIX-compliant!
### =========================================================

# システム制御
DEV_NULL="${DEV_NULL:-on}"       # サイレントモード制御（on=有効, unset=無効）
DEBUG_MODE="${DEBUG_MODE:-false}" # デバッグモード（true=有効, false=無効）

# パス・ファイル関連
INTERPRETER="${INTERPRETER:-ash}"  # デフォルトインタープリタ
BIN_PATH="$(readlink -f "$0")"   # 実行ファイルの絶対パス
BIN_DIR="$(dirname "$BIN_PATH")" # 実行ファイルのディレクトリ
BIN_FILE="$(basename "$BIN_PATH")" # 実行ファイル名

# ベースディレクトリ設定
BASE_DIR="${BASE_DIR:-/tmp/aios}"      # 基本ディレクトリ
CACHE_DIR="${CACHE_DIR:-$BASE_DIR/cache}" # キャッシュディレクトリ
FEED_DIR="${FEED_DIR:-$BASE_DIR/feed}" # フィードディレクトリ
LOG_DIR="${LOG_DIR:-$BASE_DIR/logs}"   # ログディレクトリ

# ダウンロード関連設定
BASE_URL="${BASE_URL:-https://raw.githubusercontent.com/site-u2023/aios/main}" # 基本URL
CACHE_BUST="?cache_bust=$(date +%s)" # キャッシュバスティングパラメータ

# wget関連設定
BASE_WGET="wget --no-check-certificate -q" # 基本wgetコマンド
BASE_WGET_AUTH_BEARER='wget --no-check-certificate -q -O "$1" --header="Authorization: Bearer $2" "$3"' # Bearer認証用
BASE_WGET_AUTH_TOKEN='wget --no-check-certificate -q -O "$1" --header="Authorization: token $2" "$3"'   # Token認証用

# GitHub API認証関連
GITHUB_TOKEN_FILE="/etc/aios_token" # GitHubトークン保存ファイル
UPDATE_CACHE="${CACHE_DIR}/update.ch" # 更新情報キャッシュ

# メッセージ翻訳システムの設定
DEFAULT_LANGUAGE="${DEFAULT_LANGUAGE:-en}"  # デフォルト言語
MSG_MEMORY=""                          # メッセージキャッシュ
MSG_MEMORY_INITIALIZED="false"         # メモリキャッシュ初期化フラグ
MSG_MEMORY_LANG=""                     # メモリキャッシュの言語

# メッセージキャッシュ
MSG_MEMORY=""
MSG_MEMORY_INITIALIZED="false"
MSG_MEMORY_LANG=""

# GitHub APIレート制限情報
API_REMAINING=""       # 残りAPI呼び出し回数
API_LIMIT=""           # APIレート制限値
API_RESET_TIME=""      # API制限リセット時間（分）
API_AUTH_METHOD=""     # 認証方法（token/bearer/direct）
API_LAST_CHECK=""      # 最終API確認時間（Unix時間）
API_CACHE_TTL="60"     # APIキャッシュ有効期間（秒）

# コミット情報キャッシュ関連
COMMIT_CACHE_DIR="${CACHE_DIR}/commits" # コミット情報キャッシュディレクトリ
COMMIT_CACHE_TTL="1800" # コミットキャッシュ有効期間（30分=1800秒）
SKIP_CACHE="false"     # キャッシュスキップフラグ（true=キャッシュ無視）

# 🔵　エラー・デバッグ　ここから　🔵-------------------------------------------------------------------------------------------------------------------------------------------

handle_error() {
    local error_key="$1"
    local file="$2"
    local version="$3"
    local exit_required="${4:-no}"

    local error_message
    error_message=$(get_message "$error_key")

    # メッセージが取得できなかった場合のフォールバック
    if [ -z "$error_message" ]; then
        error_message="Unknown error occurred. Key: $error_key"
    fi

    # 変数を置換
    error_message=$(echo "$error_message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # ログ記録 & 表示
    debug_log "ERROR" "$error_message"
    echo -e "$(color red "$error_message")"

    if [ "$exit_required" = "yes" ]; then
        debug_log "ERROR" "Critical error occurred, exiting: $error_message"
        exit 1
    else
        debug_log "DEBUG" "Non-critical error: $error_message"
        return 1
    fi
}

debug_log() {
    local level="$1"
    local message="$2"
    local file="$3"
    local version="$4"
    local debug_level="${DEBUG_LEVEL:-ERROR}"  # デフォルト値を設定
    
    # レベル判定のシンプル化
    case "$level" in
        "DEBUG"|"INFO"|"WARN"|"ERROR") ;;
        "")
            level="DEBUG"
            message="$1"
            file="$2"
            version="$3"
            ;;
        *)
            message="$1"
            file="$2"
            version="$3"
            level="DEBUG"
            ;;
    esac

    # バージョン情報のクリーニング（メッセージにバージョン情報が含まれる場合）
    if echo "$message" | grep -q "version\|Version"; then
        # バージョン情報部分を抽出してクリーニング
        local cleaned_message="$message"
        # aios - [2025-03-10... のようなパターンを検出
        if echo "$message" | grep -q " - "; then
            local prefix=$(echo "$message" | sed 's/ - .*//')
            local version_part=$(echo "$message" | sed 's/.* - //')
            
            # clean_version_string関数を呼び出し
            local cleaned_version=$(clean_version_string "$version_part")
            
            cleaned_message="$prefix - $cleaned_version"
        fi
        message="$cleaned_message"
    fi

    # 変数を置換
    message=$(echo "$message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # ログレベル制御
    case "$DEBUG_LEVEL" in
        DEBUG)    allowed_levels="DEBUG INFO WARN ERROR" ;;
        INFO)     allowed_levels="INFO WARN ERROR" ;;
        WARN)     allowed_levels="WARN ERROR" ;;
        ERROR)    allowed_levels="ERROR" ;;
        *)        allowed_levels="ERROR" ;;
    esac

    if echo "$allowed_levels" | grep -q "$level"; then
        local timestamp
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        local log_message="[$timestamp] $level: $message"

        # カラー表示 - 標準エラー出力に出力
        case "$level" in
            "ERROR") printf "%s\n" "$(color red "$log_message")" >&2 ;;
            "WARN") printf "%s\n" "$(color yellow "$log_message")" >&2 ;;
            "INFO") printf "%s\n" "$(color cyan "$log_message")" >&2 ;;
            "DEBUG") printf "%s\n" "$(color white "$log_message")" >&2 ;;
        esac

        # ログファイルに記録
        if [ "$AIOS_INITIALIZED" = "true" ] && [ -d "$LOG_DIR" ]; then
            echo "$log_message" >> "$LOG_DIR/debug.log" 2>/dev/null
        fi
    fi
}

# 🔴　エラー・デバッグ　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　ヘルプ　ここから　🔵-------------------------------------------------------------------------------------------------------------------------------------------

print_help() {
    printf "%s\n\n" "$(get_message "MSG_HELP_USAGE")"
    
    printf "%s\n" "$(get_message "MSG_HELP_OPTIONS_HEADER")"
    printf "  %-25s %s\n" "-h, --help" "$(get_message "MSG_HELP_HELP")"
    printf "  %-25s %s\n" "-v, --version" "$(get_message "MSG_HELP_VERSION")"
    printf "  %-25s %s\n" "-r, --reset" "$(get_message "MSG_HELP_RESET")"
    printf "  %-25s %s\n" "-d, --debug" "$(get_message "MSG_HELP_DEBUG")"
    printf "  %-25s %s\n" "-u, --update" "$(get_message "MSG_HELP_UPDATE")"
    printf "  %-25s %s\n" "-f, --force" "$(get_message "MSG_HELP_FORCE")"
    printf "  %-25s %s\n" "-t, --token" "$(get_message "MSG_HELP_TOKEN")"
    printf "  %-25s %s\n" "-cf, --common_full" "$(get_message "MSG_HELP_FULL")"
    printf "  %-25s %s\n" "-cl, --common_light" "$(get_message "MSG_HELP_LIGHT")"
    printf "  %-25s %s\n" "-cd, --common_debug" "$(get_message "MSG_HELP_COMMON_DEBUG")"
    printf "  %-25s %s\n" "-dr, --dry-run" "$(get_message "MSG_HELP_DRY_RUN")"
    printf "  %-25s %s\n" "-nc, --no-cache" "Skip using cached version data"
    
    printf "\n%s\n" "$(get_message "MSG_HELP_LANGUAGE_HEADER")"
    printf "  %-25s %s\n" "US, JP, ..." "$(get_message "MSG_HELP_LANGUAGE")"
    
    printf "\n%s\n" "$(get_message "MSG_HELP_EXAMPLES_HEADER")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE1")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE2")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE3")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE4")"
}

# 🔴　ヘルプ　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　カラー系　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

# 基本色表示関数
color() {
    local c="$1"; shift
    case "$c" in
        red) printf "\033[38;5;196m%s\033[0m" "$*" ;;
        orange) printf "\033[38;5;208m%s\033[0m" "$*" ;;
        yellow) printf "\033[38;5;226m%s\033[0m" "$*" ;;
        green) printf "\033[38;5;46m%s\033[0m" "$*" ;;
        cyan) printf "\033[38;5;51m%s\033[0m" "$*" ;;
        blue) printf "\033[38;5;33m%s\033[0m" "$*" ;;
        indigo) printf "\033[38;5;57m%s\033[0m" "$*" ;;
        purple) printf "\033[38;5;129m%s\033[0m" "$*" ;;
        magenta) printf "\033[38;5;201m%s\033[0m" "$*" ;;
        white) printf "\033[37m%s\033[0m" "$*" ;;
        black) printf "\033[30m%s\033[0m" "$*" ;;
        *) printf "%s" "$*" ;;
    esac
}

# 🔴　カラー系　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　メッセージ系　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

# メモリへのメッセージ読み込み関数
into_memory_message() {
    local lang="$DEFAULT_LANGUAGE"
    if [ -f "${CACHE_DIR}/message.ch" ]; then
        lang=$(cat "${CACHE_DIR}/message.ch")
    fi
    
    # メモリメッセージの初期化 - 基本的な補助メッセージのみを保持
    MSG_MEMORY=""
    
    # 基本メッセージの設定
    MSG_MEMORY="${MSG_MEMORY}${lang}|CONFIG_DOWNLOAD_SUCCESS=Downloaded{notr_colon_notr}"$'\n'
    MSG_MEMORY="${MSG_MEMORY}${lang}|CONFIG_DOWNLOAD_UNNECESSARY=Latest Files{notr_colon_notr}"$'\n'
    MSG_MEMORY="${MSG_MEMORY}${lang}|MSG_RESET_COMPLETE=Reset completed. All cached data has been cleared"$'\n'
    MSG_MEMORY="${MSG_MEMORY}${lang}|MSG_DELETE_COMPLETE=Delete completed. All base data has been cleared"$'\n'
    
    # DBファイルの内容を追加しない - DBファイルが主要ソース
    
    MSG_MEMORY_INITIALIZED="true"
    MSG_MEMORY_LANG="$lang"
}

# 翻訳システムを初期化する関数
init_translation() {
    debug_log "DEBUG" "Initializing translation system"
    
    # message.chが無い場合、デフォルト言語を設定
    if [ ! -f "${CACHE_DIR}/message.ch" ] && [ -f "${BASE_DIR}/message_${DEFAULT_LANGUAGE}.db" ]; then
        echo "$DEFAULT_LANGUAGE" > "${CACHE_DIR}/message.ch"
        debug_log "DEBUG" "Created default language settings: $DEFAULT_LANGUAGE"
    fi
    
    # メモリ内メッセージの初期化
    into_memory_message
    
    debug_log "DEBUG" "Translation module initialization complete"
    return 0
}

# メッセージDBファイルのパスを取得する関数
check_message_cache() {
    local lang="$1"
    
    # 言語パラメータの確認
    if [ -z "$lang" ]; then
        # 言語が指定されていない場合、message.chから取得
        if [ -f "${CACHE_DIR}/message.ch" ]; then
            lang=$(cat "${CACHE_DIR}/message.ch")
        else
            lang="$DEFAULT_LANGUAGE"
        fi
    fi
    
    # 言語固有DBの確認
    if [ -f "${BASE_DIR}/message_${lang}.db" ]; then
        echo "${BASE_DIR}/message_${lang}.db"
        return 0
    fi
    
    # デフォルト言語DBの確認
    if [ -f "${BASE_DIR}/message_${DEFAULT_LANGUAGE}.db" ]; then
        echo "${BASE_DIR}/message_${DEFAULT_LANGUAGE}.db"
        return 0
    fi
    
    # 何も見つからない場合は空文字列
    echo ""
    return 0
}

# 修正版 get_message() 関数 - 複数パラメータのPOSIX準拠実装
get_message() {
    local key="$1"
    shift  # 最初の引数（キー）を除去
    local lang="$DEFAULT_LANGUAGE"
    local message=""
    
    # 言語コードの取得
    if [ -f "${CACHE_DIR}/message.ch" ]; then
        lang=$(cat "${CACHE_DIR}/message.ch")
    fi
    
    # DBからメッセージ取得
    local db_file="$(check_message_cache "$lang")"
    if [ -n "$db_file" ] && [ -f "$db_file" ]; then
        message=$(grep "^${lang}|${key}=" "$db_file" 2>/dev/null | cut -d'=' -f2-)
        if [ -z "$message" ] && [ "$lang" != "$DEFAULT_LANGUAGE" ]; then
            message=$(grep "^${DEFAULT_LANGUAGE}|${key}=" "$db_file" 2>/dev/null | cut -d'=' -f2-)
        fi
    else
        if [ "$MSG_MEMORY_INITIALIZED" != "true" ]; then
            into_memory_message
        fi
        if [ -n "$MSG_MEMORY" ]; then
            message=$(echo "$MSG_MEMORY" | grep "^${DEFAULT_LANGUAGE}|${key}=" 2>/dev/null | cut -d'=' -f2-)
        fi
    fi
    
    # メッセージが見つからない場合はキーをそのまま返す
    if [ -z "$message" ]; then
        debug_log "DEBUG: Message not found for key: $key"
        message="$key"
    fi
    
    # 基本置換処理
    message=$(echo "$message" | sed 's/{notr_colon_notr}/:/g')
    message=$(echo "$message" | sed 's/{notr_yn_notr}/(y\/n)/g') 
    message=$(echo "$message" | sed 's/{notr_newline_notr}/\\n/g')
    
    # {notr_*_notr} を {*} に変換
    while echo "$message" | grep -q "{notr_.*_notr}"; do
        local placeholder=$(echo "$message" | grep -o "{notr_[^_]*_notr}" | head -1)
        local name=$(echo "$placeholder" | sed 's/{notr_\(.*\)_notr}/\1/')
        message=$(echo "$message" | sed "s/$placeholder/{$name}/g")
    done
    
    # パラメータ置換処理
    for param in "$@"; do
        param_name=$(echo "$param" | cut -d'=' -f1)
        param_value=$(echo "$param" | cut -d'=' -f2-)
        
        if [ -n "$param_name" ] && [ -n "$param_value" ]; then
            # セパレータを | に変更してsedの安全性を高める
            message=$(echo "$message" | sed "s|{$param_name}|$param_value|g")
            debug_log "DEBUG: Replaced {$param_name} with $param_value"
        fi
    done
    
    # 出力
    printf "%b" "$message"
    return 0
}

# 🔴　メッセージ系　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　トークン系　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

# コミット情報をキャッシュに保存する関数
save_commit_to_cache() {
    local file_path="$1"
    local version="$2"
    local auth_method="$3"
    local cache_file="${COMMIT_CACHE_DIR}/$(echo "$file_path" | tr '/' '_').commit"
    local timestamp=$(date +%s)
    
    debug_log "DEBUG" "Saving commit info to cache: $file_path -> $cache_file"
    
    # キャッシュフォルダがなければ作成
    [ -d "${COMMIT_CACHE_DIR}" ] || mkdir -p "${COMMIT_CACHE_DIR}"
    
    # キャッシュファイルに情報を書き込み
    {
        echo "VERSION=$version"
        echo "AUTH_METHOD=$auth_method"
        echo "TIMESTAMP=$timestamp"
        echo "TTL=$COMMIT_CACHE_TTL"
        echo "FILE_PATH=$file_path"
    } > "$cache_file"
    
    return 0
}

# キャッシュからコミット情報を取得する関数
get_commit_from_cache() {
    local file_path="$1"
    local force="$2"  # キャッシュ強制無視フラグ
    local cache_file="${COMMIT_CACHE_DIR}/$(echo "$file_path" | tr '/' '_').commit"
    local current_time=$(date +%s)
    
    # キャッシュスキップが有効またはforceフラグが指定されている場合はキャッシュを無視
    if [ "$SKIP_CACHE" = "true" ] || [ "$force" = "true" ] || [ "$FORCE" = "true" ]; then
        debug_log "DEBUG" "Skipping cache for $file_path (forced)"
        return 1
    fi
    
    # キャッシュファイルが存在しない場合
    if [ ! -f "$cache_file" ]; then
        debug_log "DEBUG" "No cache found for $file_path"
        return 1
    fi
    
    # キャッシュファイルから情報を読み込む
    . "$cache_file"
    
    # 必須変数が設定されているか確認
    if [ -z "$VERSION" ] || [ -z "$TIMESTAMP" ] || [ -z "$TTL" ]; then
        debug_log "WARN" "Invalid cache file for $file_path"
        return 1
    fi
    
    # キャッシュが有効期限内かチェック
    if [ $(( current_time - TIMESTAMP )) -gt "$TTL" ]; then
        debug_log "DEBUG" "Cache expired for $file_path ($(( (current_time - TIMESTAMP) / 60 )) minutes old)"
        return 1
    fi
    
    # キャッシュが有効な場合は結果を返す
    debug_log "DEBUG" "Using cached commit info for $file_path: $VERSION (age: $(( (current_time - TIMESTAMP) / 60 )) minutes)"
    echo "$VERSION $AUTH_METHOD"
    return 0
}

format_api_status() {
    local auth_method="$1"
    local remaining="$2"
    local limit="$3"
    local reset_minutes="$4"
    local status_text=""
    
    debug_log "DEBUG" "Formatting API status with auth_method=$auth_method, remaining=$remaining, limit=$limit, reset_minutes=$reset_minutes"
    
    if [ "$auth_method" = "token" ] || [ "$auth_method" = "header" ] || [ "$auth_method" = "user" ]; then
        # 認証API表示
        status_text="API: ${remaining}/${limit} TTL:${reset_minutes}m"
    elif [ "$auth_method" = "direct" ] && [ -n "$remaining" ] && [ -n "$limit" ]; then
        # 未認証APIでも残り回数が分かる場合
        status_text="API: ${remaining}/${limit} TTL:${reset_minutes}m"
    else
        # 直接ダウンロード時
        status_text="API: N/A TTL:${reset_minutes}m"
    fi
    
    echo "$status_text"
}

github_api_request() {
    local endpoint="$1"
    local token=$(get_github_token)
    local response=""
    local auth_method="direct"
    local temp_file="${CACHE_DIR}/api_request.tmp"
    local retry_count=0
    local max_retries=2
    
    # 関数内でのwgetコマンド用のローカル変数を定義
    local local_wget_ipv_opt="$WGET_IPV_OPT"
    local local_base_wget="$BASE_WGET"
    local local_base_wget_auth_bearer="$BASE_WGET_AUTH_BEARER"
    local local_base_wget_auth_token="$BASE_WGET_AUTH_TOKEN"
    
    # wgetの機能チェック
    if [ -z "$WGET_SUPPORTS_HEADER" ]; then
        if wget --help 2>&1 | grep -q -- "--header"; then
            export WGET_SUPPORTS_HEADER=1
        else
            export WGET_SUPPORTS_HEADER=0
        fi
    fi
    
    # GitHub API呼び出しを試行（リトライロジック付き）
    while [ $retry_count -le $max_retries ]; do
        if [ $retry_count -gt 0 ]; then
            debug_log "DEBUG" "Retry attempt $retry_count for API request: $endpoint"
            sleep 2  # リトライ間隔
        fi
        
        if [ -n "$token" ]; then
            debug_log "DEBUG" "Using token authentication for API request"
            
            # 認証方法1: Bearerヘッダー認証
            if [ "$WGET_SUPPORTS_HEADER" = "1" ]; then
                debug_log "DEBUG" "Trying Bearer authentication"
                
                # ローカル変数のBearer認証設定を使用
                eval $local_base_wget_auth_bearer "$temp_file" "$token" "https://api.github.com/$endpoint" 2>/dev/null
                
                if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
                    response=$(cat "$temp_file")
                    if ! echo "$response" | grep -q '"message":"Bad credentials"'; then
                        auth_method="bearer"
                        debug_log "DEBUG" "Bearer authentication successful"
                        break  # 成功したらループを抜ける
                    else
                        debug_log "DEBUG" "Bearer authentication failed, trying token auth"
                        
                        # ローカル変数のToken認証設定を使用
                        eval $local_base_wget_auth_token "$temp_file" "$token" "https://api.github.com/$endpoint" 2>/dev/null
                        
                        if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
                            response=$(cat "$temp_file")
                            if ! echo "$response" | grep -q '"message":"Bad credentials"'; then
                                auth_method="token"
                                debug_log "DEBUG" "Token authentication successful"
                                break  # 成功したらループを抜ける
                            else
                                debug_log "DEBUG" "Token authentication failed"
                            fi
                        fi
                    fi
                else
                    debug_log "DEBUG" "Empty response from Bearer authentication"
                fi
            fi
            
            # 認証方法2: wgetのユーザー認証（ヘッダーがサポートされていない場合）
            if [ "$auth_method" = "direct" ] && [ "$WGET_SUPPORTS_HEADER" = "0" ]; then
                debug_log "DEBUG" "Trying user authentication"
                $local_base_wget -O "$temp_file" --user="$token" --password="x-oauth-basic" \
                         "https://api.github.com/$endpoint" 2>/dev/null
                         
                if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
                    response=$(cat "$temp_file")
                    if ! echo "$response" | grep -q '"message":"Bad credentials"'; then
                        auth_method="user"
                        debug_log "DEBUG" "User authentication successful"
                        break  # 成功したらループを抜ける
                    else
                        debug_log "DEBUG" "User authentication failed"
                    fi
                fi
            fi
        fi
        
        # 認証方法3: フォールバック（直接アクセス）
        if [ "$auth_method" = "direct" ]; then
            debug_log "DEBUG" "Falling back to direct access"
            $local_base_wget -O "$temp_file" "https://api.github.com/$endpoint" 2>/dev/null
            
            if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
                response=$(cat "$temp_file")
                if ! echo "$response" | grep -q '"message":"API rate limit exceeded'; then
                    debug_log "DEBUG" "Direct access successful"
                    break  # 成功したらループを抜ける
                fi
            fi
        fi
        
        # リトライ時の接続方法を変更（ローカル変数のみ更新）
        if [ $retry_count -eq 0 ] && [ -f "${CACHE_DIR}/network.ch" ]; then
            local current_network=$(cat "${CACHE_DIR}/network.ch")
            
            if [ "$current_network" = "v4v6" ]; then
                # デュアルスタックの場合、IPv4がデフォルト。失敗したらIPv6を試す
                local_wget_ipv_opt="-6"
                # ローカル変数を更新（関数内でのみ有効）
                local_base_wget="wget --no-check-certificate -q ${local_wget_ipv_opt} -O"
                local_base_wget_auth_bearer="wget --no-check-certificate -q ${local_wget_ipv_opt} -O \"\$1\" --header=\"Authorization: Bearer \$2\" \"\$3\""
                local_base_wget_auth_token="wget --no-check-certificate -q ${local_wget_ipv_opt} -O \"\$1\" --header=\"Authorization: token \$2\" \"\$3\""
                debug_log "DEBUG" "Switching to IPv6 for retry"
            elif [ "$current_network" = "v4" ] || [ "$current_network" = "v6" ]; then
                # シングルスタックの場合はタイムアウト値を増やす
                export WGET_TIMEOUT="--timeout=30"
                debug_log "DEBUG" "Increasing timeout for retry"
            fi
        fi
        
        retry_count=$((retry_count + 1))
    done
    
    # リトライ後の最終結果確認
    if [ -z "$response" ]; then
        debug_log "WARN" "Empty response from API request after $max_retries retries"
        rm -f "$temp_file" 2>/dev/null
        return 1
    fi
    
    if echo "$response" | grep -q '"message":"API rate limit exceeded'; then
        debug_log "WARN" "GitHub API rate limit exceeded"
        rm -f "$temp_file" 2>/dev/null
        return 1
    fi
    
    # 認証エラーチェック
    if echo "$response" | grep -q '"message":"Bad credentials"'; then
        debug_log "ERROR" "GitHub API authentication failed: Bad credentials"
        rm -f "$temp_file" 2>/dev/null
        return 2
    fi
    
    # その他エラーチェック
    if echo "$response" | grep -q '"message":"'; then
        local error_msg=$(echo "$response" | grep -o '"message":"[^"]*"' | cut -d':' -f2- | tr -d '"')
        debug_log "ERROR" "GitHub API error: $error_msg"
        rm -f "$temp_file" 2>/dev/null
        return 3
    fi

    # 成功
    echo "$response"
    rm -f "$temp_file" 2>/dev/null
    
    # wget設定を元に戻す関数を呼び出し
    setup_wget_options
    return 0
}

save_github_token() {
    token="$1"
    
    if [ -z "$token" ]; then
        debug_log "ERROR" "Empty token provided, cannot save"
        return 1
    fi
    
    # トークンを保存して権限を設定
    echo "$token" > "$GITHUB_TOKEN_FILE"
    chmod 600 "$GITHUB_TOKEN_FILE"
    
    if [ $? -eq 0 ]; then
        debug_log "DEBUG" "GitHub token saved to $GITHUB_TOKEN_FILE"
        return 0
    else
        debug_log "ERROR" "Failed to save token to $GITHUB_TOKEN_FILE"
        return 1
    fi
}

get_github_token() {
    local token=""
    
    if [ -f "$GITHUB_TOKEN_FILE" ] && [ -r "$GITHUB_TOKEN_FILE" ]; then
        # 改行や余分なスペースを削除したトークンを返す
        token=$(cat "$GITHUB_TOKEN_FILE" | tr -d '\n\r\t ' | head -1)
        if [ -n "$token" ]; then
            echo "$token"
            return 0
        fi
    fi
    
    # 環境変数からの取得（不要な文字も削除）
    if [ -n "$GITHUB_TOKEN" ]; then
        echo "$GITHUB_TOKEN" | tr -d '\n\r\t '
        return 0
    fi
    
    return 1
}

save_version_to_cache() {
    local file_name="$1"
    local version="$2"
    local script_file="$3"
    
    # tmpファイルを使用して置き換える（古いsedでも動作）
    if [ -f "$script_file" ]; then
        grep -v "^${file_name}=" "$script_file" > "${script_file}.tmp"
        echo "${file_name}=${version}" >> "${script_file}.tmp"
        mv "${script_file}.tmp" "$script_file"
    else
        echo "${file_name}=${version}" > "$script_file"
    fi
}

# トークンセットアップ関数の改善版
setup_github_token() {
    echo "GitHub API Token Setup"
    echo "======================"
    
    # wget機能チェック
    local wget_capability=$(detect_wget_capabilities)
    debug_log "DEBUG" "Detected wget capability: $wget_capability"
    
    # トークン認証が利用できない場合は警告して終了
    if [ "$wget_capability" = "limited" ]; then
        echo "ERROR: GitHub API token authentication is not supported on this system."
        echo "Your version of wget does not support the required authentication methods."
        echo "API requests will be limited to 60 calls per hour."
        echo ""
        echo "This system uses a wget version without authentication support." 
        debug_log "DEBUG" "Token authentication not supported due to limited wget capabilities"
        return 1
    fi
    
    echo "This will save a GitHub Personal Access Token to $GITHUB_TOKEN_FILE"
    echo "The token will be used for API requests to avoid rate limits."
    echo ""
    
    printf "Enter your GitHub Personal Access Token: "
    read -r token
    echo ""
    
    if [ -n "$token" ]; then
        if save_github_token "$token"; then
            echo "Token has been saved successfully!"
            echo "API requests will now use authentication (up to 5000 calls per hour)."
            echo ""
            
            # 使用可能な認証方法の表示
            case "$wget_capability" in
                header)
                    echo "Your system supports header authentication (optimal)."
                    ;;
                basic)
                    echo "Your system supports basic authentication."
                    ;;
            esac
        else
            echo "Failed to save token. Please check permissions."
        fi
    else
        echo "No token entered. Operation cancelled."
    fi
}

# 🔴　トークン系　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　ダウンロード系　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

check_network_connectivity() {
    local ip_check_file="${CACHE_DIR}/network.ch"
    local ret4=1
    local ret6=1

    debug_log "DEBUG: Checking IPv4 connectivity"
    ping -c 1 -w 3 8.8.8.8 >/dev/null 2>&1
    ret4=$?

    debug_log "DEBUG: Checking IPv6 connectivity"
    ping6 -c 1 -w 3 2001:4860:4860::8888 >/dev/null 2>&1
    ret6=$?

    if [ "$ret4" -eq 0 ] && [ "$ret6" -eq 0 ]; then
        echo "v4v6" > "${ip_check_file}"
    elif [ "$ret4" -eq 0 ]; then
        echo "v4" > "${ip_check_file}"
    elif [ "$ret6" -eq 0 ]; then
        echo "v6" > "${ip_check_file}"
    else
        echo "" > "${ip_check_file}"
    fi
}

setup_wget_options() {
    # ネットワーク状態をキャッシュファイルから取得
    local network_type=""
    if [ -f "${CACHE_DIR}/network.ch" ]; then
        network_type=$(cat "${CACHE_DIR}/network.ch")
    fi
    
    # デフォルトのIPバージョンオプション（空=システム設定に従う）
    WGET_IPV_OPT=""
    
    # ネットワーク状態に応じてIPバージョンオプションを設定 
    case "$network_type" in
        v4)
            WGET_IPV_OPT="-4"
            debug_log "DEBUG" "Setting wget to use IPv4 only"
            ;;
        v6)
            WGET_IPV_OPT="-6"
            debug_log "DEBUG" "Setting wget to use IPv6 only"
            ;;
        v4v6|*)
            # デュアルスタック環境またはデフォルト
            WGET_IPV_OPT=""
            debug_log "DEBUG" "Using system default IP settings for wget"
            ;;
    esac
    
    debug_log "DEBUG" "wget IP version updated to: ${WGET_IPV_OPT}"
}

version_is_newer() {
    local current="$1"  # リモートバージョン
    local reference="$2"  # ローカルバージョン
    
    debug_log "DEBUG" "Comparing: Remote=$current, Local=$reference"
    
    # どちらかが不明の場合は更新必要
    if echo "$current $reference" | grep -q "No version\|unknown"; then
        debug_log "DEBUG" "Unknown version detected, update required"
        return 0
    fi
    
    # 完全一致の場合は更新不要
    if [ "$current" = "$reference" ]; then
        debug_log "DEBUG" "Exact match: No update needed"
        return 1
    fi
    
    # 日付部分を抽出（YYYY.MM.DD形式）
    local current_date=$(echo "$current" | grep -o "[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" | head -1)
    local reference_date=$(echo "$reference" | grep -o "[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" | head -1)
    
    # 日付が抽出できなかった場合は更新が必要
    if [ -z "$current_date" ] || [ -z "$reference_date" ]; then
        debug_log "DEBUG" "Date extraction failed: Update for safety"
        return 0
    fi
    
    # 日付を数値に変換（区切り文字を削除）
    local current_num=$(echo "$current_date" | tr -d '.')
    local reference_num=$(echo "$reference_date" | tr -d '.')
    
    # 数値比較（日付形式）
    if [ "$current_num" -gt "$reference_num" ]; then
        debug_log "DEBUG" "Remote date is newer: Update required"
        return 0  # リモート（current）が新しい
    elif [ "$current_num" -lt "$reference_num" ]; then
        debug_log "DEBUG" "Local date is newer: No update needed"
        return 1  # ローカル（reference）が新しい
    fi
    
    # 日付が同じ場合はSHA部分を比較
    local current_sha=$(echo "$current" | grep -o "\-[a-z0-9]*" | sed 's/^-//' | head -1)
    local reference_sha=$(echo "$reference" | grep -o "\-[a-z0-9]*" | sed 's/^-//' | head -1)
    
    # SHA情報をデバッグ出力
    debug_log "DEBUG" "SHA comparison: Remote=$current_sha, Local=$reference_sha"
    
    # 直接DL時の特別処理: ハッシュの先頭7文字だけ比較して異なる場合のみ更新
    if [ -n "$current_sha" ] && [ -n "$reference_sha" ]; then
        # どちらかにdirectというマークがあれば直接DLモードと判断
        if echo "$current $reference" | grep -q "direct"; then
            # 先頭7文字だけ比較（SHA-1とSHA-256を混在比較する場合の対策）
            local current_short=$(echo "$current_sha" | head -c 7)
            local reference_short=$(echo "$reference_sha" | head -c 7)
            
            if [ "$current_short" != "$reference_short" ]; then
                debug_log "DEBUG" "Different file hash in direct mode: Update required"
                return 0  # 異なるハッシュ
            else
                debug_log "DEBUG" "Same file hash in direct mode: No update needed"
                return 1  # 同一ハッシュ
            fi
        elif [ "$current_sha" != "$reference_sha" ]; then
            debug_log "DEBUG" "Different SHA: Update required"
            return 0  # 異なるコミット
        fi
    fi
    
    debug_log "DEBUG" "Same version or unable to compare: No update needed"
    return 1  # 同一バージョン
}

# OpenWrt環境のwget機能検出関数（改良版）
detect_wget_capabilities() {
    debug_log "DEBUG" "Detecting wget capabilities for current environment"
    
    local temp_file="${CACHE_DIR}/wget_help.tmp"
    local test_file="${CACHE_DIR}/wget_test_header.tmp"
    local header_support="no"
    local user_support="no"
    
    # wgetのヘルプを一時ファイルに保存（--helpがサポートされていない場合のため空ファイル作成）
    touch "$temp_file"
    wget --help > "$temp_file" 2>&1 || true
    
    # デバッグ用にwgetヘルプ内容の先頭行を記録
    debug_log "DEBUG" "wget help output beginning:"
    head -3 "$temp_file" | while read line; do
        debug_log "DEBUG" "  $line"
    done
    
    # OpenWrt/BusyBox wgetの検出（特徴的な出力パターン）
    if grep -q "BusyBox" "$temp_file" || ! grep -q "\-\-header" "$temp_file"; then
        debug_log "DEBUG" "Detected BusyBox wget without header support"
        rm -f "$temp_file"
        echo "limited"
        return 1
    fi
    
    # ヘッダーオプションのサポートを確認 - より厳密なパターン
    if grep -q -- "--header=" "$temp_file" || grep -q -- "--header " "$temp_file"; then
        debug_log "DEBUG" "wget supports header authentication"
        header_support="yes"
    fi
    
    # 基本認証のサポートを確認 - より厳密なパターン
    if grep -q -- "--user=" "$temp_file" || grep -q -- "--user " "$temp_file"; then
        debug_log "DEBUG" "wget supports basic authentication"
        user_support="yes"
    fi
    
    # 実際に機能テストを行う（ヘルプテキスト検出のバックアップ）
    if [ "$header_support" = "yes" ]; then
        debug_log "DEBUG" "Testing header support with actual command"
        rm -f "$temp_file"
        echo "header"
        return 0
    elif [ "$user_support" = "yes" ]; then
        debug_log "DEBUG" "Basic authentication is supported"
        rm -f "$temp_file"
        echo "basic" 
        return 0
    else
        debug_log "DEBUG" "No authentication methods supported"
        rm -f "$temp_file"
        echo "limited"
        return 1
    fi
}

# APIレート制限情報のチェックと取得（キャッシュ機能付き）
check_api_rate_limit() {
    local token="$(get_github_token)"
    local temp_file="${CACHE_DIR}/api_limit.tmp"
    local auth_method="direct"
    local current_time=$(date +%s)
    
    # IPバージョン設定の初期化確認
    if [ -z "$WGET_IPV_OPT" ]; then
        setup_wget_options
        debug_log "DEBUG" "Initialized wget IP options before checking API rate limit"
    fi
    
    # 先にキャッシュファイルをロード（初回実行時）
    if [ -z "$API_LAST_CHECK" ] && [ -f "${CACHE_DIR}/api_rate.ch" ]; then
        debug_log "DEBUG" "Loading API rate information from cache file"
        . "${CACHE_DIR}/api_rate.ch"
    fi
    
    # キャッシュ有効期間内の場合は保存値を返す
    if [ -n "$API_REMAINING" ] && [ $(( current_time - API_LAST_CHECK )) -lt ${API_CACHE_TTL:-60} ]; then
        debug_log "DEBUG" "Using cached API rate limit info: $API_REMAINING/$API_LIMIT, age: $(( current_time - API_LAST_CHECK ))s"
        echo "API: ${API_REMAINING}/${API_LIMIT} TTL:${API_RESET_TIME}m"
        return 0
    fi
    
    # 既存のファイルを削除
    [ -f "$temp_file" ] && rm -f "$temp_file"
    
    # wget機能と認証方法の検出（一度だけ実行）
    if [ -z "$WGET_CAPABILITY" ] && [ -n "$token" ]; then
        WGET_CAPABILITY=$(detect_wget_capabilities)
        debug_log "DEBUG" "Detected wget capability: $WGET_CAPABILITY"
        
        # トークンが設定されていても認証機能が使えない場合、警告表示
        if [ "$WGET_CAPABILITY" = "limited" ] && [ -f "$GITHUB_TOKEN_FILE" ]; then
            debug_log "WARN" "GitHub token is set but authentication is not supported with current wget version"
        fi
    fi
    
    # 認証方法の選択
    if [ -n "$token" ] && [ "$WGET_CAPABILITY" != "limited" ]; then
        if [ "$WGET_CAPABILITY" = "header" ]; then
            # ヘッダー認証（最適）
            $BASE_WGET -O "$temp_file" --header="Authorization: token $token" \
                 "https://api.github.com/rate_limit" 2>/dev/null
            
            if [ -f "$temp_file" ] && [ -s "$temp_file" ] && ! grep -q "Bad credentials\|Unauthorized" "$temp_file"; then
                auth_method="token"
                debug_log "DEBUG" "Successfully authenticated with token header"
            fi
        elif [ "$WGET_CAPABILITY" = "basic" ]; then
            # 基本認証
            $BASE_WGET -O "$temp_file" --user="$token" --password="x-oauth-basic" \
                 "https://api.github.com/rate_limit" 2>/dev/null
                 
            if [ -f "$temp_file" ] && [ -s "$temp_file" ] && ! grep -q "Bad credentials\|Unauthorized" "$temp_file"; then
                auth_method="basic"
                debug_log "DEBUG" "Successfully authenticated with basic auth"
            fi
        fi
    fi
    
    # 非認証リクエスト（認証に失敗した場合または認証なしの場合）
    if [ "$auth_method" = "direct" ]; then
        debug_log "DEBUG" "Making direct API request"
        $BASE_WGET -O "$temp_file" "https://api.github.com/rate_limit" 2>/dev/null
    fi
    
    # レスポンス解析
    if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
        # レート情報の抽出
        local core_limit=$(grep -o '"limit"[ ]*:[ ]*[0-9]\+' "$temp_file" | head -1 | grep -o '[0-9]\+')
        local core_remaining=$(grep -o '"remaining"[ ]*:[ ]*[0-9]\+' "$temp_file" | head -1 | grep -o '[0-9]\+')
        local core_reset=$(grep -o '"reset"[ ]*:[ ]*[0-9]\+' "$temp_file" | head -1 | grep -o '[0-9]\+')
        
        # コアセクション優先
        if [ -z "$core_limit" ] || [ -z "$core_remaining" ] || [ -z "$core_reset" ]; then
            local core_section=$(sed -n '/"core":/,/},/p' "$temp_file")
            [ -z "$core_limit" ] && core_limit=$(echo "$core_section" | grep -o '"limit"[ ]*:[ ]*[0-9]\+' | head -1 | grep -o '[0-9]\+')
            [ -z "$core_remaining" ] && core_remaining=$(echo "$core_section" | grep -o '"remaining"[ ]*:[ ]*[0-9]\+' | head -1 | grep -o '[0-9]\+')
            [ -z "$core_reset" ] && core_reset=$(echo "$core_section" | grep -o '"reset"[ ]*:[ ]*[0-9]\+' | head -1 | grep -o '[0-9]\+')
        fi
        
        # リセット時間の計算
        local reset_minutes=60
        if [ -n "$core_reset" ] && [ "$core_reset" -gt 1000000000 ]; then
            local now_time=$(date +%s)
            if [ "$core_reset" -gt "$now_time" ]; then
                local reset_seconds=$(( core_reset - now_time ))
                reset_minutes=$(( reset_seconds / 60 ))
                [ "$reset_minutes" -lt 1 ] && reset_minutes=1
            else
                reset_minutes=0
            fi
        else
            # デフォルト値の設定
            if [ "$auth_method" != "direct" ]; then
                reset_minutes=60
            else
                reset_minutes=5
            fi
        fi
        
        # グローバル変数に保存（キャッシュ）
        API_REMAINING=$core_remaining
        API_LIMIT=$core_limit
        API_RESET_TIME=$reset_minutes
        API_AUTH_METHOD=$auth_method
        API_LAST_CHECK=$current_time
        
        # 値のチェックと整形
        [ -z "$API_LIMIT" ] && API_LIMIT="?"
        [ -z "$API_REMAINING" ] && API_REMAINING="?"
    else
        # 情報取得失敗時のデフォルト値
        if [ "$auth_method" != "direct" ]; then
            API_LIMIT="5000"
            API_REMAINING="?"
            API_RESET_TIME="60"
        else
            API_LIMIT="60"
            API_REMAINING="?"
            API_RESET_TIME="5"
        fi
        API_AUTH_METHOD=$auth_method
        API_LAST_CHECK=$current_time
    fi
    
    # キャッシュ保存
    save_api_rate_cache
    
    # 結果文字列の生成
    local status_text="API: ${API_REMAINING}/${API_LIMIT} TTL:${API_RESET_TIME}m"
    debug_log "DEBUG" "Final API status: $status_text (auth_method=$auth_method)"
    
    # 一時ファイル削除
    [ -f "$temp_file" ] && rm -f "$temp_file"
    
    # 結果を返す
    echo "$status_text"
}

# キャッシュにAPIレート制限情報を保存
save_api_rate_cache() {
    local cache_file="${CACHE_DIR}/api_rate.ch"
    
    # キャッシュディレクトリがなければ作成
    [ ! -d "$CACHE_DIR" ] && mkdir -p "$CACHE_DIR"
    
    # 保存内容の作成
    {
        echo "API_REMAINING=\"$API_REMAINING\""
        echo "API_LIMIT=\"$API_LIMIT\""
        echo "API_RESET_TIME=\"$API_RESET_TIME\""
        echo "API_AUTH_METHOD=\"$API_AUTH_METHOD\""
        echo "API_LAST_CHECK=\"$API_LAST_CHECK\""
    } > "$cache_file"
    
    debug_log "DEBUG" "API rate info cached to $cache_file"
}

clean_version_string() {
    local version_str="$1"
    
    # 1. 改行と復帰を削除
    local cleaned=$(printf "%s" "$version_str" | tr -d '\n\r')
    
    # 2. 角括弧を削除
    cleaned=$(printf "%s" "$cleaned" | sed 's/\[//g; s/\]//g')
    
    # 3. ANSIエスケープコードを削除
    cleaned=$(printf "%s" "$cleaned" | sed 's/\x1b\[[0-9;]*[mK]//g')
    
    # 4. バージョン番号の抽出（シンプルな方法）
    if echo "$cleaned" | grep -q '20[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]'; then
        # 年.月.日 形式のバージョンを抽出
        local date_part=$(printf "%s" "$cleaned" | grep -o '20[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]')
        
        # バージョン文字列の残りの部分があれば追加
        if echo "$cleaned" | grep -q "${date_part}-"; then
            local remainder=$(printf "%s" "$cleaned" | sed "s/.*${date_part}-//; s/[^0-9a-zA-Z-].*//")
            printf "%s-%s" "$date_part" "$remainder"
        else
            printf "%s" "$date_part"
        fi
    else
        # バージョンが見つからない場合は元の文字列をクリーニングしたものを返す
        printf "%s" "$cleaned"
    fi
}

# コミット情報取得関数の改良版
get_commit_version() {
    local file_path="$1"
    local force_refresh="$2"  # キャッシュ強制更新フラグ
    local temp_file="${CACHE_DIR}/commit_info.tmp" 
    local direct_file="${CACHE_DIR}/direct_file.tmp"

    # キャッシュ使用時、まずキャッシュから情報を取得
    if [ "$SKIP_CACHE" != "true" ] && [ "$force_refresh" != "true" ] && [ "$FORCE" != "true" ]; then
        get_commit_from_cache "$file_path"
        if [ $? -eq 0 ]; then
            return 0  # キャッシュからの情報取得に成功した場合終了
        fi
    fi

    # リポジトリ情報
    local repo_owner="site-u2023"
    local repo_name="aios"
    local api_url="repos/${repo_owner}/${repo_name}/commits?path=${file_path}&per_page=1"
    local auth_method="direct"
    local retry_count=0
    local max_retries=2
    
    # トークン取得とAPIリクエスト
    local token="$(get_github_token)"
    
    # API呼び出しを試行（リトライロジック付き）
    while [ $retry_count -le $max_retries ]; do
        if [ $retry_count -gt 0 ]; then
            debug_log "DEBUG" "Retry attempt $retry_count for commit version request: $file_path"
            sleep 2  # リトライ間隔
        fi
        
        # 認証方法に応じたAPI呼び出し
        if [ -n "$token" ] && [ "$API_AUTH_METHOD" != "direct" ]; then
            if [ "$API_AUTH_METHOD" = "token" ] || [ "$WGET_CAPABILITY" = "header" ]; then
                # トークン認証でGitHub APIにアクセス
                wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$temp_file" --header="Authorization: token $token" \
                     "https://api.github.com/$api_url" 2>/dev/null
                auth_method="token"
            elif [ "$API_AUTH_METHOD" = "basic" ] || [ "$WGET_CAPABILITY" = "basic" ]; then
                # 基本認証でGitHub APIにアクセス
                wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$temp_file" --user="$token" --password="x-oauth-basic" \
                     "https://api.github.com/$api_url" 2>/dev/null
                auth_method="basic"
            else
                # 認証なしでアクセス
                wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$temp_file" "https://api.github.com/$api_url" 2>/dev/null
                auth_method="direct"
            fi
        else
            # 認証なしでアクセス
            wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$temp_file" "https://api.github.com/$api_url" 2>/dev/null
            auth_method="direct"
        fi
        
        # 応答チェック
        if [ -s "$temp_file" ] && ! grep -q "API rate limit exceeded\|Not Found" "$temp_file"; then
            debug_log "DEBUG" "Successfully retrieved commit information"
            break  # 成功したらループを抜ける
        fi
        
        # リトライ時の接続方法を変更
        if [ $retry_count -eq 0 ] && [ -f "${CACHE_DIR}/network.ch" ]; then
            local current_network=$(cat "${CACHE_DIR}/network.ch")
            
            if [ "$current_network" = "v4v6" ]; then
                # IPv6を試す
                WGET_IPV_OPT="-6"
                BASE_WGET="wget --no-check-certificate -q ${WGET_IPV_OPT} -O"
                debug_log "DEBUG" "Switching to IPv6 for retry"
            elif [ "$current_network" = "v4" ] || [ "$current_network" = "v6" ]; then
                # シングルスタックの場合は直接ダウンロードを試す
                debug_log "DEBUG" "Switching to direct file download"
                break
            fi
        fi
        
        retry_count=$((retry_count + 1))
    done
    
    # APIでの取得に失敗した場合は直接ファイルダウンロードを試行
    if [ ! -s "$temp_file" ] || grep -q "API rate limit exceeded\|Not Found" "$temp_file"; then
        debug_log "DEBUG" "API call failed, falling back to direct file check"
        
        # 直接ファイルダウンロードもIPv4/IPv6両方を試す
        retry_count=0
        while [ $retry_count -le 1 ]; do
            if wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$direct_file" "https://raw.githubusercontent.com/$repo_owner/$repo_name/main/$file_path" 2>/dev/null; then
                if [ -s "$direct_file" ]; then
                    # ファイルからハッシュを生成
                    local file_hash=$(sha256sum "$direct_file" 2>/dev/null | cut -c1-7)
                    rm -f "$direct_file" "$temp_file" 2>/dev/null
                    local today=$(date +%Y.%m.%d)
                    
                    # バージョン情報を取得
                    local version="$today-$file_hash"
                    auth_method="direct"
                    
                    # wget設定を元に戻す
                    setup_wget_options
                    
                    # キャッシュに保存
                    save_commit_to_cache "$file_path" "$version" "$auth_method"
                    
                    echo "$version $auth_method"
                    return 0
                fi
            fi
            
            # 直接ダウンロードのリトライも接続方法を変更
            if [ $retry_count -eq 0 ] && [ -f "${CACHE_DIR}/network.ch" ]; then
                local current_network=$(cat "${CACHE_DIR}/network.ch")
                if [ "$current_network" = "v4v6" ]; then
                    WGET_IPV_OPT="-6"
                    BASE_WGET="wget --no-check-certificate -q ${WGET_IPV_OPT} -O"
                    debug_log "DEBUG" "Switching to IPv6 for direct file download retry"
                fi
            fi
            
            retry_count=$((retry_count + 1))
        done
        
        debug_log "ERROR" "Failed to download file: $file_path"
        rm -f "$direct_file" "$temp_file" 2>/dev/null
        
        # wget設定を元に戻す
        setup_wget_options
        echo "$(date +%Y.%m.%d)-unknown $auth_method"
        return 1
    fi
    
    # APIレスポンスからコミット情報を抽出
    local commit_date=""
    local commit_sha=""
    
    # SHA情報の抽出（複数パターン対応）
    commit_sha=$(grep -o '"sha"[[:space:]]*:[[:space:]]*"[a-f0-9]\+' "$temp_file" | head -1 | grep -o '[a-f0-9]\{7,40\}' | head -c 7)
    if [ -z "$commit_sha" ]; then
        commit_sha=$(grep -o '[a-f0-9]\{40\}' "$temp_file" | head -1 | head -c 7)
    fi
    
    # 日付情報の抽出（複数パターン対応）
    commit_date=$(grep -o '"date"[[:space:]]*:[[:space:]]*"[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' "$temp_file" | head -1 | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}')
    if [ -z "$commit_date" ]; then
        commit_date=$(grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}T[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}Z' "$temp_file" | head -1 | grep -o '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}')
    fi
    
    # 情報が取得できない場合はフォールバック
    if [ -z "$commit_date" ] || [ -z "$commit_sha" ]; then
        debug_log "WARN" "Failed to extract commit information. Using fallback method."
        commit_sha=$(tr -cd 'a-f0-9' < "$temp_file" | grep -o '[a-f0-9]\{40\}' | head -1 | head -c 7)
        commit_date=$(grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' "$temp_file" | head -1)
        
        [ -z "$commit_sha" ] && commit_sha="unknown"
        [ -z "$commit_date" ] && commit_date=$(date +%Y-%m-%d)
    fi
    
    # 結果の組み立て
    if [ -n "$commit_date" ] && [ -n "$commit_sha" ]; then
        # 日付フォーマットを変換
        local formatted_date=$(echo "$commit_date" | tr '-' '.')
        local version="${formatted_date}-${commit_sha}"
        
        rm -f "$temp_file" 2>/dev/null
        
        # wget設定を元に戻す
        setup_wget_options
        
        # キャッシュに保存
        save_commit_to_cache "$file_path" "$version" "$auth_method"
        
        echo "$version $auth_method"
        return 0
    fi
    
    # 全ての方法が失敗した場合
    rm -f "$temp_file" 2>/dev/null
    
    # wget設定を元に戻す
    setup_wget_options
    echo "$(date +%Y.%m.%d)-fallback $auth_method" 
    return 1
}

download() {
    # ファイル名を最初の引数として処理
    local file_name="$1"
    shift

    debug_log "DEBUG" "Download function called for file='${file_name}'"
    
    # 空ファイル名のチェック
    if [ -z "$file_name" ]; then
        debug_log "ERROR" "Empty filename detected in download function call"
        return 1
    fi

    # 設定変数の初期化
    local hidden_mode="false"
    local quiet_mode="${QUIET_MODE:-false}"
    local chmod_mode="false"
    local load_mode="false"
    local interpreter_name=""  # デフォルト値を空に
    
    # オプション引数の処理（改善版）
    while [ $# -gt 0 ]; do
        local option="$1"
        local value="true"
        
        # キー=値形式の場合は分解処理
        if echo "$option" | grep -q "="; then
            value=$(echo "$option" | cut -d'=' -f2)
            option=$(echo "$option" | cut -d'=' -f1)
        fi
        
        # オプション判定（値がtrueの場合のみ処理）
        if [ "$value" = "true" ]; then
            case "$option" in
                # インタプリタオプション
                bash)   interpreter_name="bash" ;;
                python3) interpreter_name="python" ;;
                node)   interpreter_name="node" ;;
                perl)   interpreter_name="perl" ;;
                # モードオプション
                hidden) hidden_mode="true" ;;
                quiet)  quiet_mode="true" ;;
                debug)  DEBUG_MODE="true" ;;
                chmod)  chmod_mode="true" ;;
                load)   load_mode="true" ;;
                # 不明オプション
                *)      debug_log "WARN" "Unknown option: $1, ignoring" ;;
            esac
        fi
        shift
    done

    # インタプリタが設定されていなければデフォルト値を設定
    [ -z "$interpreter_name" ] && interpreter_name="ash"

    debug_log "DEBUG" "Processing with options: hidden=${hidden_mode}, quiet=${quiet_mode}, chmod=${chmod_mode}, load=${load_mode}, interpreter=${interpreter_name}"

    # バージョン情報取得
    local version_data
    version_data=$(download_check_version "$file_name")
    
    local update_required=$(echo "$version_data" | cut -d'|' -f1)
    local clean_remote_version=$(echo "$version_data" | cut -d'|' -f2)
    local clean_local_version=$(echo "$version_data" | cut -d'|' -f3)
    local api_status=$(echo "$version_data" | cut -d'|' -f4)
    
    # ファイルの存在確認を追加
    local file_exists="true"
    if [ ! -f "${BASE_DIR}/$file_name" ]; then
        debug_log "DEBUG" "File ${BASE_DIR}/$file_name does not exist, forcing download"
        file_exists="false"
        update_required="true"
    elif [ ! -s "${BASE_DIR}/$file_name" ]; then
        debug_log "DEBUG" "File ${BASE_DIR}/$file_name exists but is empty, forcing download"
        file_exists="false"
        update_required="true"
    fi
    
    # デバッグモード時は常にダウンロード
    if [ "$DEBUG_MODE" = "true" ]; then
        debug_log "DEBUG" "Debug mode enabled, forcing download for ${file_name}"
        update_required="true"
    fi
    
    # ファイルダウンロード処理
    local status_type="no_update"
    local status_message="$(get_message "CONFIG_DOWNLOAD_UNNECESSARY")"
    
    if [ "$update_required" = "true" ] || [ "$file_exists" = "false" ]; then
        debug_log "DEBUG" "Executing download_fetch_file for ${file_name}"
        if ! download_fetch_file "$file_name" "$clean_remote_version" "$chmod_mode"; then
            debug_log "ERROR" "Download process failed for $file_name"
            return 1
        fi
        status_type="success"
        status_message="$(get_message "CONFIG_DOWNLOAD_SUCCESS")"
        
        # aiosファイルは常に実行権限を設定する（追加）
        if [ "$file_name" = "aios" ]; then
            debug_log "DEBUG" "Special handling: Setting execute permission for aios file"
            chmod +x "${BASE_DIR}/${file_name}"
        fi
    else
        debug_log "DEBUG" "Skipping download for ${file_name} (not needed)"
    fi
    
    # ファイルの存在を再確認
    if [ ! -f "${BASE_DIR}/$file_name" ]; then
        debug_log "ERROR" "File not found after download attempt: $file_name"
        return 1
    fi

    debug_log "DEBUG" "Calling download_finalize with file=${file_name}, status=${status_type}, interpreter=${interpreter_name}"

    # 結果表示とファイル読み込み
    download_finalize "$file_name" "$status_message" "$clean_remote_version" "$api_status" "$load_mode" "$hidden_mode" "$status_type" "$interpreter_name"
    
    return 0
}

download_check_version() {
    local file_name="$1"
    local script_file="${CACHE_DIR}/script.ch"
    local dummy_version="No version control"

    # バージョン情報の取得
    local remote_version_info=$(get_commit_version "$file_name")
    local remote_version=$(printf "%s" "$remote_version_info" | cut -d' ' -f1)
    local auth_method=$(printf "%s" "$remote_version_info" | cut -d' ' -f2)
    local local_version=""
    
    # ローカルバージョンの取得
    if [ -f "$script_file" ]; then
        local_version=$(grep "^${file_name}=" "$script_file" | cut -d'=' -f2)
    fi
    [ -z "$local_version" ] && local_version="$dummy_version"

    local clean_remote_version=$(clean_version_string "$remote_version")
    local clean_local_version=$(clean_version_string "$local_version")

    # APIレート制限情報の取得（元の表示に戻す）
    local api_status=$(check_api_rate_limit)
    
    # バージョン比較とダウンロード判断
    local update_required=false
    
    if [ "$local_version" = "$dummy_version" ]; then
        debug_log "DEBUG" "First download: $file_name"
        update_required=true
    elif [ "$clean_remote_version" = "$clean_local_version" ]; then
        debug_log "DEBUG" "Exact match: No update needed for $file_name"
        update_required=false
    else
        debug_log "DEBUG" "Starting version comparison: $file_name"
        version_is_newer "$clean_remote_version" "$clean_local_version"
        if [ $? -eq 0 ]; then
            debug_log "DEBUG" "New version detected: Update required for $file_name"
            update_required=true
        else
            debug_log "DEBUG" "Existing version: No update needed for $file_name"
            update_required=false
        fi
    fi
    
    debug_log "DEBUG" "Remote version: $file_name - $clean_remote_version"
    debug_log "DEBUG" "Local version: $file_name - $clean_local_version"
    debug_log "DEBUG" "API status: $api_status"
    
    # 結果を返す
    echo "${update_required}|${clean_remote_version}|${clean_local_version}|${api_status}"
    return 0
}

download_fetch_file() {
    local file_name="$1"
    local clean_remote_version="$2"
    local chmod_mode="$3"
    local install_path="${BASE_DIR}/$file_name"
    local script_file="${CACHE_DIR}/script.ch"
    
    debug_log "DEBUG" "download_fetch_file called for ${file_name}"
    
    # ダウンロードURLの設定
    local remote_url="${BASE_URL}/$file_name"
    
    # キャッシュバスティングの適用
    if [ "$FORCE" = "true" ] || echo "$clean_remote_version" | grep -q "direct"; then
        remote_url="${remote_url}${CACHE_BUST}"
    fi
    
    debug_log "DEBUG" "Downloading from ${remote_url} to ${install_path}"
    
    # IPバージョン設定が初期化されていない場合は設定する
    if [ -z "$WGET_IPV_OPT" ]; then
        setup_wget_options
    fi
    
    # BusyBox wget向けに最適化した明示的なコマンド構文
    if ! wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$install_path" "$remote_url" 2>/dev/null; then
        debug_log "ERROR" "Download failed: $file_name"
        return 1
    fi
    
    # ファイル検証
    if [ ! -f "$install_path" ]; then
        debug_log "ERROR" "Downloaded file not found: $file_name"
        return 1
    fi
    
    if [ ! -s "$install_path" ]; then
        debug_log "ERROR" "Downloaded file is empty: $file_name"
        return 1
    fi
    
    debug_log "DEBUG" "File successfully downloaded to ${install_path}"
    
    # 権限設定
    if [ "$chmod_mode" = "true" ]; then
        chmod +x "$install_path"
        debug_log "DEBUG" "chmod +x applied to $file_name"
    fi
    
    # バージョン情報をキャッシュに保存
    save_version_to_cache "$file_name" "$clean_remote_version" "$script_file"
    
    return 0
}

download_finalize() {
    local file_name="$1"
    local status_message="$2" 
    local clean_remote_version="$3"
    local api_status="$4"
    local load_mode="$5"
    local hidden_mode="$6"
    local status_type="$7"
    local interpreter="${8:-ash}"  # デフォルト値をashに設定
    
    debug_log "DEBUG" "Finalizing download for ${file_name}, status=${status_type}, interpreter=${interpreter}"
    
    # ファイルが実際に存在するか確認
    if [ ! -f "${BASE_DIR}/${file_name}" ]; then
        debug_log "ERROR" "File not found: ${BASE_DIR}/${file_name}"
        return 1
    fi
    
    # 隠しモードチェック
    if [ "$hidden_mode" = "true" ]; then
        debug_log "DEBUG" "Hidden mode is active, skipping status message"
        # 隠しモードの場合はメッセージを表示しない
    else        
        # ファイル名がDBファイルかどうかをチェック (.db拡張子)
        if echo "$file_name" | grep -q "\.db$"; then
            debug_log "DEBUG" "DB file handling for ${file_name}"
        fi
        
        # ステータスメッセージ表示
        if [ "$status_type" = "success" ]; then
            # 成功時
            if [ "$load_mode" = "true" ]; then
                printf "%s\n" "${status_message} ${file_name} ${clean_remote_version} ${api_status} Loaded"
            else
                printf "%s\n" "${status_message} ${file_name} ${clean_remote_version} ${api_status}"
            fi
        else
            # 更新不要時など
            if [ "$load_mode" = "true" ]; then
                printf "%s\n" "${status_message} ${file_name} ${clean_remote_version} ${api_status} Loaded"
            else
                printf "%s\n" "${status_message} ${file_name} ${clean_remote_version} ${api_status}"
            fi
        fi
    fi
    
    # ファイル読込み処理
    if [ "$load_mode" = "true" ]; then
        debug_log "DEBUG" "Loading file with ${interpreter}: ${BASE_DIR}/${file_name}"
        
        if [ -s "${BASE_DIR}/${file_name}" ]; then
            # インタープリタが存在するか確認
            if [ "$interpreter" != "$INTERPRETER" ]; then
                if ! command -v "$interpreter" > /dev/null 2>&1; then
                    printf "%s\n" "$(color red "Error: Interpreter '${interpreter}' is not installed on this system.")"
                    install_package ${interpreter} yn hidden
                    
                    # インストール後に再度確認
                    if ! command -v "$interpreter" > /dev/null 2>&1; then
                        debug_log "EBUG" "Interpreter still not found after installation attempt: ${interpreter}"
                        return 1
                    else
                        debug_log "DEBUG" "Executing with specified interpreter: ${interpreter}"
                        $interpreter "${BASE_DIR}/${file_name}"
                    fi
                else
                    debug_log "DEBUG" "Executing with specified interpreter: ${interpreter}"
                    $interpreter "${BASE_DIR}/${file_name}"
                fi
            else
                debug_log "DEBUG" "File loaded with source"
                . "${BASE_DIR}/${file_name}"
            fi
        else
            debug_log "ERROR" "Cannot load empty file: ${file_name}"
            return 1
        fi
    fi
    
    return 0
}

# 🔴　ダウンロード系　ここまで　🔴　-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　バナー系　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

# メイン関数 - バナー表示の統合関数
# 引数: 
#   $1 - バナースタイル（省略可）: "unicode", "ascii", "asterisk", "auto"
print_banner() {
    # スタイル指定またはデフォルト「auto」
    BANNER_STYLE="${1:-auto}"
    
    # 自動検出が必要な場合
    if [ "$BANNER_STYLE" = "auto" ]; then
        BANNER_STYLE=$(detect_terminal_capability)
        debug_log "DEBUG" "Auto-detected banner style: $BANNER_STYLE"
    fi

    # スタイルに応じたバナー表示
    case "$BANNER_STYLE" in
        unicode|block)
            print_banner_unicode
            ;;
        ascii|hash|sharp)
            print_banner_ascii
            ;;
        *)
            # 不明なスタイルの場合はASCIIにフォールバック
            debug_log "WARN" "Unknown banner style: $BANNER_STYLE, using ASCII fallback"
            print_banner_ascii
            ;;
    esac
}

print_banner_ascii() {
    debug_log "DEBUG" "Displaying lowercase aios block ASCII art banner"
    
    # ASCIIアート
    printf "\n"
    printf "%s\n" "$(color magenta "               ## #")"
    printf "%s\n" "$(color blue    "     ####      ###       ####      #####")"
    printf "%s\n" "$(color green   "        ##      ##      ##  ##    ##")"
    printf "%s\n" "$(color yellow  "     #####      ##      ##  ##     #####")"
    printf "%s\n" "$(color orange  "    ##  ##      ##      ##  ##         ##")"
    printf "%s\n" "$(color red     "     #####     ####      ####     ######")"
    printf "\n"
    
    # バナーメッセージ
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
    printf "\n"

    debug_log "DEBUG" "Block style lowercase aios banner displayed successfully"
}

print_banner_unicode() {
    debug_log "DEBUG" "Displaying lowercase aios block ASCII art banner"
    
    # ASCIIアート（環境依存文字 - ブロック）
    printf "\n"
    printf "%s\n" "$(color magenta "               ██ █")"
    printf "%s\n" "$(color blue    "     ████      ███       ████      █████")"
    printf "%s\n" "$(color green   "        ██      ██      ██  ██    ██")"
    printf "%s\n" "$(color yellow  "     █████      ██      ██  ██     █████")"
    printf "%s\n" "$(color orange  "    ██  ██      ██      ██  ██         ██")"
    printf "%s\n" "$(color red     "     █████     ████      ████     ██████")"
    printf "\n"

    # バナーメッセージ
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
    printf "\n"

    debug_log "DEBUG" "Block style lowercase aios banner displayed successfully"
}

# 🔴　バナー系　ここまで　🔴　-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　メイン　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

check_option() {
    # デフォルト値の設定
    ORIGINAL_ARGS="$@"
    MODE="${MODE:-update}"
    SELECTED_LANGUAGE=""
    DEBUG_MODE="false"
    DEBUG_LEVEL="INFO"
    DRY_RUN="false"
    LOGFILE=""
    FORCE="false"
    RESET="false"
    HELP="false"
    SKIP_DEVICE_DETECTION="false"
    SKIP_IP_DETECTION="false"
    SKIP_ALL_DETECTION="false"
    SKIP_CACHE="false"

    # 言語およびオプション引数の処理
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--h|-help|--help|-\?|--\?)
                HELP="true"
                print_help
                exit 0
                ;;
            -v|--v|-version|--version)
                script_version
                exit 0
                ;;
            -d|--d|-debug|--debug|-d1|--d1)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG"
                ;;
            -cf|--cf|-common_full|--common_full)
                MODE="full"
                ;;
            -cl|--cl|-ocommon_light|--ocommon_light)
                MODE="light"
                ;;
            -cd|--cd|-common_debug|--common_debug|--common_debug)
                MODE="debug"
                ;;
            -r|--r|-resrt|--resrt)
                MODE="reset"
                RESET="true"
                ;;
            -del|--del|-delete|--delete)
                MODE="delete"
                ;;
            -f|--f|-force|--force)
                FORCE="true"
                ;;
            -dr|--dr|-dry-run|--dry-run)
                DRY_RUN="true"
                ;;
            -l|--l|-logfile|--logfile)
                if [ -n "$2" ] && [ "${2#-}" = "$2" ]; then
                    LOGFILE="$2"
                    shift
                else
                    debug_log "DEBUG" "logfile requires a path argument"
                    exit 1
                fi
                ;;
            -u|--u|-update|--update)
                debug_log "DEBUG" "check_option: aios update"
                MODE="update"
                ;;
            -t|--t|-token|--token)
                setup_github_token
                exit 0
                ;;
            -ta|--ta|-test_api|--test_api)
                MODE="test_api"
                ;;
            -sc|--sc|-skip-cache|--skip-cache)
                SKIP_CACHE_DETECTION="true"
                ;;
            -sd|--sd|-skip-dev|--skip-dev)
                SKIP_DEVICE_DETECTION="true"
                ;;
            -scd|--scd|-skip-cache-device|--skip-cache-device)
                SKIP_CACHE_DEVICE_DETECTION="true"
                ;;
            -si|--si|-skip-ip|--skip-ip)
                SKIP_IP_DETECTION="true"
                ;;
            -sa|--sa|-skip-all|--skip-all)
                SKIP_ALL_DETECTION="true"
                ;;
            -nc|--nc|-no-cache|--no-cache)
                SKIP_CACHE="true"
                debug_log "DEBUG" "Cache disabled by command line option"
                ;;
            -*)
                echo "Warning: Unknown option: $1" >&2
                ;;
            *)
                if [ -z "$SELECTED_LANGUAGE" ]; then
                    SELECTED_LANGUAGE="$1"
                fi
                ;;
        esac
        shift
    done

    # 環境変数設定
    export SELECTED_LANGUAGE DEBUG_MODE DEBUG_LEVEL MODE DRY_RUN LOGFILE FORCE RESET HELP SKIP_CACHE

    # デバッグ情報を出力
    debug_log "DEBUG" "$BIN_FILE: $SCRIPT_VERSION"
    debug_log "DEBUG" "check_option received args: $ORIGINAL_ARGS"
    debug_log "DEBUG" "check_option: MODE=$MODE, SKIP_CACHE=$SKIP_CACHE, SELECTED_LANGUAGE=$SELECTED_LANGUAGE"

    # 設定された言語を `check_common()` に渡す
    check_common "$SELECTED_LANGUAGE" "$MODE"
}

check_common() {
    local lang_code="$SELECTED_LANGUAGE"
    local mode="$MODE"

    debug_log "DEBUG" "check_common: MODE=$MODE"
    debug_log "DEBUG" "check_common: mode=$mode"

    # 言語設定の早期読み込み（追加）
    if [ -f "${CACHE_DIR}/message.ch" ]; then
        debug_log "DEBUG" "Early loading language settings from cache"
        # 初期化フラグを設定して二重初期化を防止
        EARLY_LANG_LOADED=1
    fi

    # モードごとの処理
    case "$mode" in
        reset|return)
            if ! rm -rf "${CACHE_DIR}"; then
                debug_log "ERROR" "Failed to remove cache directory: ${CACHE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset failed: Could not remove cache directory.")"
                return 1
            fi
            # キャッシュディレクトリを再作成
            mkdir -p "${CACHE_DIR}" || {
                debug_log "ERROR" "Failed to recreate cache directory: ${CACHE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset partially failed: Cache removed but could not be recreated.")"
            }
            printf "%s%s%s\n" "$(color yellow "$(get_message "MSG_RESET_COMPLETE")")"
            exit 0
            ;;
        delete)
            if ! rm -rf "${BASE_DIR}"; then
                debug_log "ERROR" "Failed to remove base directory: ${BASE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset failed: Could not remove base directory.")"
                return 1
            fi
            # キャッシュディレクトリを再作成
            mkdir -p "${BASE_DIR}" || {
                debug_log "ERROR" "Failed to recreate base directory: ${CACHE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset partially failed: Base removed but could not be recreated.")"
            }
            printf "%s%s%s\n" "$(color yellow "$(get_message "MSG_DELETE_COMPLETE")")"
            exit 0
            ;;
        debug)
            download "common-system.sh" "hidden" "chmod" "load"
            download "common-information.sh" "hidden" "chmod" "load"
            download "common-color.sh" "hidden" "chmod" "load"
            download "common-country.sh" "hidden" "chmod" "load"
            download "common-country.sh" "hidden" "chmod" "load"
            download "common-package.sh" "hidden" "chmod" "load"
            download "common-feed-package.sh" "hidden" "chmod" "load"
            download "menu.db" "hidden"
            download "country.db" "hidden"
            download "message_${DEFAULT_LANGUAGE}.db" "hidden"
            download "local-package.db" "hidden"
            download "custom-package.db" "hidden"
            print_banner
            get_isp_info
            select_country "$lang_code"
            update_package_list
            selector "$MAIN_MENU" 
            ;;
        full)
            download "common-system.sh" "chmod" "load"
            download "common-information.sh" "chmod" "load"
            download "common-translation.sh" "chmod" "load"
            download "common-color.sh" "chmod" "load"
            download "common-country.sh" "chmod" "load"
            download "common-menu.sh" "chmod" "load"
            download "common-package.sh" "chmod" "load"
            download "common-feed-package.sh" "chmod" "load"
            download "menu.db"
            download "country.db"
            download "message_${DEFAULT_LANGUAGE}.db"
            download "local-package.db"
            download "custom-package.db"
            print_banner
            get_isp_info
            select_country "$lang_code"
            update_package_list
            selector "$MAIN_MENU"
            ;;
        update)
            check_update "$ORIGINAL_ARGS"
            ;;
        light)
            ;;
        test_api)
            download "github_api_test.sh" "chmod" "load"
            exit 0
            ;;
        *)
            ;;
    esac
    
    return 0
}

# 実行権限の設定
chmod_aios() {
    if ! chmod +x "$BIN_PATH"; then
        debug_log "ERROR" "Failed to set execute permission"
        return 1
    fi
    return 0
}

# ディレクトリ削除処理
delete_aios() {
    if ! rm -rf "${BASE_DIR}"; then
        debug_log "ERROR" "Failed to delete $BASE_DIR"
        return 1
    fi
    return 0
}

# 必要ディレクトリ作成
make_directory() {
    if ! mkdir -p "${BASE_DIR}" "$CACHE_DIR" "$LOG_DIR" "$FEED_DIR" "${CACHE_DIR}/commits"; then
        debug_log "ERROR" "Failed to create required directories"
        return 1
    fi
    
    # .gitignoreファイルの作成（キャッシュディレクトリの内容をgitで無視する）
    if [ ! -f "${CACHE_DIR}/.gitignore" ]; then
        echo "*" > "${CACHE_DIR}/.gitignore" 2>/dev/null
    fi
    
    return 0
}

# アップデート状態確認
check_update() {
    # デフォルトモードの設定（引数がなくても動作するように）
    local lang_code="$SELECTED_LANGUAGE"
    MODE="${MODE:-update}"
    
    # 全引数を処理
    local all_args="$@"
    local has_args=0
    
    # 引数があるかチェック
    [ $# -gt 0 ] && has_args=1
    
    # アップデート関連オプションのみをフィルタリング
    local filtered_args=""
    
    # 引数がある場合のみ処理
    if [ $has_args -eq 1 ]; then
        while [ $# -gt 0 ]; do
            case "$1" in
                -u|--u|-update|--update)
                    # アップデート関連オプションは除外
                    ;;
                *)
                    # その他のオプションは保持
                    filtered_args="${filtered_args:+$filtered_args }$1"
                    ;;
            esac
            shift
        done
    fi
    
    debug_log "DEBUG" "Original args: $all_args"
    debug_log "DEBUG" "Filtered args: $filtered_args"
    
    # ダウンロード実行
    download "aios" "chmod"
    MODE="full"

    # ファイルが存在する場合のみ移動してexec
    if [ -f "$BASE_DIR/$BIN_FILE" ]; then
        mv -f "$BASE_DIR/$BIN_FILE" "$BIN_PATH"
    fi

    exec "$BIN_PATH" "$lang_code" $filtered_args
}

# 初期化処理のメイン
main() {
    # 実行権限を設定
    if ! chmod_aios; then
        debug_log "ERROR" "Failed to set execute permission"
        return 1
    fi

    # 必要なディレクトリを作成
    if ! make_directory; then
        debug_log "ERROR" "Failed to create required directories"
        return 1
    fi

    check_network_connectivity

    setup_wget_options

    check_option "$@"
}

# 🔴　メイン　ここまで　🔴　-------------------------------------------------------------------------------------------------------------------------------------------

# スクリプト実行
main "$@"
