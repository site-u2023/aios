#!/bin/sh

SCRIPT_VERSION="2025.03.11-00-15"

echo -e "\033[1;35mCurrent Version: aios - Version: $SCRIPT_VERSION\033[0m"

# =========================================================
# üìå OpenWrt / Alpine Linux POSIX-Compliant Shell Script
# üöÄ Last Update: 2025-02-21
#
# üè∑Ô∏è License: CC0 (Public Domain)
# üéØ Compatibility: OpenWrt >= 19.07 (Tested on 24.10.0)
#
# ‚ö†Ô∏è IMPORTANT NOTICE:
# OpenWrt OS exclusively uses **Almquist Shell (ash)** and
# is **NOT** compatible with Bourne-Again Shell (bash).
#
# üì¢ POSIX Compliance Guidelines:
# ‚úÖ Use `[` instead of `[[` for conditions
# ‚úÖ Use `$(command)` instead of backticks `` `command` ``
# ‚úÖ Use `$(( ))` for arithmetic instead of `let`
# ‚úÖ Define functions as `func_name() {}` (no `function` keyword)
# ‚úÖ No associative arrays (`declare -A` is NOT supported)
# ‚úÖ No here-strings (`<<<` is NOT supported)
# ‚úÖ No `-v` flag in `test` or `[[`
#
# üõ†Ô∏è Keep it simple, POSIX-compliant, and lightweight for OpenWrt!
# =========================================================
### =========================================================
### üìå AI Assistance Request: Bug Fixing Procedure
### 
### When debugging or fixing errors in this script, follow these steps:
### 
### 1Ô∏è‚É£ Create a minimal test script to identify the bug.
### 2Ô∏è‚É£ Execute the test and verify the reproducibility of the error.
### 3Ô∏è‚É£ Fix the error and re-run the test to confirm the solution.
### 4Ô∏è‚É£ Apply the corrected code to the production environment.
### 
### ‚ö†Ô∏è DO NOT modify the main script without first confirming the fix 
###     through a dedicated test script.
### 
### üõ†Ô∏è Keep the debugging process structured, efficient, and reliable.
### =========================================================

DEV_NULL="${DEV_NULL:-on}"
# „Çµ„Ç§„É¨„É≥„Éà„É¢„Éº„Éâ
# export DEV_NULL="on"
# ÈÄöÂ∏∏„É¢„Éº„Éâ
# unset DEV_NULL

# Âü∫Êú¨ÂÆöÊï∞„ÅÆË®≠ÂÆö 
BASE_WGET="${BASE_WGET:-wget --no-check-certificate -q -O}"
# BASE_WGET="${BASE_WGET:-wget -O}"
DEBUG_MODE="${DEBUG_MODE:-false}"
BIN_PATH=$(readlink -f "$0")
BIN_DIR="$(dirname "$BIN_PATH")"
BIN_FILE="$(basename "$BIN_PATH")"
BASE_URL="${BASE_URL:-https://raw.githubusercontent.com/site-u2023/aios/main}"
BASE_DIR="${BASE_DIR:-/tmp/aios}"
CACHE_DIR="${CACHE_DIR:-$BASE_DIR/cache}"
FEED_DIR="${FEED_DIR:-$BASE_DIR/feed}"
LOG_DIR="${LOG_DIR:-$BASE_DIR/logs}"
UPDATE_CACHE="${CACHE_DIR}/update.ch"
GITHUB_TOKEN_FILE="/etc/aios_token"

# üîµ„ÄÄ„Ç®„É©„Éº„Éª„Éá„Éê„ÉÉ„Ç∞„Éª„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ-------------------------------------------------------------------------------------------------------------------------------------------
#########################################################################
# Last Update: 2025-02-16 16:00:00 (JST) üöÄ
# "Clarity in errors, precision in handling. Every function must be robust."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. „Åô„Åπ„Å¶„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí `messages.db` „ÅßÁÆ°ÁêÜ„Åó„ÄÅÂ§öË®ÄË™ûÂØæÂøú„Åô„Çã„ÄÇ
# 2. `debug_log("ERROR", message)` „ÇÇ `messages.db` „Çí‰ΩøÁî®„Åô„Çã„ÄÇ
# 3. `{file}`, `{version}` „Å™„Å©„ÅÆÂ§âÊï∞„ÇíÂãïÁöÑ„Å´ÁΩÆÊèõ„ÄÇ
# 4. ÂΩ±ÈüøÁØÑÂõ≤: `aios` & `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
handle_error() {
    local error_key="$1"
    local file="$2"
    local version="$3"
    local exit_required="${4:-no}"

    local error_message
    error_message=$(get_message "$error_key")

    # „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂèñÂæó„Åß„Åç„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
    if [ -z "$error_message" ]; then
        error_message="Unknown error occurred. Key: $error_key"
    fi

    # Â§âÊï∞„ÇíÁΩÆÊèõ
    error_message=$(echo "$error_message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # „É≠„Ç∞Ë®òÈå≤ & Ë°®Á§∫
    debug_log "ERROR" "$error_message"
    echo -e "$(color red "$error_message")"

    if [ "$exit_required" = "yes" ]; then
        debug_log "ERROR" "Critical error occurred, exiting: $error_message"
        exit 1
    else
        debug_log "DEBUG" "Non-critical error: $error_message"
        return 1
    fi
}

#########################################################################
# Last Update: 2025-02-16 16:10:00 (JST) üöÄ
# "Logging with clarity, debugging with precision."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. „Åô„Åπ„Å¶„ÅÆ„É≠„Ç∞„É°„ÉÉ„Çª„Éº„Ç∏„Çí `messages.db` „ÅßÁÆ°ÁêÜ„Åó„ÄÅÂ§öË®ÄË™ûÂØæÂøú„Åô„Çã„ÄÇ
# 2. `{file}`, `{version}` „Å™„Å©„ÅÆÂ§âÊï∞„Çí `sed` „ÅßÂãïÁöÑ„Å´ÁΩÆÊèõ„Åô„Çã„ÄÇ
# 3. `DEBUG_MODE` „ÅÆË®≠ÂÆö„Å´Âøú„Åò„Å¶ `DEBUG`, `INFO`, `WARN`, `ERROR` „ÇíÁÆ°ÁêÜ„Åô„Çã„ÄÇ
# 4. ÂΩ±ÈüøÁØÑÂõ≤: `aios` & `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
# „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞Èñ¢Êï∞„ÅÆ‰øÆÊ≠£ÁâàÔºà„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„Çí„ÇØ„É™„Éº„É≥„Å´Ë°®Á§∫Ôºâ
debug_log() {
    local level="$1"
    local message="$2"
    local file="$3"
    local version="$4"

    # `$1` „Å´„É≠„Ç∞„É¨„Éô„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÄÅ„Éá„Éï„Ç©„É´„Éà„Çí `DEBUG` „Å´„Åô„Çã
    case "$level" in
        "DEBUG"|"INFO"|"WARN"|"ERROR") ;;  # ‰Ωï„ÇÇ„Åó„Å™„ÅÑ (Ê≠£„Åó„ÅÑ„É≠„Ç∞„É¨„Éô„É´)
        "")
            level="DEBUG"
            message="$1"
            file="$2"
            version="$3"
            ;;
        *)
            message="$1"
            file="$2"
            version="$3"
            level="DEBUG"
            ;;
    esac

    # „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆ„ÇØ„É™„Éº„Éã„É≥„Ç∞Ôºà„É°„ÉÉ„Çª„Éº„Ç∏„Å´„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅåÂê´„Åæ„Çå„ÇãÂ†¥ÂêàÔºâ
    if echo "$message" | grep -q "version\|Version"; then
        # „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±ÈÉ®ÂàÜ„ÇíÊäΩÂá∫„Åó„Å¶„ÇØ„É™„Éº„Éã„É≥„Ç∞
        local cleaned_message="$message"
        # aios - [2025-03-10... „ÅÆ„Çà„ÅÜ„Å™„Éë„Çø„Éº„É≥„ÇíÊ§úÂá∫
        if echo "$message" | grep -q " - "; then
            local prefix=$(echo "$message" | sed 's/ - .*//')
            local version_part=$(echo "$message" | sed 's/.* - //')
            local cleaned_version=$(clean_version_string "$version_part")
            cleaned_message="$prefix - $cleaned_version"
        fi
        message="$cleaned_message"
    fi

    # Â§âÊï∞„ÇíÁΩÆÊèõ
    message=$(echo "$message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # „É≠„Ç∞„É¨„Éô„É´Âà∂Âæ°
    case "$DEBUG_LEVEL" in
        DEBUG)    allowed_levels="DEBUG INFO WARN ERROR" ;;
        INFO)     allowed_levels="INFO WARN ERROR" ;;
        WARN)     allowed_levels="WARN ERROR" ;;
        ERROR)    allowed_levels="ERROR" ;;
        *)        allowed_levels="ERROR" ;;
    esac

    if echo "$allowed_levels" | grep -q "$level"; then
        local timestamp
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        local log_message="[$timestamp] $level: $message"

        # „Ç´„É©„ÉºË°®Á§∫
        case "$level" in
            "ERROR") echo -e "$(color red "$log_message")" ;;
            "WARN") echo -e "$(color yellow "$log_message")" ;;
            "INFO") echo -e "$(color cyan "$log_message")" ;;
            "DEBUG") echo -e "$(color white "$log_message")" ;;
        esac

        # „É≠„Ç∞„Éï„Ç°„Ç§„É´„Å´Ë®òÈå≤
        if [ "$AIOS_INITIALIZED" = "true" ]; then
            echo "$log_message" >> "$LOG_DIR/debug.log"
        fi
    fi
}

#########################################################################
# handle_exit: Ê≠£Â∏∏ÁµÇ‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åó„Å¶ÁµÇ‰∫Ü
#########################################################################
handle_exit() {
    local message="$1"
    color yellow "$message"
    exit 0
}

# üî¥„ÄÄ„Ç®„É©„Éº„Éª„Éá„Éê„ÉÉ„Ç∞„Éª„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥-------------------------------------------------------------------------------------------------------------------------------------------

#########################################################################
# print_help: „Éò„É´„Éó„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
#########################################################################
print_help() {
    echo "Usage: aios.sh [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -reset, --reset, -r     Reset all cached data"
    echo "  -help, --help, -h       Show this help message"
    echo "  ja, en, zh-cn, ...      Set language"
    echo ""
    echo "Examples:"
    echo "  sh aios.sh full ja       # Run in full mode with language set to Japanese"
    echo "  sh aios.sh full          # If language cache exists, use it; otherwise, prompt for language"
}

#########################################################################
# color: ANSI „Ç®„Çπ„Ç±„Éº„Éó„Ç∑„Éº„Ç±„É≥„Çπ„Çí‰Ωø„Å£„Å¶Ëâ≤‰ªò„Åç„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá∫Âäõ„Åô„ÇãÈñ¢Êï∞
#########################################################################
color() {
    local color_code
    color_code=$(color_code_map "$1")
    shift
    echo -e "${color_code}$*$(color_code_map "reset")"
}

#########################################################################
# color_code_map: „Ç´„É©„ÉºÂêç„Åã„Çâ ANSI „Ç®„Çπ„Ç±„Éº„Éó„Ç∑„Éº„Ç±„É≥„Çπ„ÇíËøî„ÅôÈñ¢Êï∞
#########################################################################
color_code_map() {
    local color="$1"
    case "$color" in
        "red") echo "\033[1;31m" ;;
        "green") echo "\033[1;32m" ;;
        "yellow") echo "\033[1;33m" ;;
        "blue") echo "\033[1;34m" ;;
        "magenta") echo "\033[1;35m" ;;
        "cyan") echo "\033[1;36m" ;;
        "white") echo "\033[1;37m" ;;
        "red_underline") echo "\033[4;31m" ;;
        "green_underline") echo "\033[4;32m" ;;
        "yellow_underline") echo "\033[4;33m" ;;
        "blue_underline") echo "\033[4;34m" ;;
        "magenta_underline") echo "\033[4;35m" ;;
        "cyan_underline") echo "\033[4;36m" ;;
        "white_underline") echo "\033[4;37m" ;;
        "red_white") echo "\033[1;41m" ;;
        "green_white") echo "\033[1;42m" ;;
        "yellow_white") echo "\033[1;43m" ;;
        "blue_white") echo "\033[1;44m" ;;
        "magenta_white") echo "\033[1;45m" ;;
        "cyan_white") echo "\033[1;46m" ;;
        "white_black") echo "\033[7;40m" ;;
        "reset") echo "\033[0;39m" ;;
        *) echo "\033[0;39m" ;;  # „Éá„Éï„Ç©„É´„Éà„Åß„É™„Çª„ÉÉ„Éà
    esac
}

#########################################################################
# Last Update: 2025-02-18 18:00:00 (JST) üöÄ
# "Efficiency in retrieval, clarity in communication."
# get_message: „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂèñÂæó„É≠„Ç∏„ÉÉ„ÇØ**
#    - `$ACTIVE_LANGUAGE` „ÇíÊúÄÂÑ™ÂÖà„Åß‰ΩøÁî®Ôºà`normalize_language()` „ÅßË®≠ÂÆöÔºâ
#    - `$ACTIVE_LANGUAGE` „ÅåÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÅØ `US` „Çí„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Å®„Åó„Å¶‰ΩøÁî®
#
# 2. **„É°„ÉÉ„Çª„Éº„Ç∏Ê§úÁ¥¢„ÅÆÈ†ÜÂ∫è**
#    ‚ë† `$ACTIVE_LANGUAGE|„Ç≠„Éº=` „Åß `messages.db` „ÇíÊ§úÁ¥¢
#    ‚ë° `US|„Ç≠„Éº=` „Åß `messages.db` „ÇíÊ§úÁ¥¢Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
#    ‚ë¢ „Å©„Å°„Çâ„Å´„ÇÇË©≤ÂΩì„Åó„Å™„ÅÑÂ†¥Âêà„ÄÅ`„Ç≠„Éº` „Çí„Åù„ÅÆ„Åæ„ÅæËøî„Åô
#
# 3. **Âãï‰Ωú„ÅÆÊúÄÈÅ©Âåñ**
#    - `$ACTIVE_LANGUAGE` „ÇíÁõ¥Êé•ÂèÇÁÖß„Åó„ÄÅ„Ç≠„É£„ÉÉ„Ç∑„É• (`message.ch`) „Å´„ÅØ‰æùÂ≠ò„Åó„Å™„ÅÑ
#    - `$quiet_flag` „Å´ `"quiet"` „ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà„ÄÅÂá∫Âäõ„Åõ„Åö„Å´ `return 0`
#
# 4. **„É°„É≥„ÉÜ„Éä„É≥„Çπ**
#    - Ë®ÄË™ûÂèñÂæó„É≠„Ç∏„ÉÉ„ÇØ„Çí `normalize_language()` „Å´Áµ±‰∏Ä„Åó„ÄÅË≤¨Âãô„ÇíÂàÜÈõ¢
#    - `get_message()` „ÅØ„ÄåÂèñÂæó„Åô„Çã„Å†„Åë„Äç„Å´ÁâπÂåñ„Åó„ÄÅÊõ∏„ÅçËæº„Åø„ÉªË®≠ÂÆö„ÅØË°å„Çè„Å™„ÅÑ
#
# 5. **ÂΩ±ÈüøÁØÑÂõ≤**
#    - `common.sh` ÂÜÖ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæóÂÖ®Ëà¨Ôºà`debug_log()` Âê´„ÇÄÔºâ
#    - `messages.db` „ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊõ¥ÊôÇ„ÇÇ `get_message()` „ÅÆ‰øÆÊ≠£„ÅØ‰∏çË¶Å
#########################################################################
get_message() {
    local key="$1"
    local params="$2"
    local quiet_flag="$3"
    local message_db="${BASE_DIR}/messages.db"
    local message_cache="${CACHE_DIR}/message.ch"
    local lang="US"  # „Éá„Éï„Ç©„É´„Éà„ÅØUS

    # message.ch„Åã„ÇâË®ÄË™û„ÇíË™≠„ÅøÂèñ„Çã
    if [ -f "$message_cache" ]; then
        lang=$(cat "$message_cache")
    fi

    # `messages.db` „ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÄÅ„Ç≠„Éº„Åù„ÅÆ„Åæ„Åæ„ÇíËøî„Åô
    if [ ! -f "$message_db" ]; then
        message="$key"
    else
        # Ë®ÄË™ûÂÑ™ÂÖàÊ§úÁ¥¢
        message=$(grep "^${lang}|${key}=" "$message_db" | cut -d'=' -f2-)

        # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ§úÁ¥¢
        if [ -z "$message" ]; then
            message=$(grep "^US|${key}=" "$message_db" | cut -d'=' -f2-)
        fi

        # „Åù„Çå„Åß„ÇÇË¶ã„Å§„Åã„Çâ„Å™„Åë„Çå„Å∞„ÄÅ„Ç≠„Éº„Åù„ÅÆ„Åæ„Åæ„ÇíËøî„Åô
        if [ -z "$message" ]; then
            message="$key"
        fi
    fi

    # „Éë„É©„É°„Éº„ÇøÁΩÆÊèõ
    if [ -n "$params" ]; then
        for param in $params; do
            key=$(echo "$param" | cut -d'=' -f1)
            value=$(echo "$param" | cut -d'=' -f2)
            # `sed` „Ç≥„Éû„É≥„Éâ„Åß‰ΩøÁî®„Åô„ÇãÈöõ„Å´ `value` „Çí„Ç®„Çπ„Ç±„Éº„Éó„Åô„Çã
            escaped_value=$(echo "$value" | sed -e 's/[\/&]/\\&/g')
            message=$(echo "$message" | sed -e "s/{$key}/$escaped_value/g")
        done
    fi

    # quiet „É¢„Éº„ÉâÂØæÂøú
    if [ "$quiet_flag" = "quiet" ]; then
        return 0
    else
        echo "$message"
    fi
}

# üîµ„ÄÄ„Éà„Éº„ÇØ„É≥Á≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

#########################################################################
# Last Update: 2025-03-10 10:34:56 (JST) üöÄ
# "Â†ÖÁâ¢„Å™GitHub APIÂëº„Å≥Âá∫„ÅóÊ©üËÉΩ„ÅÆÂÆüË£Ö"
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **Ë™çË®ºÁÆ°ÁêÜ**
#   - Âà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØ„Éà„Éº„ÇØ„É≥Ë™çË®º„Çí‰ΩøÁî®
#   - „Éà„Éº„ÇØ„É≥„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂåøÂêç„É™„ÇØ„Ç®„Çπ„Éà„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
#   - Ë™çË®º„Éò„ÉÉ„ÉÄ„Éº„Å®Accept„Éò„ÉÉ„ÉÄ„Éº„ÇíÈÅ©Âàá„Å´Ë®≠ÂÆö
#
# 2. **„Ç®„É©„ÉºÊ§úÂá∫„Å®Âá¶ÁêÜ**
#   - APIÂà∂Èôê„Ç®„É©„Éº„ÅÆÊ§úÂá∫„Å®ÈÅ©Âàá„Å™„É≠„Ç∞Ë®òÈå≤
#   - Ë™çË®º„Ç®„É©„ÉºÔºàBad credentialsÔºâ„ÅÆÊ§úÂá∫„Å®ÈÄöÁü•
#   - „Åù„ÅÆ‰ªñ„ÅÆAPI„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊäΩÂá∫„Å®Ë°®Á§∫
#
# 3. **Êàª„ÇäÂÄ§„Å®Áä∂ÊÖãÈÄöÁü•**
#   - ÊàêÂäüÊôÇ: API„É¨„Çπ„Éù„É≥„Çπ„ÇíÊ®ôÊ∫ñÂá∫Âäõ„Å´Ëøî„Åô
#   - Â§±ÊïóÊôÇ: „Ç®„É©„ÉºÁ®ÆÂà•„Å´Âøú„Åò„ÅüÁµÇ‰∫Ü„Ç≥„Éº„Éâ„ÇíËøî„Åô
#     * 1: „É¨„Éº„ÉàÂà∂ÈôêË∂ÖÈÅé
#     * 2: Ë™çË®º„Ç®„É©„Éº
#     * 3: „Åù„ÅÆ‰ªñ„ÅÆAPI„Ç®„É©„Éº
#
# 4. **„Éá„Éê„ÉÉ„Ç∞ÊîØÊè¥**
#   - „Éà„Éº„ÇØ„É≥Èï∑„ÅÆ„É≠„Ç∞Ë®òÈå≤ÔºàÂÄ§Ëá™‰Ωì„ÅØË®òÈå≤„Åó„Å™„ÅÑÔºâ
#   - Ë™çË®ºÁä∂ÊÖã„Å®„É™„ÇØ„Ç®„Çπ„ÉàÊñπÊ≥ï„ÅÆË®òÈå≤
#   - „Ç®„É©„ÉºÊôÇ„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÊèê‰æõ
#
# 5. **POSIX‰∫íÊèõÊÄß**
#   - wget„ÅÆ„Åø„Çí‰ΩøÁî®„Åó„ÄÅcurl„Å´‰æùÂ≠ò„Åó„Å™„ÅÑÂÆüË£Ö
#   - „Ç™„Éó„Ç∑„Éß„É≥„ÅØÂ∫ÉÁØÑÂõ≤„ÅÆÁí∞Â¢É„ÅßÂãï‰Ωú„Åô„ÇãÂü∫Êú¨ÁöÑ„Å™„ÇÇ„ÅÆ„Å´ÈôêÂÆö
#########################################################################
github_api_request() {
    local endpoint="$1"
    local token=$(get_github_token)
    local response=""
    
    if [ -n "$token" ]; then
        debug_log "DEBUG" "Attempting authenticated request with token (${#token} chars)"
        response=$(wget -q --header="Authorization: token $token" \
            --header="Accept: application/vnd.github.v3+json" \
            -O- "https://api.github.com/$endpoint" 2>/dev/null)
            
        # „É¨„Çπ„Éù„É≥„ÇπÊ§úË®º - „É™„Éü„ÉÉ„Éà„ÉÅ„Çß„ÉÉ„ÇØ
        if echo "$response" | grep -q '"message":"API rate limit exceeded'; then
            debug_log "WARN" "GitHub API rate limit exceeded"
            return 1
        fi
        
        # Ë™çË®º„Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ
        if echo "$response" | grep -q '"message":"Bad credentials"'; then
            debug_log "ERROR" "GitHub API authentication failed: Bad credentials"
            return 2
        fi
        
        # „Åù„ÅÆ‰ªñ„Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ
        if echo "$response" | grep -q '"message":"'; then
            local error_msg=$(echo "$response" | grep -o '"message":"[^"]*"' | cut -d':' -f2- | tr -d '"')
            debug_log "ERROR" "GitHub API error: $error_msg"
            return 3
        fi
        
        # ÊàêÂäü
        echo "$response"
        return 0
    else
        debug_log "DEBUG" "No token found, using unauthenticated request"
        wget -q -O- "https://api.github.com/$endpoint" 2>/dev/null
        return $?
    fi
}

#########################################################################
# Last Update: 2025-03-10 10:34:56 (JST) üöÄ
# "GitHub API„Éà„Éº„ÇØ„É≥„ÇíÂÆâÂÖ®„Åã„Å§ÊüîËªü„Å´ÂèñÂæó„Åô„Çã"
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **„Éà„Éº„ÇØ„É≥„ÇΩ„Éº„ÇπÂÑ™ÂÖàÈ†Ü‰Ωç**
#   - „Éà„Éº„ÇØ„É≥„Éï„Ç°„Ç§„É´Ôºà$GITHUB_TOKEN_FILEÔºâ„ÇíÊúÄÂÑ™ÂÖà„Åß‰ΩøÁî®
#   - Áí∞Â¢ÉÂ§âÊï∞Ôºà$GITHUB_TOKENÔºâ„Çí„Çª„Ç´„É≥„Éâ„ÇΩ„Éº„Çπ„Å®„Åó„Å¶‰ΩøÁî®
#
# 2. **„Éà„Éº„ÇØ„É≥„ÅÆÊäΩÂá∫„Å®Ê§úË®º**
#   - „Éï„Ç°„Ç§„É´„Åã„ÇâË™≠„ÅøÂèñ„Å£„Åü„Éà„Éº„ÇØ„É≥„Åã„ÇâÊîπË°å„ÉªÁ©∫ÁôΩ„ÇíÂâäÈô§
#   - 'ghp_'„ÅßÂßã„Åæ„Çã40ÊñáÂ≠ó„ÅÆËã±Êï∞Â≠ó„Éë„Çø„Éº„É≥„ÇíÊäΩÂá∫
#   - Èï∑„Åï„Å®ÂΩ¢Âºè„ÅÆÂü∫Êú¨ÁöÑ„Å™Ê§úË®º„ÇíÂÆüÊñΩ
#
# 3. **„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞**
#   - „Éà„Éº„ÇØ„É≥„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÁí∞Â¢ÉÂ§âÊï∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
#   - ÁÑ°Âäπ„Å™„Éà„Éº„ÇØ„É≥ÂΩ¢Âºè„ÅÆÂ†¥Âêà„ÅØË≠¶Âëä„É≠„Ç∞„ÇíË®òÈå≤
#   - „Éà„Éº„ÇØ„É≥„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÁ©∫ÊñáÂ≠ó„ÇíËøî„Åó„ÄÅÂëº„Å≥Âá∫„ÅóÂÖÉ„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ
#
# 4. **„Çª„Ç≠„É•„É™„ÉÜ„Ç£ËÄÉÊÖÆ‰∫ãÈ†Ö**
#   - „Éà„Éº„ÇØ„É≥„ÅÆ‰∏ÄÈÉ®„ÅÆ„Åø„Çí„É≠„Ç∞„Å´Ë®òÈå≤ÔºàÊºèÊ¥©Èò≤Ê≠¢Ôºâ
#   - „Éà„Éº„ÇØ„É≥„Éï„Ç°„Ç§„É´„ÅÆÊ®©Èôê„ÇíÁ¢∫Ë™çÔºàË™≠„ÅøÂèñ„ÇäÊ®©ÈôêÔºâ
#
# 5. **POSIX‰∫íÊèõÊÄß**
#   - ÂÖ®„Å¶„ÅÆÂá¶ÁêÜ„ÅØPOSIX‰∫íÊèõ„ÅÆ„Ç∑„Çß„É´„Ç≥„Éû„É≥„Éâ„ÅßÂÆüË£Ö
#   - OpenWrt/Alpine LinuxÁí∞Â¢É„Åß„ÅÆÂãï‰Ωú„Çí‰øùË®º
#########################################################################
get_github_token() {
    if [ -f "$GITHUB_TOKEN_FILE" ] && [ -r "$GITHUB_TOKEN_FILE" ]; then
        # 1. Áîü„ÅÆ„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó
        local raw_token=$(cat "$GITHUB_TOKEN_FILE")
        
        # 2. Ë§áÊï∞„ÅÆÂá¶ÁêÜÊñπÊ≥ï„ÇíË©¶„Åô
        
        # ÊñπÊ≥ï1: ÊîπË°å„Å®Á©∫ÁôΩ„ÇíÂâäÈô§
        local token=$(echo "$raw_token" | tr -d '\n\r\t ')
        
        # ÊñπÊ≥ï2: ghp_„ÅßÂßã„Åæ„Çã40ÊñáÂ≠ó„ÅÆËã±Êï∞Â≠ó„Éë„Çø„Éº„É≥„ÇíÊäΩÂá∫
        if [ -z "$token" ] || [ ${#token} -ne 40 ]; then
            token=$(echo "$raw_token" | grep -o 'ghp_[a-zA-Z0-9]\{36\}')
        fi
        
        # ÊúÄÁµÇ„ÉÅ„Çß„ÉÉ„ÇØ
        if [ -n "$token" ] && [ ${#token} -eq 40 ]; then
            echo "$token"
            return 0
        else
            debug_log "WARN" "Invalid token format in $GITHUB_TOKEN_FILE"
        fi
    fi
    
    # Áí∞Â¢ÉÂ§âÊï∞„Åã„Çâ„ÅÆÂèñÂæó
    if [ -n "$GITHUB_TOKEN" ]; then
        echo "$GITHUB_TOKEN"
        return 0
    fi
    
    return 1
}

#########################################################################
# Last Update: 2025-03-10 10:34:56 (JST) üöÄ
# "GitHub API„Éà„Éº„ÇØ„É≥„ÇíÂÆâÂÖ®„Å´‰øùÂ≠ò„Åô„Çã"
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **Âü∫Êú¨Ê©üËÉΩ**
#   - Êèê‰æõ„Åï„Çå„Åü„Éà„Éº„ÇØ„É≥ÊñáÂ≠óÂàó„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
#   - ‰øùÂ≠òÂÖà„Éï„Ç°„Ç§„É´: $GITHUB_TOKEN_FILE ÔºàÈÄöÂ∏∏„ÅØ/etc/aios_tokenÔºâ
#
# 2. **„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñ**
#   - „Éï„Ç°„Ç§„É´„ÅÆ„Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥„Çí600„Å´Ë®≠ÂÆöÔºàÊâÄÊúâËÄÖ„ÅÆ„ÅøË™≠„ÅøÊõ∏„ÅçÂèØËÉΩÔºâ
#   - Á©∫„ÅÆ„Éà„Éº„ÇØ„É≥„ÅåÊèê‰æõ„Åï„Çå„ÅüÂ†¥Âêà„ÅØ‰øùÂ≠ò„ÇíÊãíÂê¶
#
# 3. **„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞**
#   - „Éà„Éº„ÇØ„É≥„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØ„Ç®„É©„Éº„É≠„Ç∞„ÇíË®òÈå≤„Åó„Å¶Â§±Êïó„ÇíËøî„Åô
#   - „Éï„Ç°„Ç§„É´Êõ∏„ÅçËæº„ÅøÂ§±ÊïóÊôÇ„ÅØ„Ç®„É©„Éº„É≠„Ç∞„ÇíË®òÈå≤
#   - ÊàêÂäü/Â§±ÊïóÁä∂ÊÖã„ÇíÊàª„ÇäÂÄ§„ÅßÊòéÁ§∫ÁöÑ„Å´ÈÄöÁü•
#
# 4. **„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ**
#   - Êìç‰Ωú„ÅÆÊàêÂäü„ÉªÂ§±Êïó„Çí„É≠„Ç∞„Å´Ë®òÈå≤
#   - „Éá„Éê„ÉÉ„Ç∞„É¨„Éô„É´„Å´Âøú„Åò„ÅüË©≥Á¥∞ÊÉÖÂ†±„ÅÆÊèê‰æõ
#
# 5. **POSIX‰∫íÊèõÊÄß**
#   - ÂÖ®„Å¶„ÅÆÂá¶ÁêÜ„ÅØPOSIX‰∫íÊèõ„ÅÆ„Ç∑„Çß„É´„Ç≥„Éû„É≥„Éâ„ÅÆ„Åø„ÅßÂÆüË£Ö
#   - OpenWrtÁí∞Â¢É„Åß„ÅÆÂãï‰Ωú„Çí‰øùË®º
#########################################################################
save_github_token() {
    token="$1"
    
    if [ -z "$token" ]; then
        debug_log "ERROR" "Empty token provided, cannot save"
        return 1
    fi
    
    # „Éà„Éº„ÇØ„É≥„Çí‰øùÂ≠ò„Åó„Å¶Ê®©Èôê„ÇíË®≠ÂÆö
    echo "$token" > "$GITHUB_TOKEN_FILE"
    chmod 600 "$GITHUB_TOKEN_FILE"
    
    if [ $? -eq 0 ]; then
        debug_log "INFO" "GitHub token saved to $GITHUB_TOKEN_FILE"
        return 0
    else
        debug_log "ERROR" "Failed to save token to $GITHUB_TOKEN_FILE"
        return 1
    fi
}

#########################################################################
# Last Update: 2025-03-10 10:34:56 (JST) üöÄ
# "ÂØæË©±Âûã„ÅÆGitHub„Éà„Éº„ÇØ„É≥Ë®≠ÂÆöÊ©üËÉΩ"
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **Âü∫Êú¨Ê©üËÉΩ**
#   - „É¶„Éº„Ç∂„Éº„Åã„ÇâGitHub„Éà„Éº„ÇØ„É≥„ÇíÂØæË©±ÁöÑ„Å´ÂèñÂæó
#   - „Éà„Éº„ÇØ„É≥„ÅÆÂÆâÂÖ®„Å™‰øùÂ≠ò„Å®Ê®©ÈôêË®≠ÂÆö
#
# 2. **UI/UXË®≠Ë®à**
#   - ÊòéÁ¢∫„Å™Ë™¨Êòé„Å®ÊåáÁ§∫„ÇíË°®Á§∫
#   - ‰øùÂ≠òÂ†¥ÊâÄ„Å®ÁõÆÁöÑ„ÅÆÈÄöÁü•
#   - Âá¶ÁêÜÁµêÊûú„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÊèê‰æõ
#
# 3. **„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñ**
#   - stty„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÄÅÂÖ•ÂäõÊôÇ„Å´„Éà„Éº„ÇØ„É≥„ÇíÈùûË°®Á§∫„Å´
#   - stty„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÁí∞Â¢É„Åß„ÇÇ‰ª£ÊõøÊâãÊÆµ„ÇíÊèê‰æõ
#   - ‰øùÂ≠òÊôÇ„Å´ÈÅ©Âàá„Å™Ê®©Èôê„ÇíË®≠ÂÆö
#
# 4. **„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞**
#   - Á©∫„ÅÆÂÖ•Âäõ„Å´ÂØæ„Åô„ÇãÈÅ©Âàá„Å™Âá¶ÁêÜ
#   - ‰øùÂ≠òÂ§±ÊïóÊôÇ„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
#
# 5. **Áí∞Â¢É‰∫íÊèõÊÄß**
#   - OpenWrt/BusyBox„ÅÆÂà∂Èôê„Åï„Çå„ÅüÁí∞Â¢É„Åß„ÇÇÂãï‰Ωú
#   - stty„Ç≥„Éû„É≥„ÉâÊúâÁÑ°„Å´Âøú„Åò„ÅüÂá¶ÁêÜÂàÜÂ≤ê
#   - Ê®ôÊ∫ñÁöÑ„Å™„Ç∑„Çß„É´„Ç≥„Éû„É≥„Éâ„ÅÆ„Åø‰ΩøÁî®
#########################################################################
# OpenWrtÂêë„Åë„Ç∑„É≥„Éó„É´„Å™„Éà„Éº„ÇØ„É≥ÂÖ•ÂäõÈñ¢Êï∞
setup_github_token() {
    echo "GitHub API Token Setup"
    echo "======================"
    echo "This will save a GitHub Personal Access Token to $GITHUB_TOKEN_FILE"
    echo "The token will be used for API requests to avoid rate limits."
    echo ""
    
    # OpenWrt„ÅØstty„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑ„Åì„Å®„ÇíÂâçÊèê„Å®„Åô„Çã
    printf "Enter your GitHub Personal Access Token: "
    read -r token
    echo ""
    
    if [ -n "$token" ]; then
        if save_github_token "$token"; then
            echo "Token has been saved successfully!"
            echo "API requests will now use authentication."
        else
            echo "Failed to save token. Please check permissions."
        fi
    else
        echo "No token entered. Operation cancelled."
    fi
}

# üî¥„ÄÄ„Éà„Éº„ÇØ„É≥Á≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥-------------------------------------------------------------------------------------------------------------------------------------------


# üîµ„ÄÄ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------
#########################################################################
# Last Update: 2025-03-10 10:34:56 (JST) üöÄ
# "GitHub APIË™çË®ºÁä∂ÊÖã„ÅÆË®∫Êñ≠„Å®Ë°®Á§∫"
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **Ë®∫Êñ≠Ê©üËÉΩ**
#   - „Éà„Éº„ÇØ„É≥„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç„Å®Ê®©ÈôêË°®Á§∫
#   - „Éà„Éº„ÇØ„É≥„ÅÆÊúâÂäπÊÄßÊ§úË®º
#   - GitHub APIË™çË®ºÁä∂ÊÖã„ÅÆÁ¢∫Ë™çÔºà„É¨„Éº„ÉàÂà∂ÈôêÊÉÖÂ†±ÂèñÂæóÔºâ
#
# 2. **Ë°®Á§∫ÊÉÖÂ†±**
#   - „Éà„Éº„ÇØ„É≥„Éï„Ç°„Ç§„É´„ÅÆÂ†¥ÊâÄ„Å®Â≠òÂú®Áä∂ÊÖã
#   - „Éà„Éº„ÇØ„É≥„ÅÆ„Éó„É¨„Éì„É•„ÉºÔºàÂÖàÈ†≠5ÊñáÂ≠ó„ÅÆ„ÅøÔºâ
#   - APIÂà∂ÈôêÂÄ§ÔºàË™çË®ºÁä∂ÊÖã„Å´‰æùÂ≠òÔºâ
#   - ÊÆã„Çä„É™„ÇØ„Ç®„Çπ„ÉàÊï∞
#   - Ë™çË®ºÁä∂ÊÖã„ÅÆÊòéÁ§∫ÁöÑ„Å™Ë°®Á§∫Ôºà‚úÖ/‚ùåÔºâ
#
# 3. **„ÉÑ„Éº„É´‰æùÂ≠òÊÄß**
#   - jq„Çí‰ΩøÁî®„Åó„ÅüJSON„Éá„Éº„Çø„ÅÆËß£Êûê
#   - wget„Çí‰ΩøÁî®„Åó„ÅüAPIÈÄö‰ø°
#   - ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®„Åó„ÅüÁµêÊûú‰øùÂ≠ò„Å®Ëß£Êûê
#
# 4. **„Éï„Ç©„Éº„Éû„ÉÉ„Éà**
#   - Ë¶ã„ÇÑ„Åô„ÅÑ„Çª„ÇØ„Ç∑„Éß„É≥Âå∫Âàá„ÇäÔºà=====Ôºâ
#   - Ë™çË®ºÁä∂ÊÖã„Å´Âøú„Åò„ÅüË®òÂè∑Ë°®Á§∫Ôºà‚úÖ/‚ùåÔºâ
#   - ÈáçË¶ÅÊÉÖÂ†±„ÅÆÊòéÁ§∫ÁöÑ„Å™Ë°®Á§∫
#
# 5. **„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó**
#   - ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„ÅÆÈÅ©Âàá„Å™ÂâäÈô§
#   - „Ç®„É©„ÉºÁä∂ÊÖã„ÅÆÈÅ©Âàá„Å™Ë°®Á§∫
#########################################################################
check_github_api_status() {
    local verbose="$1"  # Ë©≥Á¥∞Ë°®Á§∫„Éï„É©„Ç∞
    local token=$(get_github_token)
    local cmd_output=""
    
    # Ë™çË®º„Éò„ÉÉ„ÉÄ„ÉºË®≠ÂÆö
    if [ -n "$token" ]; then
        cmd_output=$(wget -q -O- --header="Authorization: token $token" \
                    "https://api.github.com/rate_limit" 2>/dev/null)
    else
        cmd_output=$(wget -q -O- "https://api.github.com/rate_limit" 2>/dev/null)
    fi
    
    # Âá∫ÂäõÂá¶ÁêÜÔºà„Ç∑„É≥„Éó„É´ÂåñÔºâ
    if [ -n "$cmd_output" ]; then
        local limit=$(echo "$cmd_output" | grep -o '"limit":[0-9]*' | head -1 | cut -d':' -f2)
        local remaining=$(echo "$cmd_output" | grep -o '"remaining":[0-9]*' | head -1 | cut -d':' -f2)
        
        if [ "$verbose" = "true" ]; then
            echo "API limits: $remaining/$limit remaining"
        else
            debug_log "DEBUG" "API limits: $remaining/$limit remaining"
        fi
    fi
}

compare_versions() {
    local current="$1"
    local reference="$2"
    
    # unknownÂØæÂøú
    if echo "$current $reference" | grep -q "unknown\|No version"; then
        return 0  # Êõ¥Êñ∞ÂøÖË¶Å
    fi
    
    # Êó•‰ªòÊäΩÂá∫ (YYYY.MM.DDÂΩ¢Âºè)
    local curr_date=$(echo "$current" | grep -o "[0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}" | head -1)
    local ref_date=$(echo "$reference" | grep -o "[0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}" | head -1)
    
    # ÊäΩÂá∫Â§±ÊïóÊôÇ„ÅØÊõ¥Êñ∞ÂøÖË¶Å
    if [ -z "$curr_date" ] || [ -z "$ref_date" ]; then
        return 0
    fi
    
    # Êï∞ÂÄ§ÊØîËºÉÔºà.„ÇíÂâäÈô§Ôºâ
    local curr_num=$(echo "$curr_date" | tr -d '.')
    local ref_num=$(echo "$ref_date" | tr -d '.')
    
    [ "$curr_num" -gt "$ref_num" ] && return 0
    
    return 1
}

#########################################################################
# Last Update: 2025-03-10 10:30:32 (JST) üöÄ
# "GitHub API„Åã„Çâ„Éï„Ç°„Ç§„É´„ÅÆÊúÄÊñ∞„Ç≥„Éü„ÉÉ„ÉàÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Å¶„Éê„Éº„Ç∏„Éß„É≥Âåñ„Åô„Çã"
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **API„Ç¢„ÇØ„Çª„ÇπÊñπÊ≥ï**
#   - GitHub API v3„Çí‰ΩøÁî®„Åó„ÄÅÊåáÂÆö„Éï„Ç°„Ç§„É´„ÅÆÊúÄÊñ∞„Ç≥„Éü„ÉÉ„ÉàÊÉÖÂ†±„ÇíÂèñÂæó
#   - „Éà„Éº„ÇØ„É≥Ë™çË®º„ÇíÂÑ™ÂÖà‰ΩøÁî®ÔºàÂà©Áî®ÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
#   - Ë™çË®ºÂ§±ÊïóÊôÇ„ÅØÂåøÂêç„Ç¢„ÇØ„Çª„Çπ„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
#
# 2. **„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆÁîüÊàê**
#   - „Ç≥„Éü„ÉÉ„ÉàÊó•‰ªò„Å®SHA„Éè„ÉÉ„Ç∑„É•„Åã„Çâ„Éê„Éº„Ç∏„Éß„É≥ÊñáÂ≠óÂàó„ÇíÊßãÁØâ
#   - ÂΩ¢Âºè: `YYYY.MM.DD-SHA(Áü≠Á∏ÆÂΩ¢)`
#   - Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊèõ: YYYY-MM-DD ‚Üí YYYY.MM.DD
#   - SHA: ÂÖàÈ†≠7ÊñáÂ≠ó„ÅÆ„Åø‰ΩøÁî®
#
# 3. **„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞**
#   - APIÂ§±ÊïóÊôÇ„ÅØÁèæÂú®Êó•‰ªò„Å®"unknown"„Çí‰ΩøÁî®„Åó„Åü„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíËøî„Åô
#   - Ë™çË®ºÁä∂ÊÖã„Çí2„Å§ÁõÆ„ÅÆÊàª„ÇäÂÄ§„Å®„Åó„Å¶Ëøî„ÅôÔºàtoken/directÔºâ
#   - ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®„Åó„ÄÅÂá¶ÁêÜÂæå„Å´ÈÅ©Âàá„Å´ÂâäÈô§
#
# 4. **‰æùÂ≠ò„ÉÑ„Éº„É´**
#   - jq: JSON„Éë„Éº„ÇπÁî®ÔºàÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„Åø‰ΩøÁî®Ôºâ
#   - wget: API„É™„ÇØ„Ç®„Çπ„ÉàÁî®
#   - ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´: /tmp/aios_commit_info.tmp
#
# 5. **Êó¢Â≠òÂÆüË£Ö„Åã„Çâ„ÅÆÂ§âÊõ¥ÁÇπ**
#   - Base64„Éá„Ç≥„Éº„Éâ„Åå‰∏çË¶ÅÔºà„Éï„Ç°„Ç§„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åß„ÅØ„Å™„Åè„Ç≥„Éü„ÉÉ„ÉàÊÉÖÂ†±„Çí‰ΩøÁî®Ôºâ
#   - Ë™çË®ºÁä∂ÊÖã„Çí„Çà„ÇäÊ≠£Á¢∫„Å´Ë≠òÂà•„Åó„Å¶Ëøî„Åô
#########################################################################
get_commit_version() {
    local file_path="$1"
    
    # „É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±
    local repo_owner="site-u2023"
    local repo_name="aios"
    local api_url="repos/${repo_owner}/${repo_name}/commits?path=${file_path}&per_page=1"
    local temp_file="/tmp/aios_commit_info.tmp"
    local auth_method="direct"
    
    # „Éà„Éº„ÇØ„É≥ÂèñÂæó
    local token="$(get_github_token)"
    
    if [ -n "$token" ]; then
        debug_log "DEBUG" "Using token authentication for API request"
        wget -q -O "$temp_file" --header="Authorization: token $token" "https://api.github.com/$api_url" 2>/dev/null
        
        # „É¨„Çπ„Éù„É≥„ÇπÊ§úË®º
        if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
            # jq„ÅåÂà©Áî®ÂèØËÉΩ„Å™„Çâjq„ÅßÊ§úË®º
            if check_jq_available; then
                if jq -e '.[0].sha' "$temp_file" >/dev/null 2>&1; then
                    auth_method="token"
                    debug_log "DEBUG" "Token authentication successful (jq verified)"
                fi
            else
                # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂçòÁ¥î„Å´sha„ÅÆÂ≠òÂú®Á¢∫Ë™ç
                if grep -q '"sha"' "$temp_file"; then
                    auth_method="token"
                    debug_log "DEBUG" "Token authentication successful (grep verified)"
                fi
            fi
        fi
    else
        debug_log "DEBUG" "No token available, using direct API request"
        wget -q -O "$temp_file" "https://api.github.com/$api_url" 2>/dev/null
    fi
    
    # ÊÉÖÂ†±ÊäΩÂá∫
    if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
        local commit_date=""
        local commit_sha=""
        
        # jq„ÅåÂà©Áî®ÂèØËÉΩ„Å™„Çâjq„Åß„Éë„Éº„Çπ
        if check_jq_available; then
            commit_date=$(jq -r '.[0].commit.committer.date' "$temp_file" 2>/dev/null | grep -o "[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}")
            commit_sha=$(jq -r '.[0].sha' "$temp_file" 2>/dev/null | cut -c 1-7)
        else
            # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºögrep„Å®sed„Åß„Éë„Éº„Çπ
            commit_date=$(grep -o '"date"[[:space:]]*:[[:space:]]*"[^"]*"' "$temp_file" | head -1 | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}')
            commit_sha=$(grep -o '"sha"[[:space:]]*:[[:space:]]*"[^"]*"' "$temp_file" | head -1 | grep -o '[a-f0-9]\{7,40\}' | cut -c 1-7)
        fi
        
        if [ -n "$commit_date" ] && [ -n "$commit_sha" ]; then
            # YYYY.MM.DD-SHA ÂΩ¢Âºè„Å´Â§âÊèõ
            local formatted_date=$(echo "$commit_date" | sed 's/-/./g')
            local clean_version="${formatted_date}-${commit_sha}"
            
            debug_log "DEBUG" "Successfully extracted commit info: $clean_version via $auth_method"
            rm -f "$temp_file"
            echo "$clean_version $auth_method"
            return 0
        fi
        debug_log "DEBUG" "Failed to extract commit info from response"
    fi
    
    # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´ÂâäÈô§
    rm -f "$temp_file" 2>/dev/null
    
    # APIÂèñÂæóÂ§±ÊïóÊôÇ„ÅØÁèæÂú®ÊôÇÂàª„Çí‰ΩøÁî®
    echo "$(date +%Y.%m.%d)-unknown $auth_method"
    return 1
}

#########################################################################
# Last Update: 2025-03-10 10:30:32 (JST) üöÄ
# "„Éê„Éº„Ç∏„Éß„É≥ÊñáÂ≠óÂàó„ÇíÊØîËºÉ„Åó„Å¶Êõ¥Êñ∞„ÅåÂøÖË¶Å„ÅãÂà§ÂÆö„Åô„Çã"
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **ÂÖ•Âäõ„Å®Âá∫Âäõ**
#   - ÂÖ•Âäõ: 2„Å§„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÊñáÂ≠óÂàóÔºàcurrent, referenceÔºâ
#   - Âá∫Âäõ: Êõ¥Êñ∞„ÅåÂøÖË¶Å„Åã„ÇíÁ§∫„ÅôÁµÇ‰∫Ü„Ç≥„Éº„ÉâÔºà0=Êõ¥Êñ∞ÂøÖË¶Å„ÄÅ1=Êõ¥Êñ∞‰∏çË¶ÅÔºâ
#
# 2. **ÊØîËºÉ„É≠„Ç∏„ÉÉ„ÇØ**
#   - Êó•‰ªòÈÉ®ÂàÜÔºàYYYY.MM.DDÔºâ„ÇíÂÑ™ÂÖàÁöÑ„Å´ÊØîËºÉ
#   - Êó•‰ªò„ÅåÂêå‰∏Ä„ÅÆÂ†¥Âêà„ÅØ„Ç≥„Éü„ÉÉ„Éà„Éè„ÉÉ„Ç∑„É•ÔºàSHAÔºâ„ÇíÊØîËºÉ
#   - "unknown"„ÇÑ"No version"„ÇíÂê´„ÇÄÂ†¥Âêà„ÅØÂ∏∏„Å´Êõ¥Êñ∞„ÅåÂøÖË¶Å„Å®Âà§ÂÆö
#
# 3. **Â†ÖÁâ¢ÊÄß**
#   - Êßò„ÄÖ„Å™„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åã„ÇâÊó•‰ªòÈÉ®ÂàÜ„ÇíÊ≠£Ë¶èË°®Áèæ„ÅßÊäΩÂá∫
#   - ÊäΩÂá∫„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØÂÆâÂÖ®„ÅÆ„Åü„ÇÅÊõ¥Êñ∞„ÅåÂøÖË¶Å„Å®Âà§Êñ≠
#   - Êó•‰ªò„ÇíÊï∞ÂÄ§Âåñ„Åó„Å¶ÊØîËºÉÔºàYYYYMMDDÂΩ¢Âºè„Å´Â§âÊèõÔºâ
#
# 4. **‰ΩøÁî®‰æã**
#   - „É≠„Éº„Ç´„É´„Éê„Éº„Ç∏„Éß„É≥„Å®„É™„É¢„Éº„Éà„Éê„Éº„Ç∏„Éß„É≥„ÅÆÊØîËºÉ
#   - „Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆÊúâÂäπÊÄßÂà§Êñ≠
#   - Êõ¥Êñ∞„Çø„Çπ„ÇØ„ÅÆÂÆüË°åÂà§Êñ≠
#########################################################################
version_is_newer() {
    local current="$1"
    local reference="$2"
    
    # „Å©„Å°„Çâ„Åã„Åå‰∏çÊòé„ÅÆÂ†¥Âêà„ÅØÊõ¥Êñ∞ÂøÖË¶Å
    if echo "$current $reference" | grep -q "No version\|unknown"; then
        return 0
    fi
    
    # Êó•‰ªòÈÉ®ÂàÜ„ÇíÊäΩÂá∫ÔºàYYYY.MM.DDÂΩ¢ÂºèÔºâ- „Çà„ÇäÂ†ÖÁâ¢„Å™ÊñπÊ≥ï
    local current_date=$(echo "$current" | grep -o "[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" | head -1)
    local reference_date=$(echo "$reference" | grep -o "[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" | head -1)
    
    # Êó•‰ªò„ÅåÊäΩÂá∫„Åß„Åç„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅØÊõ¥Êñ∞„ÅåÂøÖË¶Å
    if [ -z "$current_date" ] || [ -z "$reference_date" ]; then
        return 0
    fi
    
    # Êó•‰ªò„ÇíÊï∞ÂÄ§„Å´Â§âÊèõÔºàÂå∫Âàá„ÇäÊñáÂ≠ó„ÇíÂâäÈô§Ôºâ
    local current_num=$(echo "$current_date" | tr -d '.')
    local reference_num=$(echo "$reference_date" | tr -d '.')
    
    # Êï∞ÂÄ§ÊØîËºÉÔºàÊó•‰ªòÂΩ¢ÂºèÔºâ
    if [ "$current_num" -gt "$reference_num" ]; then
        return 0  # ÁèæÂú®„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅåÊñ∞„Åó„ÅÑ
    elif [ "$current_num" -lt "$reference_num" ]; then
        return 1  # „É™„Éï„Ç°„É¨„É≥„Çπ„Éê„Éº„Ç∏„Éß„É≥„ÅåÊñ∞„Åó„ÅÑ
    fi
    
    # Êó•‰ªò„ÅåÂêå„ÅòÂ†¥Âêà„ÅØSHAÈÉ®ÂàÜ„ÇíÊØîËºÉ
    local current_sha=$(echo "$current" | grep -o "\-[a-z0-9]*" | sed 's/^-//' | head -1)
    local reference_sha=$(echo "$reference" | grep -o "\-[a-z0-9]*" | sed 's/^-//' | head -1)
    
    if [ -n "$current_sha" ] && [ -n "$reference_sha" ] && [ "$current_sha" != "$reference_sha" ]; then
        return 0  # Áï∞„Å™„Çã„Ç≥„Éü„ÉÉ„Éà
    fi
    
    return 1  # Âêå‰∏Ä„Éê„Éº„Ç∏„Éß„É≥
}

#########################################################################
# Last Update: 2025-03-10 10:30:32 (JST) üöÄ
# "ÂäπÁéáÁöÑ„Å™„Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å®„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ"
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **Âü∫Êú¨Ê©üËÉΩ**
#   - „Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ + „Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ + „Ç™„Éó„Ç∑„Éß„É≥Âá¶ÁêÜ
#   - GitHub API„Å®ÈÄ£Êê∫„Åó„ÄÅ„Ç≥„Éü„ÉÉ„ÉàÊÉÖÂ†±„Å´Âü∫„Å•„ÅÑ„Åü„Éê„Éº„Ç∏„Éß„É≥Âà§ÂÆö
#   - „Ç≠„É£„ÉÉ„Ç∑„É•Ê©üÊßã„Å´„Çà„Çã„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÊúÄÈÅ©Âåñ
#
# 2. **„Ç™„Éó„Ç∑„Éß„É≥**
#   - hidden: Ë©≥Á¥∞Âá∫Âäõ„ÅÆÊúâÁÑ°Ôºàtrue=Ë©≥Á¥∞Ë°®Á§∫„ÄÅfalse=ÊúÄÂ∞èÈôê„ÅÆË°®Á§∫Ôºâ
#   - quiet: „Åô„Åπ„Å¶„ÅÆÂá∫Âäõ„ÇíÊäëÂà∂
#   - chmod: „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂæå„Å´ÂÆüË°åÊ®©Èôê„Çí‰ªò‰∏éÔºà+xÔºâ
#   - read: „Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄÔºàsourceÔºâ
#   - debug: „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„Åß„ÅÆÂÆüË°å
#
# 3. **„Éê„Éº„Ç∏„Éß„É≥Âá¶ÁêÜ**
#   - „É™„É¢„Éº„Éà„Éê„Éº„Ç∏„Éß„É≥: GitHub„Ç≥„Éü„ÉÉ„ÉàÊÉÖÂ†±„Åã„ÇâÂèñÂæóÔºàYYYY.MM.DD-SHAÂΩ¢ÂºèÔºâ
#   - „É≠„Éº„Ç´„É´„Éê„Éº„Ç∏„Éß„É≥: „Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂèñÂæó„ÄÅ„Å™„Åë„Çå„Å∞"No version control"
#   - ÊØîËºÉ: `version_is_newer()` „ÅßÂà§ÂÆö„Åó„ÄÅÂøÖË¶Å„Å™Â†¥Âêà„ÅÆ„Åø„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÆüË°å
#
# 4. **Âá∫Âäõ„Å®„É≠„Ç∞**
#   - Ë™çË®ºÁä∂ÊÖã„ÄÅ„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÄÅ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁä∂ÊÖã„ÇíÂê´„ÇÄË©≥Á¥∞„É°„ÉÉ„Çª„Éº„Ç∏
#   - „Éá„Éê„ÉÉ„Ç∞„É¨„Éô„É´„Å´Âøú„Åò„Åü„É≠„Ç∞Ë®òÈå≤
#   - hidden=true„ÅÆÂ†¥Âêà„ÅØËâ≤‰ªò„Åç„ÅßË°®Á§∫„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØdebug_log„Çí‰ΩøÁî®
#
# 5. **ÁâπÊÆäÂá¶ÁêÜ**
#   - *.sh„Éï„Ç°„Ç§„É´„ÅØËá™ÂãïÁöÑ„Å´Ë™≠„ÅøËæº„ÅøÔºàsourceÔºâ
#   - „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅØ${CACHE_DIR}/script.ch„Å´‰øùÂ≠ò
#   - Ê®©Èôê‰ªò‰∏é„Ç™„Éó„Ç∑„Éß„É≥ÊôÇ„ÅØchmod +x„ÇíÂÆüË°å
#
# 6. **„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞**
#   - „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂ§±ÊïóÊôÇ„ÅÆË©≥Á¥∞„Ç®„É©„ÉºÂá∫Âäõ
#   - Á©∫„Éï„Ç°„Ç§„É´Ê§úÂá∫„Å®ÈÅ©Âàá„Å™„Ç®„É©„ÉºÂá¶ÁêÜ
#   - APIÂà∂Èôê„Å´ÈÅî„Åó„ÅüÂ†¥Âêà„ÅÆË≠¶ÂëäË°®Á§∫
#########################################################################
download() {
    # „Éï„Ç°„Ç§„É´Âêç„ÇíÊúÄÂàù„ÅÆÂºïÊï∞„Å®„Åó„Å¶Âá¶ÁêÜ„ÄÅÊÆã„Çä„ÅØ„Ç™„Éó„Ç∑„Éß„É≥
    local file_name="$1"
    shift
    
    # Ë®≠ÂÆöÂ§âÊï∞
    local hidden_mode="false"
    local quiet_mode="${QUIET_MODE:-false}"
    local chmod_mode="false"
    local read_mode="false"
    local script_file="${CACHE_DIR}/script.ch"
    local dummy_version="No version control"
    
    # „Ç™„Éó„Ç∑„Éß„É≥ÂºïÊï∞„ÅÆÂá¶ÁêÜ
    while [ $# -gt 0 ]; do
        case "$1" in
            hidden) hidden_mode="true" ;;
            quiet)  quiet_mode="true" ;;
            debug)  DEBUG_MODE="true" ;;
            chmod)  chmod_mode="true" ;;
            read)   read_mode="true" ;;
            *)      debug_log "WARN" "Unknown option: $1, ignoring" ;;
        esac
        shift
    done
    
    # „Éë„ÇπË®≠ÂÆö
    local install_path="${BASE_DIR}/$file_name"
    local remote_url="${BASE_URL}/$file_name"
    
    # APIÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØÔºà„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊôÇ„ÅÆ„ÅøÔºâ
    [ "$DEBUG_MODE" = "true" ] && check_api_rate_limit
    
    # „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆÂèñÂæó
    local remote_version_info=$(get_commit_version "$file_name")
    local remote_version=$(printf "%s" "$remote_version_info" | cut -d' ' -f1)
    local auth_method=$(printf "%s" "$remote_version_info" | cut -d' ' -f2)
    local local_version=""
    
    # „É≠„Éº„Ç´„É´„Éê„Éº„Ç∏„Éß„É≥„ÅÆÂèñÂæó
    if [ -f "$script_file" ]; then
        local_version=$(grep "^${file_name}=" "$script_file" | cut -d'=' -f2)
    fi
    [ -z "$local_version" ] && local_version="$dummy_version"

    local clean_remote_version=$(clean_version_string "$remote_version")
    local clean_local_version=$(clean_version_string "$local_version")

    # Ë™çË®º„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË®≠ÂÆö
    local auth_message=""
    case "$auth_method" in
        token)    auth_message="via token auth" ;;
        standard) auth_message="via standard API" ;;
        *)        auth_message="via direct download" ;;
    esac
    
    # „Éê„Éº„Ç∏„Éß„É≥ÊØîËºÉ„Å®„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂà§Êñ≠
    local status_message="No update needed"
    local update_required=false
    
    if [ "$local_version" = "$dummy_version" ]; then
        update_required=true
    else
        version_is_newer "$remote_version" "$local_version"
        [ $? -eq 0 ] && update_required=true
    fi
    
    debug_log "DEBUG" "Remote version: $file_name - $clean_remote_version"
    debug_log "DEBUG" "Local version: $file_name - $clean_local_version"
    debug_log "DEBUG" "Update required: $file_name -$(printf "%s" "$update_required")"
    
    if [ "$update_required" = "true" ]; then
        # „Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
        if ! $BASE_WGET "$install_path" "$remote_url"; then
            debug_log "ERROR" "Download failed: $file_name is empty"
            return 1
        fi
        
        # „Éï„Ç°„Ç§„É´Ê§úË®º
        if [ ! -s "$install_path" ]; then
            debug_log "ERROR" "Download failed: $file_name is empty"
            return 1
        fi
        
        # Ê®©ÈôêË®≠ÂÆö
        if [ "$chmod_mode" = "true" ]; then
            chmod +x "$install_path"
            debug_log "DEBUG" "chmod +x applied to $file_name"
        fi
        
    	# „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆÊõ¥Êñ∞
    	if [ ! -f "$script_file" ]; then
            printf "%s=%s\n" "${file_name}" "${clean_remote_version}" > "$script_file"
    	else
            if grep -q "^${file_name}=" "$script_file"; then
                # „Ç®„Çπ„Ç±„Éº„ÉóÂá¶ÁêÜ„ÇíÊîπËâØ
                escaped_file=$(echo "$file_name" | sed 's/[\/&]/\\&/g')
                escaped_version=$(echo "$clean_remote_version" | sed 's/[\/&]/\\&/g')
                sed -i "s/^${escaped_file}=.*/${escaped_file}=${escaped_version}/" "$script_file"
            else
                printf "%s=%s\n" "${file_name}" "${clean_remote_version}" >> "$script_file"
            fi
        fi
    
        # „Çπ„ÉÜ„Éº„Çø„Çπ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ‰øÆÊ≠£
        status_message="Download completed"
    fi
    
    # Ë™≠„ÅøËæº„ÅøÂá¶ÁêÜ
    local action_message=""
    if [ "$read_mode" = "true" ] || [ "${file_name%.sh}" != "$file_name" ]; then
        . "$install_path"
        action_message="Loaded"
        debug_log "DEBUG" "read applied to $file_name"
    fi
    
    # Âá∫Âäõ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ‰øÆÊ≠£
    local message="${file_name}: ${status_message} - Version: ${clean_remote_version} ${auth_message}"
    if [ -n "$action_message" ]; then
        message="${message} (${action_message})"
    fi

    # Âá∫Âäõ
    if [ "$hidden_mode" = "true" ]; then
        debug_log "DEBUG" "$(color blue "Quiet mode ${message}")"
        
    else
        echo -e "$(color green "${message}")"
    fi
    
    return 0
}

# üî¥„ÄÄ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

# üîµ„ÄÄ„É°„Ç§„É≥„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------
#########################################################################
# „Éê„Éä„ÉºË°®Á§∫
#########################################################################
print_banner() {
    echo
    color magenta "                    ii i"
    color blue    "         aaaa      iii       oooo      sssss"
    color cyan    "            aa      ii      oo  oo    ss"
    color green   "         aaaaa      ii      oo  oo     sssss"
    color yellow  "        aa  aa      ii      oo  oo         ss"
    color red     "         aaaaa     iiii      oooo     ssssss"
    echo
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
}

#########################################################################
# aios„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥Âá¶ÁêÜ„Å®„É¢„Éº„ÉâÂà∂Âæ°
#########################################################################

# „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥„Ç™„Éó„Ç∑„Éß„É≥Ëß£Êûê„ÉªÊ≠£Ë¶èÂåñÈñ¢Êï∞
check_option() {
    echo "$(color magenta "check_option received before args: $*")"

    # „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÅÆË®≠ÂÆö
    ORIGINAL_ARGS="$@" 
    SELECTED_LANGUAGE=""
    DEBUG_MODE="false"
    DEBUG_LEVEL="INFO"
    DRY_RUN="false"
    LOGFILE=""
    FORCE="false"
    RESET="false"
    HELP="false"

    # Ë®ÄË™û„Åä„Çà„Å≥„Ç™„Éó„Ç∑„Éß„É≥ÂºïÊï∞„ÅÆÂá¶ÁêÜ
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--h|-help|--help|-\?|--\?)
                HELP="true"
                print_help
                exit 0
                ;;
            -v|--v|-version|--version)
                script_version
                exit 0
                ;;
            -d|--d|-debug|--debug|-d1|--d1)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG"
                ;;
            -d2|--d2|-debug2|--debug2)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG2"
                ;;
            -cf|--cf|-common_full|--common_full)
                MODE="full"
                ;;
            -cl|--cl|-ocommon_light|--ocommon_light)
                MODE="light"
                ;;
            -cd|--cd|-common_debug|--common_debug|--ocommon_debug)
                MODE="debug"
                ;;
            -r|--r|-reset|--reset|-resrt|--resrt)
                MODE="reset"
                RESET="true"
                ;;
            -f|--f|-force|--force)
                FORCE="true"
                ;;
            -dr|--dr|-dry-run|--dry-run)
                DRY_RUN="true"
                ;;
            -l|--l|-logfile|--logfile)
                if [ -n "$2" ] && [ "${2#-}" = "$2" ]; then
                    LOGFILE="$2"
                    shift
                else
                    echo "Error: --logfile requires a path argument"
                    exit 1
                fi
                ;;
            -u|--u|-update|--update)
                debug_log "DEBUG" "check_option: aios update"
                check_update "$ORIGINAL_ARGS"
                ;;
            -t|--t|-token|--token)
                setup_github_token
                ;;
            -ts|--ts|--token-status)
                check_token_status
                exit 0
                ;;
            -test_api)
                $BASE_WGET "${BASE_DIR}/github_api_test.sh" "${BASE_URL}/github_api_test.sh"
                chmod +x "${BASE_DIR}/github_api_test.sh"
                sh "${BASE_DIR}/github_api_test.sh"
                exit 0
                ;;
            -*)
                echo "Warning: Unknown option: $1" >&2
                ;;
            *)
                if [ -z "$SELECTED_LANGUAGE" ]; then
                    SELECTED_LANGUAGE="$1"
                fi
                ;;
        esac
        shift
    done

    # Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
    export SELECTED_LANGUAGE DEBUG_MODE DEBUG_LEVEL MODE DRY_RUN LOGFILE FORCE RESET HELP

    # „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂá∫Âäõ
    debug_log "DEBUG" "check_option: MODE=$MODE, SELECTED_LANGUAGE=$SELECTED_LANGUAGE"
    debug_log "DEBUG" "check_option: DEBUG_MODE=$DEBUG_MODE, DEBUG_LEVEL=$DEBUG_LEVEL"
    debug_log "DEBUG" "check_option: DRY_RUN=$DRY_RUN, LOGFILE=$LOGFILE"
    debug_log "DEBUG" "check_option: FORCE=$FORCE, RESET=$RESET, HELP=$HELP"

    # Ë®≠ÂÆö„Åï„Çå„ÅüË®ÄË™û„Çí `check_common()` „Å´Ê∏°„Åô
    check_common "$SELECTED_LANGUAGE" "$MODE"
}

#########################################################################
# Last Update: 2025-02-16 21:45:00 (JST) üöÄ
# "Ensuring seamless updates, one script at a time."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `download_script()` „Çí `download()` „Å´Áµ±Âêà„Åó„ÄÅ‰∏ÄË≤´ÊÄß„ÇíÁ¢∫‰øù„Åô„Çã„ÄÇ
# 2. `debug_log()` „ÇíÂº∑Âåñ„Åó„ÄÅ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁä∂Ê≥Å„ÇíË©≥Á¥∞„Å´Ë®òÈå≤„ÄÇ
# 3. `download()` „ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÇíË¶ãÁõ¥„Åó„ÄÅÂ§±ÊïóÊôÇ„ÅÆÊåôÂãï„ÇíÊîπÂñÑ„ÄÇ
# 4. `openwrt.db`, `messages.db`, `country.db`, `packages.db` „ÇíÈÅ©Âàá„Å´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÄÇ
# 5. ÂΩ±ÈüøÁØÑÂõ≤: `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
# „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥Âá¶ÁêÜ„Å®„É¢„Éº„Éâ„Å´Âü∫„Å•„Åè„Ç¢„ÇØ„Ç∑„Éß„É≥ÈÅ∏Êäû
check_common() {
    local lang_code="$1"
    local mode="$2"

    debug_log "DEBUG" "check_common: MODE=$MODE"
    debug_log "DEBUG" "check_common: mode=$mode"

    mode="${MODE:-full}"

    # „É¢„Éº„Éâ„Åî„Å®„ÅÆÂá¶ÁêÜ
    case "$mode" in
        reset)
            rm -f "${CACHE_DIR}"
            echo "$(get_message "MSG_RESET_COMPLETE")"
            exit 0
            ;;
        return)
            rm -f "${CACHE_DIR}"
            select_country
            ;;
        debug)
            download "dynamic-system-info.sh" "hidden" "chmod"
            download "common-country.sh" "hidden" "chmod"
            download "common-package.sh" "hidden" "chmod"
            download "common-feed-package.sh" "hidden" "chmod"
            download "messages.db" "hidden"
            download "country.db" "hidden"
            download "local-package.db" "hidden"
            download "custom-package.db" "hidden"
            print_banner       
            select_country "$lang_code"
            download "system-config.sh" "hidden" "chmod"
            #packages
            ;;
        full)
            download "dynamic-system-info.sh" "chmod" "read"
            download "common-country.sh" "chmod" "read"
            download "common-package.sh" "chmod" "read"
            download "common-feed-package.sh" "chmod" "read"
            download "messages.db"
            download "country.db"
            download "local-package.db"
            download "custom-package.db"
            print_banner        
            select_country "$lang_code"
            download "system-config.sh" "chmod" "read"
            #packages
            ;;
        light)
            ;;
        *)
            ;;
    esac
    
    return 0
}

#########################################################################
# aiosÂàùÊúüÂåñ„Å®„Ç∑„Çπ„ÉÜ„É†„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÈñ¢ÈÄ£Èñ¢Êï∞
#########################################################################

# ÂÆüË°åÊ®©Èôê„ÅÆË®≠ÂÆö
chmod_aios() {
    echo "$(color magenta "Setting permissions for $BIN_PATH")"

    if ! chmod +x "$BIN_PATH"; then
        debug_log "ERROR" "Failed to set execute permission"
        return 1
    fi
    return 0
}

# „Éá„Ç£„É¨„ÇØ„Éà„É™ÂâäÈô§Âá¶ÁêÜ
delete_aios() {
    debug_log "ERROR" "Deleting $BASE_DIR"
    if ! rm -rf "${BASE_DIR}"; then
        debug_log "ERROR" "Failed to delete $BASE_DIR"
        return 1
    fi
    return 0
}

# ÂøÖË¶Å„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
make_directory() {
    echo "$(color magenta "Creating required directories")"

    if ! mkdir -p "${BASE_DIR}" "$CACHE_DIR" "$LOG_DIR" "$FEED_DIR"; then
        debug_log "ERROR" "Failed to create required directories"
        return 1
    fi
}

# „Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁä∂ÊÖãÁ¢∫Ë™ç
check_update() {
    echo "$(color magenta "Execution of update")"

    # ÂÖ®ÂºïÊï∞„ÇíÂá¶ÁêÜ
    local all_args="$*"
    
    # „Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÈñ¢ÈÄ£„Ç™„Éó„Ç∑„Éß„É≥„ÅÆ„Åø„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    local filtered_args=""
    for arg in $all_args; do
        case "$arg" in
            -u|--u|-update|--update)
                # „Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÈñ¢ÈÄ£„Ç™„Éó„Ç∑„Éß„É≥„ÅØÈô§Â§ñ
                ;;
            *)
                # „Åù„ÅÆ‰ªñ„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„ÅØ‰øùÊåÅ
                filtered_args="$filtered_args $arg"
                ;;
        esac
    done
    
    debug_log "DEBUG" "Original args: $all_args"
    debug_log "DEBUG" "Filtered args: $filtered_args"
    
    # „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÆüË°å
    download "aios" "hidden" "chmod"
    
    # „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÁßªÂãï„Åó„Å¶exec
    if [ -f "$BASE_DIR/$BIN_FILE" ]; then
        mv -f "$BASE_DIR/$BIN_FILE" "$BIN_PATH"
        exec "$BIN_PATH" $filtered_args
    fi

    MODE="full"
}

# ÂàùÊúüÂåñÂá¶ÁêÜ„ÅÆ„É°„Ç§„É≥
main() {
    # ÂÆüË°åÊ®©Èôê„ÇíË®≠ÂÆö
    if ! chmod_aios; then
        debug_log "ERROR" "Failed to set execute permission"
        return 1
    fi

    # ÂøÖË¶Å„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
    if ! make_directory; then
        debug_log "ERROR" "Failed to create required directories"
        return 1
    fi
    
    check_option "$@"
}

# üî¥„ÄÄ„É°„Ç§„É≥„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

# „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
main "$@"
