#!/bin/sh

SCRIPT_VERSION="2025.02.22-00-06"

# =========================================================
# 📌 OpenWrt / Alpine Linux POSIX-Compliant Shell Script
# 🚀 Last Update: 2025-02-21
#
# 🏷️ License: CC0 (Public Domain)
# 🎯 Compatibility: OpenWrt >= 19.07 (Tested on 24.10.0)
#
# ⚠️ IMPORTANT NOTICE:
# OpenWrt OS exclusively uses **Almquist Shell (ash)** and
# is **NOT** compatible with Bourne-Again Shell (bash).
#
# 📢 POSIX Compliance Guidelines:
# ✅ Use `[` instead of `[[` for conditions
# ✅ Use `$(command)` instead of backticks `` `command` ``
# ✅ Use `$(( ))` for arithmetic instead of `let`
# ✅ Define functions as `func_name() {}` (no `function` keyword)
# ✅ No associative arrays (`declare -A` is NOT supported)
# ✅ No here-strings (`<<<` is NOT supported)
# ✅ No `-v` flag in `test` or `[[`
#
# 🛠️ Keep it simple, POSIX-compliant, and lightweight for OpenWrt!
# =========================================================
# aios (エントリースクリプト)

echo -e "\033[7;40mUpdated to version $SCRIPT_VERSION aios \033[0m"

DEV_NULL="${DEV_NULL:-on}"
BASE_WGET="${BASE_WGET:-wget -q -O}"
BIN_PATH="/usr/bin/aios"

BASE_URL="${BASE_URL:-https://raw.githubusercontent.com/site-u2023/aios/main}"
BASE_DIR="${BASE_DIR:-/tmp/aios}"

COMMON_SH="$BASE_DIR/common.sh"
CACHE_DIR="${CACHE_DIR:-$BASE_DIR/cache}"
LOG_DIR="${LOG_DIR:-$BASE_DIR/logs}"
DEBUG_MODE="${DEBUG_MODE:-false}"

# 権限設定
chmod_aios() {
    chmod +x "$BIN_PATH"
}

# 初期化処理
delete_aios() {
    rm -rf "${BASE_DIR}"
}

# 必要ディレクトリ作成
make_directory() {
    mkdir -p "$BASE_DIR" "$CACHE_DIR" "$LOG_DIR"
}

# `common.sh` のダウンロード & 読み込み
download_common() {
    if [ ! -f "${BASE_DIR}/common.sh" ]; then
        ${BASE_WGET} "${BASE_DIR}/common.sh" "${BASE_URL}/common.sh" || {
            echo "Failed to download common.sh"
            exit 1
        }
    fi
    source "${BASE_DIR}/common.sh" || {
        echo "Failed to source common.sh"
        exit 1
    }
}

# バナー表示
print_banner() {
    echo
    color magenta "                    ii i"
    color blue    "         aaaa      iii       oooo      sssss"
    color cyan    "            aa      ii      oo  oo    ss"
    color green   "         aaaaa      ii      oo  oo     sssss"
    color yellow  "        aa  aa      ii      oo  oo         ss"
    color red     "         aaaaa     iiii      oooo     ssssss"
    echo

    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
}

print_banner_matrix() {
    clear
    local banner_text="
                    ii i
         aaaa      iii       oooo      sssss
            aa      ii      oo  oo    ss
         aaaaa      ii      oo  oo     sssss
        aa  aa      ii      oo  oo         ss
         aaaaa     iiii      oooo     ssssss
    "

    local delay=200000  # 文字が落ちる速度 (usleep の単位: マイクロ秒)
    local i=0

    echo "$banner_text" | while IFS= read -r line; do
        tput cup $(expr "$i" + 3) 10  # 画面の適当な位置から開始
        echo "$(color green "$line")"
        usleep "$delay"
        i=$(expr "$i" + 1)
    done

    echo
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
}

print_banner_wave() {
    clear
    local banner_text="
                    ii i
         aaaa      iii       oooo      sssss
            aa      ii      oo  oo    ss
         aaaaa      ii      oo  oo     sssss
        aa  aa      ii      oo  oo         ss
         aaaaa     iiii      oooo     ssssss
    "

    local delay=200000  # 揺れるスピード (usleep の単位: マイクロ秒)
    local wave=0

    while [ "$wave" -lt 3 ]; do  # 3回揺らす
        clear
        local i=0
        local offset=$(expr \( "$wave" % 2 \) \* 2)  # 偶数回は右、奇数回は左にズラす

        echo "$banner_text" | while IFS= read -r line; do
            tput cup $(expr "$i" + 3) $(expr 10 + "$offset")
            echo "$(color blue "$line")"
            i=$(expr "$i" + 1)
        done

        usleep "$delay"
        wave=$(expr "$wave" + 1)
    done

    echo
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
}

print_banner_fadein() {
    clear
    local banner_text="
                    ii i
         aaaa      iii       oooo      sssss
            aa      ii      oo  oo    ss
         aaaaa      ii      oo  oo     sssss
        aa  aa      ii      oo  oo         ss
         aaaaa     iiii      oooo     ssssss
    "

    local delay=200000  # フェードインの間隔 (usleep の単位: マイクロ秒)
    local i=0

    echo "$banner_text" | while IFS= read -r line; do
        usleep "$delay"
        echo "$(color cyan "$line")"
        i=$(expr "$i" + 1)
    done

    echo
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
}

# パッケージのインストール (オプション)
packages() {
    # 他のパッケージのインストール
    install_package ttyd yn hidden
    install_package luci-app-ttyd yn hidden
    install_package openssh-sftp-server yn hidden

    # uconv のインストール
    install_build uconv yn
    install_build luci-app-cpu-status yn
}

# メイン処理
chmod_aios
delete_aios
make_directory
download_common
check_option "$@"
print_banner
#print_banner_matrix
#print_banner_wave
#print_banner_fadein
packages
# download openwrt-config.sh
