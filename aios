#!/bin/sh

SCRIPT_VERSION="2025.03.14-00-00"

# =========================================================
# üìå OpenWrt / Alpine Linux POSIX-Compliant Shell Script
# üöÄ Last Update: 2025-02-21
#
# üè∑Ô∏è License: CC0 (Public Domain)
# üéØ Compatibility: OpenWrt >= 19.07 (Tested on 24.10.0)
#
# ‚ö†Ô∏è IMPORTANT NOTICE:
# OpenWrt OS exclusively uses **Almquist Shell (ash)** and
# is **NOT** compatible with Bourne-Again Shell (bash).
#
# üì¢ POSIX Compliance Guidelines:
# ‚úÖ Use `[` instead of `[[` for conditions
# ‚úÖ Use $(command) instead of backticks `command`
# ‚úÖ Use $(( )) for arithmetic instead of let
# ‚úÖ Define functions as func_name() {} (no function keyword)
# ‚úÖ No associative arrays (declare -A is NOT supported)
# ‚úÖ No here-strings (<<< is NOT supported)
# ‚úÖ No -v flag in test or [[
# ‚úÖ Avoid bash-specific string operations like ${var:0:3}
# ‚úÖ Avoid arrays entirely when possible (even indexed arrays can be problematic)
# ‚úÖ Use printf followed by read instead of read -p
# ‚úÖ Use printf instead of echo -e for portable formatting
# ‚úÖ Avoid process substitution <() and >()
# ‚úÖ Prefer case statements over complex if/elif chains
# ‚úÖ Use command -v instead of which or type for command existence checks
# ‚úÖ Keep scripts modular with small, focused functions
# ‚úÖ Use simple error handling instead of complex traps
# ‚úÖ Test scripts with ash/dash explicitly, not just bash
#
# üõ†Ô∏è Keep it simple, POSIX-compliant, and lightweight for OpenWrt!
### =========================================================
### üìå AI Assistance Request: POSIX-Compliant Debugging Guide
### 
### When debugging or fixing errors in this POSIX shell script:
### 
### 1Ô∏è‚É£ Create a minimal reproducible test case (avoid bash features)
### 2Ô∏è‚É£ Test with ash/dash explicitly: dash ./test.sh
### 3Ô∏è‚É£ Use portable debugging methods: echo, printf, or set -x
### 4Ô∏è‚É£ Validate fixes against all POSIX compliance guidelines
### 5Ô∏è‚É£ Ensure the solution works in resource-constrained OpenWrt
### 
### ‚ö†Ô∏è IMPORTANT:
### - Avoid suggesting bash-specific solutions
### - Always test fixes with ash/dash before implementation
### - Prefer simple solutions over complex ones
### - Do not modify production code without test verification
### 
### üõ†Ô∏è Keep debugging simple, focused, and POSIX-compliant!
### =========================================================

DEV_NULL="${DEV_NULL:-on}"
# „Çµ„Ç§„É¨„É≥„Éà„É¢„Éº„Éâ
# export DEV_NULL="on"
# ÈÄöÂ∏∏„É¢„Éº„Éâ
# unset DEV_NULL

# Âü∫Êú¨ÂÆöÊï∞„ÅÆË®≠ÂÆö 
BASE_WGET="${BASE_WGET:-wget --no-check-certificate -q -O}"
# BASE_WGET="${BASE_WGET:-wget -O}"
DEBUG_MODE="${DEBUG_MODE:-false}"
BIN_PATH=$(readlink -f "$0")
BIN_DIR="$(dirname "$BIN_PATH")"
BIN_FILE="$(basename "$BIN_PATH")"
BASE_URL="${BASE_URL:-https://raw.githubusercontent.com/site-u2023/aios/main}"
BASE_DIR="${BASE_DIR:-/tmp/aios}"
CACHE_DIR="${CACHE_DIR:-$BASE_DIR/cache}"
FEED_DIR="${FEED_DIR:-$BASE_DIR/feed}"
LOG_DIR="${LOG_DIR:-$BASE_DIR/logs}"
UPDATE_CACHE="${CACHE_DIR}/update.ch"
GITHUB_TOKEN_FILE="/etc/aios_token"

# üîµ„ÄÄ„Ç®„É©„Éº„Éª„Éá„Éê„ÉÉ„Ç∞„Éª„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ-------------------------------------------------------------------------------------------------------------------------------------------

handle_error() {
    local error_key="$1"
    local file="$2"
    local version="$3"
    local exit_required="${4:-no}"

    local error_message
    error_message=$(get_message "$error_key")

    # „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂèñÂæó„Åß„Åç„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
    if [ -z "$error_message" ]; then
        error_message="Unknown error occurred. Key: $error_key"
    fi

    # Â§âÊï∞„ÇíÁΩÆÊèõ
    error_message=$(echo "$error_message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # „É≠„Ç∞Ë®òÈå≤ & Ë°®Á§∫
    debug_log "ERROR" "$error_message"
    echo -e "$(color red "$error_message")"

    if [ "$exit_required" = "yes" ]; then
        debug_log "ERROR" "Critical error occurred, exiting: $error_message"
        exit 1
    else
        debug_log "DEBUG" "Non-critical error: $error_message"
        return 1
    fi
}

debug_log() {
    local level="$1"
    local message="$2"
    local file="$3"
    local version="$4"

    # `$1` „Å´„É≠„Ç∞„É¨„Éô„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÄÅ„Éá„Éï„Ç©„É´„Éà„Çí `DEBUG` „Å´„Åô„Çã
    case "$level" in
        "DEBUG"|"INFO"|"WARN"|"ERROR") ;;  # ‰Ωï„ÇÇ„Åó„Å™„ÅÑ (Ê≠£„Åó„ÅÑ„É≠„Ç∞„É¨„Éô„É´)
        "")
            level="DEBUG"
            message="$1"
            file="$2"
            version="$3"
            ;;
        *)
            message="$1"
            file="$2"
            version="$3"
            level="DEBUG"
            ;;
    esac

    # „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆ„ÇØ„É™„Éº„Éã„É≥„Ç∞Ôºà„É°„ÉÉ„Çª„Éº„Ç∏„Å´„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅåÂê´„Åæ„Çå„ÇãÂ†¥ÂêàÔºâ
    if echo "$message" | grep -q "version\|Version"; then
        # „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±ÈÉ®ÂàÜ„ÇíÊäΩÂá∫„Åó„Å¶„ÇØ„É™„Éº„Éã„É≥„Ç∞
        local cleaned_message="$message"
        # aios - [2025-03-10... „ÅÆ„Çà„ÅÜ„Å™„Éë„Çø„Éº„É≥„ÇíÊ§úÂá∫
        if echo "$message" | grep -q " - "; then
            local prefix=$(echo "$message" | sed 's/ - .*//')
            local version_part=$(echo "$message" | sed 's/.* - //')
            
            # clean_version_stringÈñ¢Êï∞„ÇíÂëº„Å≥Âá∫„Åó
            local cleaned_version=$(clean_version_string "$version_part")
            
            cleaned_message="$prefix - $cleaned_version"
        fi
        message="$cleaned_message"
    fi

    # Â§âÊï∞„ÇíÁΩÆÊèõ
    message=$(echo "$message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # „É≠„Ç∞„É¨„Éô„É´Âà∂Âæ°
    case "$DEBUG_LEVEL" in
        DEBUG)    allowed_levels="DEBUG INFO WARN ERROR" ;;
        INFO)     allowed_levels="INFO WARN ERROR" ;;
        WARN)     allowed_levels="WARN ERROR" ;;
        ERROR)    allowed_levels="ERROR" ;;
        *)        allowed_levels="ERROR" ;;
    esac

    if echo "$allowed_levels" | grep -q "$level"; then
        local timestamp
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        local log_message="[$timestamp] $level: $message"

        # „Ç´„É©„ÉºË°®Á§∫
        case "$level" in
            "ERROR") echo -e "$(color red "$log_message")" ;;
            "WARN") echo -e "$(color yellow "$log_message")" ;;
            "INFO") echo -e "$(color cyan "$log_message")" ;;
            "DEBUG") echo -e "$(color white "$log_message")" ;;
        esac

        # „É≠„Ç∞„Éï„Ç°„Ç§„É´„Å´Ë®òÈå≤
        if [ "$AIOS_INITIALIZED" = "true" ]; then
            echo "$log_message" >> "$LOG_DIR/debug.log"
        fi
    fi
}

handle_exit() {
    local message="$1"
    color yellow "$message"
    exit 0
}

# üî¥„ÄÄ„Ç®„É©„Éº„Éª„Éá„Éê„ÉÉ„Ç∞„Éª„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥-------------------------------------------------------------------------------------------------------------------------------------------

print_help() {
    printf "%s\n\n" "$(get_message "MSG_HELP_USAGE")"
    
    printf "%s\n" "$(get_message "MSG_HELP_OPTIONS_HEADER")"
    printf "  %-25s %s\n" "-h, --help" "$(get_message "MSG_HELP_HELP")"
    printf "  %-25s %s\n" "-v, --version" "$(get_message "MSG_HELP_VERSION")"
    printf "  %-25s %s\n" "-r, --reset" "$(get_message "MSG_HELP_RESET")"
    printf "  %-25s %s\n" "-d, --debug" "$(get_message "MSG_HELP_DEBUG")"
    printf "  %-25s %s\n" "-u, --update" "$(get_message "MSG_HELP_UPDATE")"
    printf "  %-25s %s\n" "-f, --force" "$(get_message "MSG_HELP_FORCE")"
    printf "  %-25s %s\n" "-t, --token" "$(get_message "MSG_HELP_TOKEN")"
    printf "  %-25s %s\n" "-cf, --common_full" "$(get_message "MSG_HELP_FULL")"
    printf "  %-25s %s\n" "-cl, --common_light" "$(get_message "MSG_HELP_LIGHT")"
    printf "  %-25s %s\n" "-cd, --common_debug" "$(get_message "MSG_HELP_COMMON_DEBUG")"
    printf "  %-25s %s\n" "-dr, --dry-run" "$(get_message "MSG_HELP_DRY_RUN")"
    
    printf "\n%s\n" "$(get_message "MSG_HELP_LANGUAGE_HEADER")"
    printf "  %-25s %s\n" "ja, en, zh-cn, ..." "$(get_message "MSG_HELP_LANGUAGE")"
    
    printf "\n%s\n" "$(get_message "MSG_HELP_EXAMPLES_HEADER")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE1")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE2")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE3")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE4")"
    
    printf "\n%s\n" "$(get_message "MSG_HELP_DEBUG_HEADER")"
    printf "  %s\n" "$(get_message "MSG_HELP_DEBUG_STANDARD")"
    printf "  %s\n" "$(get_message "MSG_HELP_DEBUG_VERBOSE")"
}

color() {
    local color_code
    color_code=$(color_code_map "$1")
    shift
    # %b „Åß„Ç®„Çπ„Ç±„Éº„Éó„Ç∑„Éº„Ç±„É≥„Çπ„ÇíÂá¶ÁêÜ
    printf "%b%s%b" "$color_code" "$*" "$(color_code_map "reset")"
}

color_code_map() {
    local color="$1"
    case "$color" in
        "red") printf "\033[1;31m" ;;
        "green") printf "\033[1;32m" ;;
        "yellow") printf "\033[1;33m" ;;
        "blue") printf "\033[1;34m" ;;
        "magenta") printf "\033[1;35m" ;;
        "cyan") printf "\033[1;36m" ;;
        "white") printf "\033[1;37m" ;;
        "red_underline") printf "\033[4;31m" ;;
        "green_underline") printf "\033[4;32m" ;;
        "yellow_underline") printf "\033[4;33m" ;;
        "blue_underline") printf "\033[4;34m" ;;
        "magenta_underline") printf "\033[4;35m" ;;
        "cyan_underline") printf "\033[4;36m" ;;
        "white_underline") printf "\033[4;37m" ;;
        "red_white") printf "\033[1;41m" ;;
        "green_white") printf "\033[1;42m" ;;
        "yellow_white") printf "\033[1;43m" ;;
        "blue_white") printf "\033[1;44m" ;;
        "magenta_white") printf "\033[1;45m" ;;
        "cyan_white") printf "\033[1;46m" ;;
        "white_black") printf "\033[7;40m" ;;
        "reset") printf "\033[0m" ;;
        *) printf "\033[0m" ;;  # „Éá„Éï„Ç©„É´„Éà„Åß„É™„Çª„ÉÉ„Éà
    esac
}

load_language_file() {
    local lang_code="$1"
    local base_db="${BASE_DIR}/messages_base.db"
    
    debug_log "DEBUG" "Attempting to load language messages for code: ${lang_code}"
    
    # Âü∫Êú¨Ë®ÄË™û„Éï„Ç°„Ç§„É´„ÅØÂ∏∏„Å´„É≠„Éº„ÉâÔºàUS, JP„ÇíÂê´„ÇÄÔºâ
    if [ ! -f "$base_db" ]; then
        debug_log "ERROR" "Base language file not found: ${base_db}"
        return 1
    fi
    
    # Ë®ÄË™û„Ç≥„Éº„Éâ„Å´Âü∫„Å•„ÅÑ„Å¶ËøΩÂä†„Éï„Ç°„Ç§„É´„Çí„É≠„Éº„Éâ
    case "$lang_code" in
        US|JP)
            # Âü∫Êú¨„Éï„Ç°„Ç§„É´„ÅÆ„Åø„ÅßÂçÅÂàÜ
            debug_log "INFO" "Using base language file only for ${lang_code}"
            ;;
        CN|TW|KO)
            # „Ç¢„Ç∏„Ç¢Ë®ÄË™û„Éï„Ç°„Ç§„É´„ÅåÂøÖË¶Å
            local asian_db="${BASE_DIR}/messages_asian.db"
            if [ -f "$asian_db" ]; then
                debug_log "INFO" "Loading additional Asian language file for ${lang_code}"
            else
                debug_log "WARNING" "Asian language file not found, falling back to base messages"
            fi
            ;;
        DE|FR|RU)
            # „É®„Éº„É≠„ÉÉ„ÉëË®ÄË™û„Éï„Ç°„Ç§„É´„ÅåÂøÖË¶Å
            local euro_db="${BASE_DIR}/messages_euro.db"
            if [ -f "$euro_db" ]; then
                debug_log "INFO" "Loading additional European language file for ${lang_code}"
            else
                debug_log "WARNING" "European language file not found, falling back to base messages"
            fi
            ;;
        *)
            # ‰∏çÊòé„Å™Ë®ÄË™û„Ç≥„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØUS„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
            debug_log "WARNING" "Unknown language code: ${lang_code}, falling back to US"
            lang_code="US"
            ;;
    esac
    
    debug_log "DEBUG" "Language files loaded successfully for ${lang_code}"
    return 0
}

# „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
get_message() {
    local key="$1"
    local default_msg="$2"  # „Éá„Éï„Ç©„É´„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÔºàÁúÅÁï•ÂèØÔºâ
    local lang=""
    local db_file=""
    
    # „Ç≠„É£„ÉÉ„Ç∑„É•„Åã„Çâ„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™Ë®ÄË™û„Å®DB„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
    if [ -f "${CACHE_DIR}/message.ch" ]; then
        lang=$(cat "${CACHE_DIR}/message.ch")
    else
        lang="US"  # „Éá„Éï„Ç©„É´„ÉàË®ÄË™û
    fi
    
    if [ -f "${CACHE_DIR}/message_db.ch" ]; then
        db_file=$(cat "${CACHE_DIR}/message_db.ch")
    else
        db_file="${BASE_DIR}/messages_base.db"  # „Éá„Éï„Ç©„É´„ÉàDB
    fi
    
    debug_log "DEBUG" "get_message: key=${key}, language=${lang}, db_file=${db_file}"
    
    # ÊåáÂÆö„Åï„Çå„ÅüDB„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
    if [ ! -f "$db_file" ]; then
        debug_log "ERROR" "Message DB file not found: ${db_file}"
        if [ -n "$default_msg" ]; then
            echo "$default_msg"
        else
            echo "$key"  # „Ç≠„Éº„Çí„Åù„ÅÆ„Åæ„ÅæËøî„Åô
        fi
        return 1
    fi

    # DB„Åã„Çâ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊ§úÁ¥¢
    local message=""
    message=$(grep "^${lang}|${key}=" "$db_file" 2>/dev/null | cut -d'=' -f2-)
    
    # Ë®ÄË™ûÂõ∫Êúâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà
    if [ -z "$message" ]; then
        # Ëã±Ë™û„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊ§úÁ¥¢
        message=$(grep "^US|${key}=" "$db_file" 2>/dev/null | cut -d'=' -f2-)
        
        # „Åù„Çå„Åß„ÇÇË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÂü∫Êú¨DB„ÅßÂÜçÊ§úÁ¥¢
        if [ -z "$message" ] && [ "$db_file" != "${BASE_DIR}/messages_base.db" ]; then
            debug_log "DEBUG" "Message not found in specialized DB, trying base DB"
            message=$(grep "^${lang}|${key}=" "${BASE_DIR}/messages_base.db" 2>/dev/null | cut -d'=' -f2-)
            
            if [ -z "$message" ]; then
                message=$(grep "^US|${key}=" "${BASE_DIR}/messages_base.db" 2>/dev/null | cut -d'=' -f2-)
            fi
        fi
    fi
    
    # „Åù„Çå„Åß„ÇÇË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„Éà„Åã„Ç≠„Éº„ÇíËøî„Åô
    if [ -z "$message" ]; then
        debug_log "WARNING" "Message not found for key: ${key}"
        if [ -n "$default_msg" ]; then
            message="$default_msg"
        else
            message="$key"  # „Ç≠„Éº„Çí„Åù„ÅÆ„Åæ„ÅæËøî„Åô
        fi
    fi
    
    echo "$message"
    return 0
}

# ÂÖ®ËßíÊñáÂ≠ó„ÇíÂçäËßíÊñáÂ≠ó„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞
normalize_input() {
    local input="$1"
    local output="$input"
    
    debug_log "DEBUG" "Starting character normalization for input text"
    
    # Â§âÊèõ„ÉÜ„Éº„Éñ„É´ÔºàÂêÑË°å„ÅØsed„Ç≥„Éû„É≥„Éâ„ÅÆË≤†Ëç∑„ÇíÂàÜÊï£„Åô„Çã„Åü„ÇÅÂàÜÂâ≤Ôºâ
    
    # Êï∞Â≠óÔºà0-9Ôºâ: Êó•Êú¨Ë™û„ÄÅ‰∏≠ÂõΩË™ûÔºàÁ∞°‰ΩìÂ≠ó„ÉªÁπÅ‰ΩìÂ≠óÔºâ„ÄÅÈüìÂõΩË™û„ÅßÂÖ±ÈÄö
    output=$(echo "$output" | sed 's/Ôºê/0/g; s/Ôºë/1/g; s/Ôºí/2/g; s/Ôºì/3/g; s/Ôºî/4/g')
    output=$(echo "$output" | sed 's/Ôºï/5/g; s/Ôºñ/6/g; s/Ôºó/7/g; s/Ôºò/8/g; s/Ôºô/9/g')
    
    # „Ç¢„É´„Éï„Ç°„Éô„ÉÉ„ÉàÂ§ßÊñáÂ≠óÔºàA-ZÔºâ: ÂêÑÂõΩÂÖ±ÈÄö„ÅÆÂÖ®ËßíËã±Â≠ó
    output=$(echo "$output" | sed 's/Ôº°/A/g; s/Ôº¢/B/g; s/Ôº£/C/g; s/Ôº§/D/g; s/Ôº•/E/g')
    output=$(echo "$output" | sed 's/Ôº¶/F/g; s/Ôºß/G/g; s/Ôº®/H/g; s/Ôº©/I/g; s/Ôº™/J/g')
    output=$(echo "$output" | sed 's/Ôº´/K/g; s/Ôº¨/L/g; s/Ôº≠/M/g; s/ÔºÆ/N/g; s/ÔºØ/O/g')
    output=$(echo "$output" | sed 's/Ôº∞/P/g; s/Ôº±/Q/g; s/Ôº≤/R/g; s/Ôº≥/S/g; s/Ôº¥/T/g')
    output=$(echo "$output" | sed 's/Ôºµ/U/g; s/Ôº∂/V/g; s/Ôº∑/W/g; s/Ôº∏/X/g; s/Ôºπ/Y/g; s/Ôº∫/Z/g')
    
    # „Ç¢„É´„Éï„Ç°„Éô„ÉÉ„ÉàÂ∞èÊñáÂ≠óÔºàa-zÔºâ: ÂêÑÂõΩÂÖ±ÈÄö„ÅÆÂÖ®ËßíËã±Â≠ó
    output=$(echo "$output" | sed 's/ÔΩÅ/a/g; s/ÔΩÇ/b/g; s/ÔΩÉ/c/g; s/ÔΩÑ/d/g; s/ÔΩÖ/e/g')
    output=$(echo "$output" | sed 's/ÔΩÜ/f/g; s/ÔΩá/g/g; s/ÔΩà/h/g; s/ÔΩâ/i/g; s/ÔΩä/j/g')
    output=$(echo "$output" | sed 's/ÔΩã/k/g; s/ÔΩå/l/g; s/ÔΩç/m/g; s/ÔΩé/n/g; s/ÔΩè/o/g')
    output=$(echo "$output" | sed 's/ÔΩê/p/g; s/ÔΩë/q/g; s/ÔΩí/r/g; s/ÔΩì/s/g; s/ÔΩî/t/g')
    output=$(echo "$output" | sed 's/ÔΩï/u/g; s/ÔΩñ/v/g; s/ÔΩó/w/g; s/ÔΩò/x/g; s/ÔΩô/y/g; s/ÔΩö/z/g')
    
    # ‰∏ªË¶Å„Å™Ë®òÂè∑ÔºàÊó•Êú¨Ë™û„ÄÅ‰∏≠ÂõΩË™û„ÄÅÈüìÂõΩË™û„ÅßÂÖ±ÈÄö‰ΩøÁî®„Åï„Çå„ÇãË®òÂè∑Ôºâ
    output=$(echo "$output" | sed 's/„ÄÄ/ /g')  # ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ
    output=$(echo "$output" | sed 's/ÔºÅ/!/g; s/ÔºÇ/"/g; s/ÔºÉ/#/g; s/ÔºÑ/$/g; s/ÔºÖ/%/g')
    output=$(echo "$output" | sed 's/ÔºÜ/\&/g; s/Ôºá/'\''/g; s/Ôºà/(/g; s/Ôºâ/)/g; s/Ôºä/*/g')
    output=$(echo "$output" | sed 's/Ôºã/+/g; s/Ôºå/,/g; s/Ôºç/-/g; s/Ôºé/./g; s/Ôºè/\//g')
    
    # ‰∏ªË¶Å„Å™Ë®òÂè∑ÔºàÁ∂ö„ÅçÔºâ
    output=$(echo "$output" | sed 's/Ôºö/:/g; s/Ôºõ/;/g; s/Ôºú/</g; s/Ôºù/=/g; s/Ôºû/>/g')
    output=$(echo "$output" | sed 's/Ôºü/?/g; s/Ôº†/@/g; s/Ôºª/[/g; s/Ôºº/\\/g; s/ÔºΩ/]/g')
    output=$(echo "$output" | sed 's/Ôºæ/^/g; s/Ôºø/_/g; s/ÔΩÄ/`/g; s/ÔΩõ/{/g; s/ÔΩú/|/g')
    output=$(echo "$output" | sed 's/ÔΩù/}/g; s/ÔΩû/~/g')
    
    # ÈüìÂõΩË™ûÁâπÊúâ„ÅÆÂÖ®ËßíË®òÂè∑
    output=$(echo "$output" | sed 's/Ôø¶/\\/g; s/Ôø•/\\/g')
    
    # Â§âÊèõÂØæË±°Â§ñ„ÅÆÊñáÂ≠ó„ÅØ„Åù„ÅÆ„Åæ„ÅæÊÆã„ÅôÔºàÂºæ„Åã„Å™„ÅÑÔºâ
    
    debug_log "DEBUG" "Character normalization completed"
    echo "$output"
}

# Á¢∫Ë™çÂÖ•ÂäõÂá¶ÁêÜÈñ¢Êï∞
confirm() {
    local msg_key="$1"
    local param_name="$2"
    local param_value="$3"
    local direct_msg="$4"
    local msg=""
    local yn=""
    
    # „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂèñÂæó„Å®Â§âÊï∞ÁΩÆÊèõ
    if [ -n "$msg_key" ]; then
        msg=$(get_message "$msg_key")
        # „Éë„É©„É°„Éº„ÇøÂêç„Å®ÂÄ§„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÁΩÆÊèõ
        if [ -n "$param_name" ] && [ -n "$param_value" ]; then
            # POSIX„Å´Ê∫ñÊã†„Åó„ÅüÁΩÆÊèõÊñπÊ≥ïÔºà„Ç®„Çπ„Ç±„Éº„ÉóÂá¶ÁêÜ„ÇíËøΩÂä†Ôºâ
            local safe_value=$(echo "$param_value" | sed 's/[\/&]/\\&/g')
            msg=$(echo "$msg" | sed "s|{$param_name}|$safe_value|g")
        fi
    else
        # Áõ¥Êé•„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„Çí‰ΩøÁî®
        msg="$direct_msg"
    fi
    
    debug_log "DEBUG" "Confirm prompt: $msg_key: $msg"
    
    # Á¢∫Ë™ç„Éó„É≠„É≥„Éó„ÉàË°®Á§∫
    printf "%s " "$(color cyan "$msg")"
    
    # „É¶„Éº„Ç∂„ÉºÂÖ•ÂäõÂá¶ÁêÜ
    while true; do
        # read„Ç≥„Éû„É≥„Éâ„Ç®„É©„Éº„Çí„Éè„É≥„Éâ„É™„É≥„Ç∞
        if ! read -r yn; then
            debug_log "ERROR" "Failed to read user input"
            return 1
        fi
        
        # ÂÖ•Âäõ„ÅÆÊ≠£Ë¶èÂåñÔºàÊï∞Â≠ó„ÅÆ„ÅøÊ≠£Ë¶èÂåñ„Åó„ÄÅÂ§ßÊñáÂ≠óÂ∞èÊñáÂ≠ó„ÅØÂ§âÊèõ„Åó„Å™„ÅÑÔºâ
        yn=$(normalize_input "$yn")
        debug_log "DEBUG" "User input: $yn, normalized to: $yn"

        # ÂÖ•Âäõ„ÅÆÊ§úË®ºÔºàÂ§ßÊñáÂ≠óÂ∞èÊñáÂ≠ó‰∏°Êñπ„Å´ÂØæÂøúÔºâ
        case "$yn" in
            [Yy]|[Yy][Ee][Ss]) 
                debug_log "DEBUG" "User confirmed: Yes"
                # „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Å´ÁµêÊûú„Çí‰øùÂ≠òÔºàÂëº„Å≥Âá∫„ÅóÂÅ¥„Åß„ÇÇ‰Ωø„Åà„Çã„Çà„ÅÜ„Å´Ôºâ
                CONFIRM_RESULT="Y"
                return 0 
                ;;
            [Nn]|[Nn][Oo]) 
                debug_log "DEBUG" "User confirmed: No"
                CONFIRM_RESULT="N"
                return 1 
                ;;
            [Rr]|[Rr][Ee][Tt][Uu][Rr][Nn])
                # „É™„Çπ„Çø„Éº„Éà„Ç™„Éó„Ç∑„Éß„É≥ÂØæÂøú
                debug_log "DEBUG" "User selected: Return to previous step"
                CONFIRM_RESULT="R"
                return 2
                ;;
            *) 
                # ÁÑ°Âäπ„Å™ÂÖ•Âäõ„ÅÆÂ†¥Âêà„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
                printf "%s\n" "$(color red "$(get_message "MSG_INVALID_INPUT_YNR")")"
                printf "%s " "$(color cyan "$msg")" 
                ;;
        esac
    done
}

# üîµ„ÄÄ„Éà„Éº„ÇØ„É≥Á≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

github_api_request() {
    local endpoint="$1"
    local token=$(get_github_token)
    local response=""
    local auth_status="anonymous"
    
    # Ë™çË®º„Éà„Éº„ÇØ„É≥„Åå„ÅÇ„ÇãÂ†¥Âêà
    if [ -n "$token" ]; then
        # ÈÄöÂ∏∏„ÅÆHTTPS„É™„ÇØ„Ç®„Çπ„Éà„ÇíË©¶Ë°å
        debug_log "DEBUG" "Ë™çË®º‰ªò„ÅçHTTPS„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÆüË°å"
        response=$(wget -q --header="Authorization: token $token" \
            --header="Accept: application/vnd.github.v3+json" \
            -O- "https://api.github.com/$endpoint" 2>/dev/null)
            
        # ÊàêÂäü„Åó„ÅüÂ†¥Âêà
        if [ -n "$response" ] && ! echo "$response" | grep -q '"message":"Bad credentials"'; then
            auth_status="authenticated"
        else
            # Ë™çË®ºÂ§±ÊïóÊôÇ„Å´Ë®ºÊòéÊõ∏Ê§úË®º„Çπ„Ç≠„ÉÉ„Éó„ÅßÂÜçË©¶Ë°å
            debug_log "WARN" "ÈÄöÂ∏∏„É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó: Ë®ºÊòéÊõ∏Ê§úË®º„Çπ„Ç≠„ÉÉ„Éó„ÅßÂÜçË©¶Ë°å"
            response=$(wget --no-check-certificate -q \
                --header="Authorization: token $token" \
                --header="Accept: application/vnd.github.v3+json" \
                -O- "https://api.github.com/$endpoint" 2>/dev/null)
                
            if [ -n "$response" ] && ! echo "$response" | grep -q '"message":"Bad credentials"'; then
                auth_status="authenticated_nocert"
            else
                # Ë™çË®º„ÅåÂÆåÂÖ®„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØÂåøÂêç„É™„ÇØ„Ç®„Çπ„Éà„Å∏
                debug_log "WARN" "Ë™çË®ºÂ§±Êïó: ÂåøÂêç„É™„ÇØ„Ç®„Çπ„Éà„Å∏„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ"
                response=$(wget -q -O- "https://api.github.com/$endpoint" 2>/dev/null)
                
                # „Åù„Çå„ÇÇÂ§±Êïó„Åó„Åü„ÇâË®ºÊòéÊõ∏Ê§úË®º„Çπ„Ç≠„ÉÉ„Éó„ÅßÂåøÂêç„É™„ÇØ„Ç®„Çπ„Éà
                if [ -z "$response" ]; then
                    debug_log "WARN" "ÂåøÂêç„É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó: Ë®ºÊòéÊõ∏Ê§úË®º„Çπ„Ç≠„ÉÉ„Éó„ÅßÂÜçË©¶Ë°å"
                    response=$(wget --no-check-certificate -q \
                        -O- "https://api.github.com/$endpoint" 2>/dev/null)
                    auth_status="anonymous_nocert"
                else
                    auth_status="anonymous"
                fi
            fi
        fi
    else
        # „Éà„Éº„ÇØ„É≥„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂåøÂêç„É™„ÇØ„Ç®„Çπ„Éà
        response=$(wget -q -O- "https://api.github.com/$endpoint" 2>/dev/null)
        
        # Â§±Êïó„Åó„Åü„ÇâË®ºÊòéÊõ∏Ê§úË®º„Çπ„Ç≠„ÉÉ„Éó„ÅßÂÜçË©¶Ë°å
        if [ -z "$response" ]; then
            debug_log "WARN" "ÂåøÂêç„É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó: Ë®ºÊòéÊõ∏Ê§úË®º„Çπ„Ç≠„ÉÉ„Éó„ÅßÂÜçË©¶Ë°å"
            response=$(wget --no-check-certificate -q \
                -O- "https://api.github.com/$endpoint" 2>/dev/null)
            auth_status="anonymous_nocert"
        else
            auth_status="anonymous"
        fi
    fi
    
    # ÊúÄÁµÇÁµêÊûú„ÅÆÁ¢∫Ë™ç
    if [ -z "$response" ]; then
        debug_log "ERROR" "„Åô„Åπ„Å¶„ÅÆÊé•Á∂öÊñπÊ≥ï„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü"
        return 1
    fi
    
    echo "$response"
    echo "$auth_status" >&2
    return 0
}

get_github_token() {
    if [ -f "$GITHUB_TOKEN_FILE" ] && [ -r "$GITHUB_TOKEN_FILE" ]; then
        # ÂçòÁ¥î„Å´ÊîπË°å„Å†„ÅëÂâäÈô§„Åó„Åü„Éà„Éº„ÇØ„É≥„ÇíËøî„ÅôÔºà„Çà„ÇäÂ†ÖÁâ¢Ôºâ
        cat "$GITHUB_TOKEN_FILE" | tr -d '\n\r' | head -1
        return 0
    fi
    
    # Áí∞Â¢ÉÂ§âÊï∞„Åã„Çâ„ÅÆÂèñÂæó
    if [ -n "$GITHUB_TOKEN" ]; then
        echo "$GITHUB_TOKEN"
        return 0
    fi
    
    return 1
}

save_github_token() {
    token="$1"
    
    if [ -z "$token" ]; then
        debug_log "ERROR" "Empty token provided, cannot save"
        return 1
    fi
    
    # „Éà„Éº„ÇØ„É≥„Çí‰øùÂ≠ò„Åó„Å¶Ê®©Èôê„ÇíË®≠ÂÆö
    echo "$token" > "$GITHUB_TOKEN_FILE"
    chmod 600 "$GITHUB_TOKEN_FILE"
    
    if [ $? -eq 0 ]; then
        debug_log "INFO" "GitHub token saved to $GITHUB_TOKEN_FILE"
        return 0
    else
        debug_log "ERROR" "Failed to save token to $GITHUB_TOKEN_FILE"
        return 1
    fi
}

setup_github_token() {
    echo "GitHub API Token Setup"
    echo "======================"
    echo "This will save a GitHub Personal Access Token to $GITHUB_TOKEN_FILE"
    echo "The token will be used for API requests to avoid rate limits."
    echo ""
    
    # OpenWrt„ÅØstty„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑ„Åì„Å®„ÇíÂâçÊèê„Å®„Åô„Çã
    printf "Enter your GitHub Personal Access Token: "
    read -r token
    echo ""
    
    if [ -n "$token" ]; then
        if save_github_token "$token"; then
            echo "Token has been saved successfully!"
            echo "API requests will now use authentication."
        else
            echo "Failed to save token. Please check permissions."
        fi
    else
        echo "No token entered. Operation cancelled."
    fi

    return 0
}

save_github_token() {
    token="$1"
    
    if [ -z "$token" ]; then
        debug_log "ERROR" "Empty token provided, cannot save"
        return 1
    fi
    
    # „Éà„Éº„ÇØ„É≥„Çí‰øùÂ≠ò„Åó„Å¶Ê®©Èôê„ÇíË®≠ÂÆö
    echo "$token" > "$GITHUB_TOKEN_FILE"
    chmod 600 "$GITHUB_TOKEN_FILE"
    
    if [ $? -eq 0 ]; then
        debug_log "INFO" "GitHub token saved to $GITHUB_TOKEN_FILE"
        return 0
    else
        debug_log "ERROR" "Failed to save token to $GITHUB_TOKEN_FILE"
        return 1
    fi
}

setup_github_token() {
    echo "GitHub API Token Setup"
    echo "======================"
    echo "This will save a GitHub Personal Access Token to $GITHUB_TOKEN_FILE"
    echo "The token will be used for API requests to avoid rate limits."
    echo ""
    
    # OpenWrt„ÅØstty„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑ„Åì„Å®„ÇíÂâçÊèê„Å®„Åô„Çã
    printf "Enter your GitHub Personal Access Token: "
    read -r token
    echo ""
    
    if [ -n "$token" ]; then
        if save_github_token "$token"; then
            echo "Token has been saved successfully!"
            echo "API requests will now use authentication."
        else
            echo "Failed to save token. Please check permissions."
        fi
    else
        echo "No token entered. Operation cancelled."
    fi

    return 0
}

# üî¥„ÄÄ„Éà„Éº„ÇØ„É≥Á≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥-------------------------------------------------------------------------------------------------------------------------------------------


# üîµ„ÄÄ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

github_api_request() {
    local endpoint="$1"
    local token=$(get_github_token)
    local response=""
    
    if [ -n "$token" ]; then
        debug_log "DEBUG" "Attempting authenticated request with token (${#token} chars)"
        response=$(wget -q --header="Authorization: token $token" \
            --header="Accept: application/vnd.github.v3+json" \
            -O- "https://api.github.com/$endpoint" 2>/dev/null)
            
        # „É¨„Çπ„Éù„É≥„ÇπÊ§úË®º - „É™„Éü„ÉÉ„Éà„ÉÅ„Çß„ÉÉ„ÇØ
        if echo "$response" | grep -q '"message":"API rate limit exceeded'; then
            debug_log "WARN" "GitHub API rate limit exceeded"
            return 1
        fi
        
        # Ë™çË®º„Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ
        if echo "$response" | grep -q '"message":"Bad credentials"'; then
            debug_log "ERROR" "GitHub API authentication failed: Bad credentials"
            return 2
        fi
        
        # „Åù„ÅÆ‰ªñ„Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ
        if echo "$response" | grep -q '"message":"'; then
            local error_msg=$(echo "$response" | grep -o '"message":"[^"]*"' | cut -d':' -f2- | tr -d '"')
            debug_log "ERROR" "GitHub API error: $error_msg"
            return 3
        fi
        
        # ÊàêÂäü
        echo "$response"
        return 0
    else
        debug_log "DEBUG" "No token found, using unauthenticated request"
        wget -q -O- "https://api.github.com/$endpoint" 2>/dev/null
        return $?
    fi
}

get_github_token() {
    if [ -f "$GITHUB_TOKEN_FILE" ] && [ -r "$GITHUB_TOKEN_FILE" ]; then
        # ÂçòÁ¥î„Å´ÊîπË°å„Å†„ÅëÂâäÈô§„Åó„Åü„Éà„Éº„ÇØ„É≥„ÇíËøî„ÅôÔºà„Çà„ÇäÂ†ÖÁâ¢Ôºâ
        cat "$GITHUB_TOKEN_FILE" | tr -d '\n\r' | head -1
        return 0
    fi
    
    # Áí∞Â¢ÉÂ§âÊï∞„Åã„Çâ„ÅÆÂèñÂæó
    if [ -n "$GITHUB_TOKEN" ]; then
        echo "$GITHUB_TOKEN"
        return 0
    fi
    
    return 1
}

save_version_to_cache() {
    local file_name="$1"
    local version="$2"
    local script_file="$3"
    
    # tmp„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®„Åó„Å¶ÁΩÆ„ÅçÊèõ„Åà„ÇãÔºàÂè§„ÅÑsed„Åß„ÇÇÂãï‰ΩúÔºâ
    if [ -f "$script_file" ]; then
        grep -v "^${file_name}=" "$script_file" > "${script_file}.tmp"
        echo "${file_name}=${version}" >> "${script_file}.tmp"
        mv "${script_file}.tmp" "$script_file"
    else
        echo "${file_name}=${version}" > "$script_file"
    fi
}

save_github_token() {
    token="$1"
    
    if [ -z "$token" ]; then
        debug_log "ERROR" "Empty token provided, cannot save"
        return 1
    fi
    
    # „Éà„Éº„ÇØ„É≥„Çí‰øùÂ≠ò„Åó„Å¶Ê®©Èôê„ÇíË®≠ÂÆö
    echo "$token" > "$GITHUB_TOKEN_FILE"
    chmod 600 "$GITHUB_TOKEN_FILE"
    
    if [ $? -eq 0 ]; then
        debug_log "INFO" "GitHub token saved to $GITHUB_TOKEN_FILE"
        return 0
    else
        debug_log "ERROR" "Failed to save token to $GITHUB_TOKEN_FILE"
        return 1
    fi
}

setup_github_token() {
    echo "GitHub API Token Setup"
    echo "======================"
    echo "This will save a GitHub Personal Access Token to $GITHUB_TOKEN_FILE"
    echo "The token will be used for API requests to avoid rate limits."
    echo ""
    
    # OpenWrt„ÅØstty„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑ„Åì„Å®„ÇíÂâçÊèê„Å®„Åô„Çã
    printf "Enter your GitHub Personal Access Token: "
    read -r token
    echo ""
    
    if [ -n "$token" ]; then
        if save_github_token "$token"; then
            echo "Token has been saved successfully!"
            echo "API requests will now use authentication."
        else
            echo "Failed to save token. Please check permissions."
        fi
    else
        echo "No token entered. Operation cancelled."
    fi
}

# üî¥„ÄÄ„Éà„Éº„ÇØ„É≥Á≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥-------------------------------------------------------------------------------------------------------------------------------------------

# üîµ„ÄÄ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

check_api_rate_limit() {
    if [ "$DEBUG_MODE" = "true" ]; then
        local token="$(get_github_token)"
        local temp_file="/tmp/aios_api_limit.tmp"
        
        # API„É¨„Çπ„Éù„É≥„Çπ„Çí‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
        if [ -n "$token" ]; then
            wget -q -O "$temp_file" --header="Authorization: token $token" "https://api.github.com/rate_limit" 2>/dev/null
        else
            wget -q -O "$temp_file" "https://api.github.com/rate_limit" 2>/dev/null
        fi
        
        if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
            local core_limit=""
            local core_remaining=""
            local core_reset=""
            local now_time=""
            local diff_sec=""
            local mins=""
            local secs=""
            local auth_text=""
            
            # POSIX„Ç∑„Çß„É´„Ç≥„Éû„É≥„Éâ„ÅÆ„Åø„ÅßJSON„Éë„Éº„Çπ
            core_limit=$(grep -A3 '"core"' "$temp_file" | grep '"limit"' | head -1 | grep -o '[0-9]\+' | head -1)
            core_remaining=$(grep -A3 '"core"' "$temp_file" | grep '"remaining"' | head -1 | grep -o '[0-9]\+' | head -1)
            core_reset=$(grep -A3 '"core"' "$temp_file" | grep '"reset"' | head -1 | grep -o '[0-9]\+' | head -1)
            
            # ÊôÇÈñìË®àÁÆó
            now_time=$(date +%s)
            
            # Êï∞ÂÄ§„Å®„Åó„Å¶ÊØîËºÉÂèØËÉΩ„Å™ÂΩ¢„Å´Á¢∫ÂÆü„Å´Â§âÊèõ
            if [ -n "$core_reset" ] && [ -n "$now_time" ]; then
                core_reset=$(echo "$core_reset" | tr -cd '0-9')
                now_time=$(echo "$now_time" | tr -cd '0-9')
                
                if [ "$core_reset" -gt "$now_time" ]; then
                    diff_sec=$(expr "$core_reset" - "$now_time")
                    mins=$(expr "$diff_sec" / 60)
                    secs=$(expr "$diff_sec" % 60)
                else
                    mins="0"
                    secs="0"
                fi
            else
                mins="0"
                secs="0"
            fi
            
            # Ë™çË®ºÁä∂ÊÖãÂà§ÂÆö
            if [ "$core_limit" = "5000" ]; then
                auth_text="authenticated"
            else
                auth_text="anonymous"
            fi
            
            debug_log "DEBUG" "API Limits: Core $core_remaining/$core_limit ($auth_text), Reset in ${mins}m ${secs}s"
            
            # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´ÂâäÈô§
            rm -f "$temp_file"
        fi
    fi
    return 0
}

clean_version_string() {
    local version_str="$1"
    
    # 1. ÊîπË°å„Å®Âæ©Â∏∞„ÇíÂâäÈô§
    local cleaned=$(printf "%s" "$version_str" | tr -d '\n\r')
    
    # 2. ËßíÊã¨Âºß„ÇíÂâäÈô§
    cleaned=$(printf "%s" "$cleaned" | sed 's/\[//g; s/\]//g')
    
    # 3. ANSI„Ç®„Çπ„Ç±„Éº„Éó„Ç≥„Éº„Éâ„ÇíÂâäÈô§
    cleaned=$(printf "%s" "$cleaned" | sed 's/\x1b\[[0-9;]*[mK]//g')
    
    # 4. „Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„ÅÆÊäΩÂá∫Ôºà„Ç∑„É≥„Éó„É´„Å™ÊñπÊ≥ïÔºâ
    if echo "$cleaned" | grep -q '20[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]'; then
        # Âπ¥.Êúà.Êó• ÂΩ¢Âºè„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇíÊäΩÂá∫
        local date_part=$(printf "%s" "$cleaned" | grep -o '20[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]')
        
        # „Éê„Éº„Ç∏„Éß„É≥ÊñáÂ≠óÂàó„ÅÆÊÆã„Çä„ÅÆÈÉ®ÂàÜ„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
        if echo "$cleaned" | grep -q "${date_part}-"; then
            local remainder=$(printf "%s" "$cleaned" | sed "s/.*${date_part}-//; s/[^0-9a-zA-Z-].*//")
            printf "%s-%s" "$date_part" "$remainder"
        else
            printf "%s" "$date_part"
        fi
    else
        # „Éê„Éº„Ç∏„Éß„É≥„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÂÖÉ„ÅÆÊñáÂ≠óÂàó„Çí„ÇØ„É™„Éº„Éã„É≥„Ç∞„Åó„Åü„ÇÇ„ÅÆ„ÇíËøî„Åô
        printf "%s" "$cleaned"
    fi
}

get_commit_version() {
    local file_path="$1"
    
    # „É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±
    local repo_owner="site-u2023"
    local repo_name="aios"
    local api_url="repos/${repo_owner}/${repo_name}/commits?path=${file_path}&per_page=1"
    local temp_file="/tmp/aios_commit_info.tmp"
    local auth_method="direct"
    
    # „Éà„Éº„ÇØ„É≥ÂèñÂæó„Å®„É™„ÇØ„Ç®„Çπ„Éà
    local token="$(get_github_token)"
    if [ -n "$token" ]; then
        debug_log "DEBUG" "Using token authentication for API request"
        
        # ‰∏≠ÈñìÁµêÊûú„Çí„É≠„Ç∞„Å´Ë®òÈå≤„Åó„Å™„ÅÑ„ÄÅÈùô„Åã„Å´Â§±Êïó„Åô„Çã„Çà„ÅÜ„Å´Ë®≠Ë®à
        if wget -q -O "$temp_file" --header="Authorization: token $token" "https://api.github.com/$api_url" 2>/dev/null; then
            # wgetÊàêÂäü„ÅÆÂ†¥Âêà
            auth_method="token"
            if ! grep -q '"sha"' "$temp_file"; then
                # API„Ç®„É©„Éº„Åæ„Åü„ÅØÂøúÁ≠îÁÑ°Âäπ„ÅÆÂ†¥Âêà
                wget -q -O "$temp_file" "https://api.github.com/$api_url" 2>/dev/null
                auth_method="direct"
            fi
        else
            # wgetÂ§±Êïó„ÅÆÂ†¥Âêà„ÅØÂåøÂêç„Ç¢„ÇØ„Çª„Çπ„ÇíË©¶Ë°å
            wget -q -O "$temp_file" "https://api.github.com/$api_url" 2>/dev/null
            auth_method="direct"
        fi
    else
        debug_log "DEBUG" "No token available, making direct API request"
        wget -q -O "$temp_file" "https://api.github.com/$api_url" 2>/dev/null
        auth_method="direct"
    fi
    
    # ÂøúÁ≠î„ÅÆÁ¢∫Ë™ç
    if [ ! -s "$temp_file" ]; then
        debug_log "WARN" "Empty response from GitHub API. Attempting direct file download"
        # API„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØÁõ¥Êé•„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
        local direct_file="/tmp/aios_direct_file.tmp"
        if wget -q -O "$direct_file" "https://raw.githubusercontent.com/$repo_owner/$repo_name/main/$file_path" 2>/dev/null; then
            # „Éï„Ç°„Ç§„É´„Åã„Çâ„Éè„ÉÉ„Ç∑„É•„ÇíÁîüÊàêÔºàÊúÄÂàù„ÅÆ7ÊñáÂ≠ó„Å†„Åë‰ΩøÁî®Ôºâ
            local file_hash=$(sha256sum "$direct_file" 2>/dev/null | cut -c1-7)
            rm -f "$direct_file" 2>/dev/null
            rm -f "$temp_file" 2>/dev/null
            local today=$(date +%Y.%m.%d)
            echo "$today-$file_hash direct"
            return 0
        else
            debug_log "ERROR" "Failed to directly download file"
            rm -f "$direct_file" 2>/dev/null
            rm -f "$temp_file" 2>/dev/null
            echo "$(date +%Y.%m.%d)-unknown $auth_method"
            return 1
        fi
    fi
    
    # API„Ç®„É©„Éº„ÉÅ„Çß„ÉÉ„ÇØ
    if grep -q "API rate limit exceeded" "$temp_file"; then
        debug_log "WARN" "GitHub API rate limit exceeded. Attempting direct file download"
        # Áõ¥Êé•„Éï„Ç°„Ç§„É´ÂèñÂæó„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        local direct_file="/tmp/aios_direct_file.tmp"
        if wget -q -O "$direct_file" "https://raw.githubusercontent.com/$repo_owner/$repo_name/main/$file_path" 2>/dev/null; then
            local file_hash=$(sha256sum "$direct_file" 2>/dev/null | cut -c1-7)
            rm -f "$direct_file" 2>/dev/null
            rm -f "$temp_file" 2>/dev/null
            local today=$(date +%Y.%m.%d)
            echo "$today-$file_hash direct"
            return 0
        else
            debug_log "ERROR" "Failed to directly download file"
            rm -f "$direct_file" 2>/dev/null
            rm -f "$temp_file" 2>/dev/null
            echo "$(date +%Y.%m.%d)-ratelimit $auth_method"
            return 2
        fi
    fi
    
    # „Ç≥„Éü„ÉÉ„ÉàÊÉÖÂ†±ÊäΩÂá∫ÔºàjqÈùû‰æùÂ≠ò„ÅÆÂ†ÖÁâ¢ÊñπÂºèÔºâ
    local commit_date=""
    local commit_sha=""
    
    # 1. SHAÊÉÖÂ†±„ÅÆÊäΩÂá∫Ôºà„Çà„ÇäÂ†ÖÁâ¢„Å™Ë§áÊï∞„Éë„Çø„Éº„É≥ÂØæÂøúÔºâ
    commit_sha=$(grep -o '"sha"[[:space:]]*:[[:space:]]*"[a-f0-9]\+' "$temp_file" | head -1 | grep -o '[a-f0-9]\{7,40\}' | head -c 7)
    
    if [ -z "$commit_sha" ]; then
        # „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éë„Çø„Éº„É≥
        commit_sha=$(grep -o '[a-f0-9]\{40\}' "$temp_file" | head -1 | head -c 7)
    fi
    
    # 2. Êó•‰ªòÊÉÖÂ†±„ÅÆÊäΩÂá∫Ôºà„Çà„ÇäÂ†ÖÁâ¢„Å™Ë§áÊï∞„Éë„Çø„Éº„É≥ÂØæÂøúÔºâ
    # „Éë„Çø„Éº„É≥1: "date": "YYYY-MM-DD..."
    commit_date=$(grep -o '"date"[[:space:]]*:[[:space:]]*"[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' "$temp_file" | 
                  head -1 | 
                  grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}')
    
    if [ -z "$commit_date" ]; then
        # „Éë„Çø„Éº„É≥2: YYYY-MM-DDTHH:MM:SSZÂΩ¢Âºè
        commit_date=$(grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}T[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}Z' "$temp_file" | 
                     head -1 | 
                     grep -o '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}')
    fi
    
    if [ -z "$commit_date" ] || [ -z "$commit_sha" ]; then
        debug_log "WARN" "Failed to extract commit information. Trying more robust method"
        
        # ÊúÄÁµÇÊâãÊÆµ: ÂÖ®„ÉÜ„Ç≠„Çπ„ÉàÊ§úÁ¥¢
        commit_sha=$(tr -cd 'a-f0-9' < "$temp_file" | grep -o '[a-f0-9]\{40\}' | head -1 | head -c 7)
        commit_date=$(grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' "$temp_file" | head -1)
        
        if [ -z "$commit_sha" ]; then
            commit_sha="unknown"
        fi
        
        if [ -z "$commit_date" ]; then
            commit_date=$(date +%Y-%m-%d)
        fi
    fi
    
    # „Éê„Éº„Ç∏„Éß„É≥ÊñáÂ≠óÂàóÊßãÁØâ„Å®ÁµêÊûúËøîÂç¥
    if [ -n "$commit_date" ] && [ -n "$commit_sha" ]; then
        # Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÇíÂ§âÊèõÔºàYYYY-MM-DD ‚Üí YYYY.MM.DDÔºâ
        local formatted_date=$(echo "$commit_date" | tr '-' '.')
        local version="${formatted_date}-${commit_sha}"
        
        debug_log "DEBUG" "Successfully extracted commit info: $version (via $auth_method)"
        rm -f "$temp_file" 2>/dev/null
        echo "$version $auth_method"
        return 0
    fi
    
    # ÂÖ®„Å¶„ÅÆÊñπÊ≥ï„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà
    debug_log "ERROR" "All methods failed to get commit information"
    rm -f "$temp_file" 2>/dev/null
    echo "$(date +%Y.%m.%d)-fallback $auth_method"
    return 1
}

version_is_newer() {
    local current="$1"  # „É™„É¢„Éº„Éà„Éê„Éº„Ç∏„Éß„É≥
    local reference="$2"  # „É≠„Éº„Ç´„É´„Éê„Éº„Ç∏„Éß„É≥
    
    # „Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ„ÇíËøΩÂä†
    debug_log "DEBUG" "Comparing: Remote=$current, Local=$reference"
    
    # „Å©„Å°„Çâ„Åã„Åå‰∏çÊòé„ÅÆÂ†¥Âêà„ÅØÊõ¥Êñ∞ÂøÖË¶Å
    if echo "$current $reference" | grep -q "No version\|unknown"; then
        debug_log "DEBUG" "Unknown version detected, update required"
        return 0
    fi
    
    # ÂÆåÂÖ®‰∏ÄËá¥„ÅÆÂ†¥Âêà„ÅØÊõ¥Êñ∞‰∏çË¶Å
    if [ "$current" = "$reference" ]; then
        debug_log "DEBUG" "Exact match: No update needed"
        return 1
    fi
    
    # Êó•‰ªòÈÉ®ÂàÜ„ÇíÊäΩÂá∫ÔºàYYYY.MM.DDÂΩ¢ÂºèÔºâ
    local current_date=$(echo "$current" | grep -o "[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" | head -1)
    local reference_date=$(echo "$reference" | grep -o "[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" | head -1)
    
    # Êó•‰ªò„ÅåÊäΩÂá∫„Åß„Åç„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅØÊõ¥Êñ∞„ÅåÂøÖË¶Å
    if [ -z "$current_date" ] || [ -z "$reference_date" ]; then
        debug_log "DEBUG" "Date extraction failed: Update for safety"
        return 0
    fi
    
    # Êó•‰ªò„ÇíÊï∞ÂÄ§„Å´Â§âÊèõÔºàÂå∫Âàá„ÇäÊñáÂ≠ó„ÇíÂâäÈô§Ôºâ
    local current_num=$(echo "$current_date" | tr -d '.')
    local reference_num=$(echo "$reference_date" | tr -d '.')
    
    # Êï∞ÂÄ§ÊØîËºÉÔºàÊó•‰ªòÂΩ¢ÂºèÔºâ
    if [ "$current_num" -gt "$reference_num" ]; then
        debug_log "DEBUG" "Remote date is newer: Update required"
        return 0  # „É™„É¢„Éº„ÉàÔºàcurrentÔºâ„ÅåÊñ∞„Åó„ÅÑ
    elif [ "$current_num" -lt "$reference_num" ]; then
        debug_log "DEBUG" "Local date is newer: No update needed"
        return 1  # „É≠„Éº„Ç´„É´ÔºàreferenceÔºâ„ÅåÊñ∞„Åó„ÅÑ
    fi
    
    # Êó•‰ªò„ÅåÂêå„ÅòÂ†¥Âêà„ÅØSHAÈÉ®ÂàÜ„ÇíÊØîËºÉ
    local current_sha=$(echo "$current" | grep -o "\-[a-z0-9]*" | sed 's/^-//' | head -1)
    local reference_sha=$(echo "$reference" | grep -o "\-[a-z0-9]*" | sed 's/^-//' | head -1)
    
    # SHAÊÉÖÂ†±„Çí„Éá„Éê„ÉÉ„Ç∞Âá∫Âäõ
    debug_log "DEBUG" "SHA comparison: Remote=$current_sha, Local=$reference_sha"
    
    if [ -n "$current_sha" ] && [ -n "$reference_sha" ] && [ "$current_sha" != "$reference_sha" ]; then
        debug_log "DEBUG" "Different SHA: Update required"
        return 0  # Áï∞„Å™„Çã„Ç≥„Éü„ÉÉ„Éà
    fi
    
    debug_log "DEBUG" "Same version or unable to compare: No update needed"
    return 1  # Âêå‰∏Ä„Éê„Éº„Ç∏„Éß„É≥
}

download() {
    # „Éï„Ç°„Ç§„É´Âêç„ÇíÊúÄÂàù„ÅÆÂºïÊï∞„Å®„Åó„Å¶Âá¶ÁêÜ„ÄÅÊÆã„Çä„ÅØ„Ç™„Éó„Ç∑„Éß„É≥
    local file_name="$1"
    shift
    
    # Ë®≠ÂÆöÂ§âÊï∞
    local hidden_mode="false"
    local quiet_mode="${QUIET_MODE:-false}"
    local chmod_mode="false"
    local load_mode="false"
    local script_file="${CACHE_DIR}/script.ch"
    local dummy_version="No version control"
    
    # „Ç™„Éó„Ç∑„Éß„É≥ÂºïÊï∞„ÅÆÂá¶ÁêÜ
    while [ $# -gt 0 ]; do
        case "$1" in
            hidden) hidden_mode="true" ;;
            quiet)  quiet_mode="true" ;;
            debug)  DEBUG_MODE="true" ;;
            chmod)  chmod_mode="true" ;;
            load)   load_mode="true" ;;
            *)      debug_log "WARN" "Unknown option: $1, ignoring" ;;
        esac
        shift
    done
    
    # „Éë„ÇπË®≠ÂÆö
    local install_path="${BASE_DIR}/$file_name"
    local remote_url="${BASE_URL}/$file_name"
    
    # APIÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØÔºà„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊôÇ„ÅÆ„ÅøÔºâ
    [ "$DEBUG_MODE" = "true" ] && check_api_rate_limit
    
    # „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆÂèñÂæó
    local remote_version_info=$(get_commit_version "$file_name")
    local remote_version=$(printf "%s" "$remote_version_info" | cut -d' ' -f1)
    local auth_method=$(printf "%s" "$remote_version_info" | cut -d' ' -f2)
    local local_version=""
    
    # „É≠„Éº„Ç´„É´„Éê„Éº„Ç∏„Éß„É≥„ÅÆÂèñÂæó
    if [ -f "$script_file" ]; then
        local_version=$(grep "^${file_name}=" "$script_file" | cut -d'=' -f2)
    fi
    [ -z "$local_version" ] && local_version="$dummy_version"

    local clean_remote_version=$(clean_version_string "$remote_version")
    local clean_local_version=$(clean_version_string "$local_version")

    # Ë™çË®º„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË®≠ÂÆö
    local auth_message=""
    case "$auth_method" in
        token)    auth_message="via token auth" ;;
        standard) auth_message="via standard API" ;;
        *)        auth_message="via direct download" ;;
    esac
    
    # „Éê„Éº„Ç∏„Éß„É≥ÊØîËºÉ„Å®„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂà§Êñ≠
    local status_message="No update needed"
    local update_required=false
    
    if [ "$local_version" = "$dummy_version" ]; then
        debug_log "DEBUG" "First download: $file_name"
        update_required=true
    elif [ "$clean_remote_version" = "$clean_local_version" ]; then
        debug_log "DEBUG" "Exact match: No update needed for $file_name"
        update_required=false
    else
        debug_log "DEBUG" "Starting version comparison: $file_name"
        version_is_newer "$clean_remote_version" "$clean_local_version"
        if [ $? -eq 0 ]; then
            debug_log "DEBUG" "New version detected: Update required for $file_name"
            update_required=true
        else
            debug_log "DEBUG" "Existing version: No update needed for $file_name"
            update_required=false
        fi
    fi
    
    debug_log "DEBUG" "Remote version: $file_name - $clean_remote_version"
    debug_log "DEBUG" "Local version: $file_name - $clean_local_version"
    debug_log "DEBUG" "Update required: $file_name -$(printf "%s" "$update_required")"
    
    if [ "$update_required" = "true" ]; then
        # „Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
        if ! $BASE_WGET "$install_path" "$remote_url"; then
            debug_log "ERROR" "Download failed: $file_name is empty"
            return 1
        fi
        
        # „Éï„Ç°„Ç§„É´Ê§úË®º
        if [ ! -s "$install_path" ]; then
            debug_log "ERROR" "Download failed: $file_name is empty"
            return 1
        fi
        
        # Ê®©ÈôêË®≠ÂÆö
        if [ "$chmod_mode" = "true" ]; then
            chmod +x "$install_path"
            debug_log "DEBUG" "chmod +x applied to $file_name"
        fi
        
        # „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆÊõ¥Êñ∞
        if [ ! -f "$script_file" ]; then
            printf "%s=%s\n" "${file_name}" "${clean_remote_version}" > "$script_file"
        else
            if grep -q "^${file_name}=" "$script_file"; then
                # „Ç®„Çπ„Ç±„Éº„ÉóÂá¶ÁêÜ„ÇíÊîπËâØ
                escaped_file=$(echo "$file_name" | sed 's/[\/&]/\\&/g')
                escaped_version=$(echo "$clean_remote_version" | sed 's/[\/&]/\\&/g')
                sed -i "s/^${escaped_file}=.*/${escaped_file}=${escaped_version}/" "$script_file"
            else
                printf "%s=%s\n" "${file_name}" "${clean_remote_version}" >> "$script_file"
            fi
        fi
    
        # „Çπ„ÉÜ„Éº„Çø„Çπ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ‰øÆÊ≠£
        status_message="Download completed"
    fi
    
    # Ë™≠„ÅøËæº„ÅøÂá¶ÁêÜ
    local action_message=""
    if [ "$load_mode" = "true" ] || echo "$file_name" | grep -q ".*\\.sh"; then
        . "$install_path"
        action_message="Loaded"
        debug_log "DEBUG" "load applied to $file_name"
    fi
    
    # Âá∫Âäõ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ‰øÆÊ≠£
    local message="${status_message}: ${file_name} - Version: ${clean_remote_version} ${auth_message}"
    if [ -n "$action_message" ]; then
        message="${message} (${action_message})"
    fi

    # Âá∫Âäõ
    if [ "$hidden_mode" = "true" ]; then
        debug_log "DEBUG" "$(color blue "Quiet mode ${message}")"
        
    else
        printf "%s\n" "$(color green "${message}")"
    fi
    
    return 0
}

# üî¥„ÄÄ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

# üîµ„ÄÄ„É°„Ç§„É≥„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

print_banner() {
    # Empty line at start
    debug_log "DEBUG" "Displaying lowercase aios block ASCII art banner"

    printf "\n"
    
    # ASCII art with colors
    printf "%s\n" "$(color magenta "                 ii i")"
    printf "%s\n" "$(color blue    "      aaaa      iii       oooo      sssss")"
    printf "%s\n" "$(color cyan    "         aa      ii      oo  oo    ss")"
    printf "%s\n" "$(color green   "      aaaaa      ii      oo  oo     sssss")"
    printf "%s\n" "$(color yellow  "     aa  aa      ii      oo  oo         ss")"
    printf "%s\n" "$(color red     "      aaaaa     iiii      oooo     ssssss")"
    
    # Empty line after ASCII art
    printf "\n"
    
    # Banner messages
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"

    debug_log "DEBUG" "Block style lowercase aios banner displayed successfully"

}

bloc_banner() {
    debug_log "DEBUG" "Displaying lowercase aios block ASCII art banner"
    
    # „Éê„Éä„Éº„ÅÆÂâç„Å´Á©∫Ë°å
    printf "\n"
    
    # Â∞èÊñáÂ≠ó„Äåaios„Äç„ÅÆ„Éñ„É≠„ÉÉ„ÇØASCII„Ç¢„Éº„Éà
    printf "%s\n" "$(color magenta "                 ‚ñà‚ñà ‚ñà")"
    printf "%s\n" "$(color blue    "      ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà")"
    printf "%s\n" "$(color cyan    "         ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà")"
    printf "%s\n" "$(color green   "      ‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà")"
    printf "%s\n" "$(color yellow  "     ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà         ‚ñà‚ñà")"
    printf "%s\n" "$(color red     "      ‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà")"
    
    # „Éê„Éä„Éº„ÅÆÂæå„Å´Á©∫Ë°å
    printf "\n"
    
    # „Éê„Éä„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
    
    debug_log "DEBUG" "Block style lowercase aios banner displayed successfully"
}

monochrome_banner() {
    debug_log "DEBUG" "Displaying lowercase aios block ASCII art banner"
    
    # „Éê„Éä„Éº„ÅÆÂâç„Å´Á©∫Ë°å
    printf "\n"
    
    # Â∞èÊñáÂ≠ó„Äåaios„Äç„ÅÆ„Éñ„É≠„ÉÉ„ÇØASCII„Ç¢„Éº„Éà
    printf "%s\n" "$(color white "               ‚ñà‚ñà ‚ñà")"
    printf "%s\n" "$(color white "    ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà")"
    printf "%s\n" "$(color white "       ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà")"
    printf "%s\n" "$(color white "    ‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà")"
    printf "%s\n" "$(color white "   ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà         ‚ñà‚ñà")"
    printf "%s\n" "$(color white "    ‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà")"
    
    # „Éê„Éä„Éº„ÅÆÂæå„Å´Á©∫Ë°å
    printf "\n"
    
    # „Éê„Éä„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
    
    debug_log "DEBUG" "Block style lowercase aios banner displayed successfully"
}

check_option() {

    # „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÅÆË®≠ÂÆö
    ORIGINAL_ARGS="$@"
    MODE="${MODE:-update}"
    SELECTED_LANGUAGE=""
    DEBUG_MODE="false"
    DEBUG_LEVEL="INFO"
    DRY_RUN="false"
    LOGFILE=""
    FORCE="false"
    RESET="false"
    HELP="false"

    # Ë®ÄË™û„Åä„Çà„Å≥„Ç™„Éó„Ç∑„Éß„É≥ÂºïÊï∞„ÅÆÂá¶ÁêÜ
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--h|-help|--help|-\?|--\?)
                HELP="true"
                print_help
                exit 0
                ;;
            -v|--v|-version|--version)
                script_version
                exit 0
                ;;
            -d|--d|-debug|--debug|-d1|--d1)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG"
                ;;
            -d2|--d2|-debug2|--debug2)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG2"
                ;;
            -cf|--cf|-common_full|--common_full)
                MODE="full"
                ;;
            -cl|--cl|-ocommon_light|--ocommon_light)
                MODE="light"
                ;;
            -cd|--cd|-common_debug|--common_debug|--ocommon_debug)
                MODE="debug"
                ;;
            -r|--r|-reset|--reset|-resrt|--resrt)
                MODE="reset"
                RESET="true"
                ;;
            -f|--f|-force|--force)
                FORCE="true"
                ;;
            -dr|--dr|-dry-run|--dry-run)
                DRY_RUN="true"
                ;;
            -l|--l|-logfile|--logfile)
                if [ -n "$2" ] && [ "${2#-}" = "$2" ]; then
                    LOGFILE="$2"
                    shift
                else
                    echo "Error: --logfile requires a path argument"
                    exit 1
                fi
                ;;
            -u|--u|-update|--update)
                debug_log "DEBUG" "check_option: aios update"
                MODE="update"
                ;;
            -t|--t|-token|--token)
                setup_github_token
                exit 0
                ;;
            -ta|--ta|-test_api|--test_api)
                MODE="test_api"
                ;;
            -*)
                echo "Warning: Unknown option: $1" >&2
                ;;
            *)
                if [ -z "$SELECTED_LANGUAGE" ]; then
                    SELECTED_LANGUAGE="$1"
                fi
                ;;
        esac
        shift
    done

    # Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
    export SELECTED_LANGUAGE DEBUG_MODE DEBUG_LEVEL MODE DRY_RUN LOGFILE FORCE RESET HELP

    # „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂá∫Âäõ
    debug_log "DEBUG" "aios - Version: $SCRIPT_VERSION"
    debug_log "DEBUG" "check_option received before args: $ORIGINAL_ARGS"
    debug_log "DEBUG" "check_option: MODE=$MODE, SELECTED_LANGUAGE=$SELECTED_LANGUAGE DEBUG_MODE=$DEBUG_MODE DEBUG_LEVEL=$DEBUG_LEVEL DRY_RUN=$DRY_RUN LOGFILE=$LOGFILE FORCE=$FORCE RESET=$RESET HELP=$HELP"

    # Ë®≠ÂÆö„Åï„Çå„ÅüË®ÄË™û„Çí `check_common()` „Å´Ê∏°„Åô
    check_common "$SELECTED_LANGUAGE" "$MODE"
}

check_common() {
    local lang_code="$SELECTED_LANGUAGE"
    local mode="$MODE"

    debug_log "DEBUG" "check_common: MODE=$MODE"
    debug_log "DEBUG" "check_common: mode=$mode"

    # „É¢„Éº„Éâ„Åî„Å®„ÅÆÂá¶ÁêÜ
    case "$mode" in
        reset|return)
            if ! rm -rf "${CACHE_DIR}"; then
                debug_log "ERROR" "Failed to remove cache directory: ${CACHE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset failed: Could not remove cache directory.")"
                return 1
            fi
            # „Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂÜç‰ΩúÊàê
            mkdir -p "${CACHE_DIR}" || {
                debug_log "ERROR" "Failed to recreate cache directory: ${CACHE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset partially failed: Cache removed but could not be recreated.")"
            }
            printf "%s%s%s\n" "$(color yellow "$(get_message "MSG_RESET_COMPLETE")")"
            exit 0
            ;;
        debug)
            download "dynamic-system-info.sh" "hidden" "chmod" "load"
            download "common-country.sh" "hidden" "chmod" "load"
            download "common-package.sh" "hidden" "chmod" "load"
            download "common-feed-package.sh" "hidden" "chmod" "load"
            download "messages_base.db" "hidden"
            download "messages_asian.db" "hidden"
            download "messages_euro.db" "hidden"
            download "country.db" "hidden"
            download "local-package.db" "hidden"
            download "custom-package.db" "hidden"
            print_banner       
            select_country "$lang_code"
            download "system-config.sh" "hidden" "chmod" "load"
            ;;
        full)
            download "dynamic-system-info.sh" "chmod" "load"
            download "common-country.sh" "chmod" "load"
            download "common-package.sh" "chmod" "load"
            download "common-feed-package.sh" "chmod" "load"
            download "messages_base.db"
            download "messages_asian.db"
            download "messages_euro.db"
            download "country.db"
            download "local-package.db"
            download "custom-package.db"
            print_banner
            bloc_banner
            monochrome_banner
            select_country "$lang_code"
            download "system-config.sh" "chmod" "load"
            ;;
        update)
            check_update "$ORIGINAL_ARGS"
            ;;
        light)
            ;;
        test_api)
            download "github_api_test.sh" "chmod" "load"
            exit 0
            ;;
        *)
            ;;
    esac
    
    return 0
}

# ÂÆüË°åÊ®©Èôê„ÅÆË®≠ÂÆö
chmod_aios() {
    if ! chmod +x "$BIN_PATH"; then
        debug_log "ERROR" "Failed to set execute permission"
        return 1
    fi
    return 0
}

# „Éá„Ç£„É¨„ÇØ„Éà„É™ÂâäÈô§Âá¶ÁêÜ
delete_aios() {
    if ! rm -rf "${BASE_DIR}"; then
        debug_log "ERROR" "Failed to delete $BASE_DIR"
        return 1
    fi
    return 0
}

# ÂøÖË¶Å„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
make_directory() {
    if ! mkdir -p "${BASE_DIR}" "$CACHE_DIR" "$LOG_DIR" "$FEED_DIR"; then
        debug_log "ERROR" "Failed to create required directories"
        return 1
    fi
}

# „Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁä∂ÊÖãÁ¢∫Ë™ç
check_update() {
    # „Éá„Éï„Ç©„É´„Éà„É¢„Éº„Éâ„ÅÆË®≠ÂÆöÔºàÂºïÊï∞„Åå„Å™„Åè„Å¶„ÇÇÂãï‰Ωú„Åô„Çã„Çà„ÅÜ„Å´Ôºâ
    local lang_code="$SELECTED_LANGUAGE"
    MODE="${MODE:-update}"
    
    # ÂÖ®ÂºïÊï∞„ÇíÂá¶ÁêÜ
    local all_args="$@"
    local has_args=0
    
    # ÂºïÊï∞„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    [ $# -gt 0 ] && has_args=1
    
    # „Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÈñ¢ÈÄ£„Ç™„Éó„Ç∑„Éß„É≥„ÅÆ„Åø„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    local filtered_args=""
    
    # ÂºïÊï∞„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÂá¶ÁêÜ
    if [ $has_args -eq 1 ]; then
        while [ $# -gt 0 ]; do
            case "$1" in
                -u|--u|-update|--update)
                    # „Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÈñ¢ÈÄ£„Ç™„Éó„Ç∑„Éß„É≥„ÅØÈô§Â§ñ
                    ;;
                *)
                    # „Åù„ÅÆ‰ªñ„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„ÅØ‰øùÊåÅ
                    filtered_args="${filtered_args:+$filtered_args }$1"
                    ;;
            esac
            shift
        done
    fi
    
    debug_log "DEBUG" "Original args: $all_args"
    debug_log "DEBUG" "Filtered args: $filtered_args"
    
    # „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÆüË°å
    download "aios" "chmod"
    MODE="full"

    # „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÁßªÂãï„Åó„Å¶exec
    if [ -f "$BASE_DIR/$BIN_FILE" ]; then
        mv -f "$BASE_DIR/$BIN_FILE" "$BIN_PATH"
    fi

    exec "$BIN_PATH" "$lang_code" $filtered_args
}

# ÂàùÊúüÂåñÂá¶ÁêÜ„ÅÆ„É°„Ç§„É≥
main() {
    # ÂÆüË°åÊ®©Èôê„ÇíË®≠ÂÆö
    if ! chmod_aios; then
        debug_log "ERROR" "Failed to set execute permission"
        return 1
    fi

    # ÂøÖË¶Å„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
    if ! make_directory; then
        debug_log "ERROR" "Failed to create required directories"
        return 1
    fi

    check_option "$@"
}

# üî¥„ÄÄ„É°„Ç§„É≥„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

# „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
main "$@"
