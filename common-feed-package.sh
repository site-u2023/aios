#!/bin/sh

SCRIPT_VERSION="2025.03.05-00-10"

# =========================================================
# üìå OpenWrt / Alpine Linux POSIX-Compliant Shell Script
# üöÄ Last Update: 2025-02-21
#
# üè∑Ô∏è License: CC0 (Public Domain)
# üéØ Compatibility: OpenWrt >= 19.07 (Tested on 24.10.0)
#
# ‚ö†Ô∏è IMPORTANT NOTICE:
# OpenWrt OS exclusively uses **Almquist Shell (ash)** and
# is **NOT** compatible with Bourne-Again Shell (bash).
#
# üì¢ POSIX Compliance Guidelines:
# ‚úÖ Use `[` instead of `[[` for conditions
# ‚úÖ Use `$(command)` instead of backticks `` `command` ``
# ‚úÖ Use `$(( ))` for arithmetic instead of `let`
# ‚úÖ Define functions as `func_name() {}` (no `function` keyword)
# ‚úÖ No associative arrays (`declare -A` is NOT supported)
# ‚úÖ No here-strings (`<<<` is NOT supported)
# ‚úÖ No `-v` flag in `test` or `[[`
#
# üõ†Ô∏è Keep it simple, POSIX-compliant, and lightweight for OpenWrt!
# =========================================================

DEV_NULL="${DEV_NULL:-on}"
# „Çµ„Ç§„É¨„É≥„Éà„É¢„Éº„Éâ
# export DEV_NULL="on"
# ÈÄöÂ∏∏„É¢„Éº„Éâ
# unset DEV_NULL

# Âü∫Êú¨ÂÆöÊï∞„ÅÆË®≠ÂÆö 
BASE_WGET="${BASE_WGET:-wget --no-check-certificate -q -O}"
# BASE_WGET="${BASE_WGET:-wget -O}"
BASE_URL="${BASE_URL:-https://raw.githubusercontent.com/site-u2023/aios/main}"
BASE_DIR="${BASE_DIR:-/tmp/aios}"
CACHE_DIR="${CACHE_DIR:-$BASE_DIR/cache}"
LOG_DIR="${LOG_DIR:-$BASE_DIR/logs}"
BUILD_DIR="${BUILD_DIR:-$BASE_DIR/build}"
FEED_DIR="${FEED_DIR:-$BASE_DIR/feed}"
DEBUG_MODE="${DEBUG_MODE:-false}"
mkdir -p "$CACHE_DIR" "$LOG_DIR" "$BUILD_DIR" "$FEED_DIR"

#########################################################################
# Last Update: 2025-03-04 10:00:00 (JST) üöÄ
# install_build: „Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Éì„É´„ÉâÂá¶ÁêÜ (OpenWrt / Alpine Linux)
# GitHub API „ÇíÂà©Áî®„Åó„Å¶ÊåáÂÆö„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÊúÄÊñ∞„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
# Èñ¢Êï∞: feed_package
# Ë™¨Êòé:
#   GitHub API „ÇíÁî®„ÅÑ„Å¶„ÄÅÊåáÂÆö„Åï„Çå„Åü„É™„Éù„Ç∏„Éà„É™„ÅÆÁâπÂÆö„Éá„Ç£„É¨„ÇØ„Éà„É™ÂÜÖ„Åã„Çâ„ÄÅ
#   „Éë„ÉÉ„Ç±„Éº„Ç∏Âêç„ÅÆ„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ„Å´ÂêàËá¥„Åô„Çã„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„ÄÅ„Ç¢„É´„Éï„Ç°„Éô„ÉÉ„ÉàÈ†Ü„ÅßÊúÄÂæå„ÅÆ„ÇÇ„ÅÆÔºàÔºùÊúÄÊñ∞„Å®‰ªÆÂÆöÔºâ„Çí
#   „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÖà„Å´‰øùÂ≠ò„Åô„Çã„ÄÇ
#   „Åæ„Åü„ÄÅDIR_PATH„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÄÅËá™ÂãïÁöÑ„Å´„É™„Éù„Ç∏„Éà„É™„ÅÆ„Éà„ÉÉ„Éó„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊé¢Á¥¢„Åó„ÄÅ
#   Ë©≤ÂΩì„Åô„Çã„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíËá™ÂãïÁöÑ„Å´ÈÅ∏Êäû„Åô„Çã„ÄÇ
#
# ÂºïÊï∞:
#   $1 : „É™„Éù„Ç∏„Éà„É™„ÅÆ„Ç™„Éº„Éä„ÉºÔºà‰æã: gSpotx2fÔºâ
#   $2 : „É™„Éù„Ç∏„Éà„É™ÂêçÔºà‰æã: packages-openwrtÔºâ
#   $3 : „Éá„Ç£„É¨„ÇØ„Éà„É™„Éë„ÇπÔºà‰æã: currentÔºâ
#   $4 : „Éë„ÉÉ„Ç±„Éº„Ç∏Âêç„ÅÆ„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„ÇπÔºà‰æã: luci-app-cpu-perfÔºâ
#   $5 : „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂæå„ÅÆÂá∫ÂäõÂÖà„Éï„Ç°„Ç§„É´Ôºà‰æã: /tmp/luci-app-cpu-perf_all.ipkÔºâ
#
# ‰Ωø„ÅÑÊñπ
# feed_package ["yn"] ["hidden"] "„É™„Éù„Ç∏„Éà„É™„Ç™„Éº„Éä„Éº" "„É™„Éù„Ç∏„Éà„É™Âêç" "„Éá„Ç£„É¨„ÇØ„Éà„É™" "„Éë„ÉÉ„Ç±„Éº„Ç∏Âêç"
# ‰æã: „Éá„Éï„Ç©„É´„ÉàÔºàÁ¢∫Ë™ç„Å™„Åó„Åß„Ç§„É≥„Çπ„Éà„Éº„É´Ôºâ
# feed_package "gSpotx2f" "packages-openwrt" "current" "luci-app-cpu-perf"
# ‰æã: Á¢∫Ë™ç„ÇíÂèñ„Å£„Å¶„Ç§„É≥„Çπ„Éà„Éº„É´
# feed_package "yn" "gSpotx2f" "packages-openwrt" "current" "luci-app-cpu-perf"
# ‰æã: „Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„Å™„Çâ„É°„ÉÉ„Çª„Éº„Ç∏„Å™„Åó
# feed_package "hidden" "gSpotx2f" "packages-openwrt" "current" "luci-app-cpu-perf"
# ‰æã: `yn` „Å® `hidden` „ÇíÈ†Ü‰∏çÂêå„ÅßÊåáÂÆö
# feed_package "hidden" "yn" "gSpotx2f" "packages-openwrt" "current" "luci-app-cpu-perf"
#
# Êñ∞‰ªïÊßò:
# 1. DIR_PATH„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÄÅ„É™„Éù„Ç∏„Éà„É™„ÅÆ„Éà„ÉÉ„Éó„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊé¢Á¥¢„Åó„ÄÅÊúÄÈÅ©„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíËá™ÂãïÈÅ∏Êäû„ÄÇ
# 2. „Ç™„Éó„Ç∑„Éß„É≥Ôºàyn, hidden, force, disabledÁ≠âÔºâ„ÅÆÂºïÊï∞„ÇíËøΩÂä†„ÅßÂá¶ÁêÜ„Åß„Åç„Çã„Çà„ÅÜ„Å´ÂØæÂøú„ÄÇ
# 3. GitHub API„Åã„ÇâÊúÄÊñ∞„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏ÊÉÖÂ†±„ÇíÂèñÂæó„Åó„ÄÅ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å®„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíË°å„ÅÜ„ÄÇ
#########################################################################
feed_package() {
  local confirm_install="no"
  local skip_lang_pack="no"
  local force_install="no"
  local skip_package_db="no"
  local set_disabled="no"
  local hidden="no"
  local opts=""
  local args=""
  local pattern=""

  # ÂºïÊï∞„ÇíËµ∞Êüª„Åó„ÄÅ„Ç™„Éó„Ç∑„Éß„É≥„Å®ÈÄöÂ∏∏ÂºïÊï∞„ÇíÂàÜÈõ¢„Åô„Çã
  while [ $# -gt 0 ]; do
    case "$1" in
      yn) confirm_install="yes"; opts="$opts yn" ;;
      hidden) hidden="yes"; opts="$opts hidden" ;;
      disabled) set_disabled="yes"; opts="$opts disabled" ;;
      *) args="$args $1" ;;
    esac
    shift
  done

  # ÂøÖÈ†àÂºïÊï∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  set -- $args
  if [ "$#" -lt 4 ]; then
    debug_log "DEBUG" "ÂøÖË¶Å„Å™ÂºïÊï∞ (REPO_OWNER, REPO_NAME, DIR_PATH, PKG_PREFIX) „Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ" >&2
    return 0
  fi

  local REPO_OWNER="$1"
  local REPO_NAME="$2"
  local DIR_PATH="$3"
  local PKG_PREFIX="$4"
  local OUTPUT_FILE="${FEED_DIR}/${PKG_PREFIX}.ipk"
  local API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/${DIR_PATH}"

  debug_log "DEBUG" "GitHub API „Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó‰∏≠: $API_URL"

  # „Éë„Çø„Éº„É≥Ëß£Êûê
  case "$REPO_OWNER" in
    kiddin9 | Leo-Jo-My | lisaac | jerrykuku)
      pattern="A"
      ;;
    gSpotx2f)
      case "$PKG_PREFIX" in
        luci-app-cpu-perf | luci-app-cpu-status | luci-app-temp-status | luci-app-log-viewer | luci-app-log | internet-detector)
          pattern="A-Github"
          ;;
        *)
          pattern="A-PackageÂêç"
          ;;
      esac
      ;;
    *)
      pattern="„Éá„Éï„Ç©„É´„Éà"
      ;;
  esac

  # „Éë„Çø„Éº„É≥„Å´Âü∫„Å•„ÅèÂá¶ÁêÜ
  case "$pattern" in
    "A")
      process_pattern_A "$REPO_OWNER" "$REPO_NAME" "$DIR_PATH" "$PKG_PREFIX"
      ;;
    "A-Github")
      process_pattern_A_github "$REPO_OWNER" "$REPO_NAME" "$DIR_PATH" "$PKG_PREFIX"
      ;;
    "A-PackageÂêç")
      process_pattern_A_package "$REPO_OWNER" "$REPO_NAME" "$DIR_PATH" "$PKG_PREFIX"
      ;;
    "„Éá„Éï„Ç©„É´„Éà")
      default_package "$REPO_NAME" "$DIR_PATH" "$PKG_PREFIX"
      ;;
    *)
      default_package "$REPO_NAME" "$DIR_PATH" "$PKG_PREFIX"
      ;;
  esac

  debug_log "DEBUG" "OUTPUT FILE: $OUTPUT_FILE"
  debug_log "DEBUG" "DOWNLOAD URL: $DOWNLOAD_URL"

  ${BASE_WGET} "$OUTPUT_FILE" "$DOWNLOAD_URL" || return 0

  debug_log "DEBUG" "$(ls -lh "$OUTPUT_FILE")"
  
  # opts „Å´Ê†ºÁ¥ç„Åï„Çå„Åü„Ç™„Éó„Ç∑„Éß„É≥„ÇíÂ±ïÈñã„Åó„Å¶Ê∏°„Åô
  install_package "$OUTPUT_FILE" $opts || return 0
  
  return 0
}

default_package() {
  local REPO_NAME="$1"
  local DIR_PATH="$2"
  local PKG_PREFIX="$3"
  local API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/contents/${DIR_PATH}"

  local JSON
  JSON=$(wget --no-check-certificate -qO- "$API_URL")

  if [ -z "$JSON" ];then
    debug_log "DEBUG" "API„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ"
    return 0
  fi

  local PKG_FILE
  PKG_FILE=$(echo "$JSON" | jq -r '[.[] | select(.type == "file" and .name | test("^'${PKG_PREFIX}'_"))] | sort_by(.name) | last | .name')

  if [ -z "$PKG_FILE" ];then
    debug_log "DEBUG" "$PKG_PREFIX „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ"
    return 0
  fi

  DOWNLOAD_URL=$(echo "$JSON" | jq -r --arg PKG "$PKG_FILE" '.[] | select(.name == $PKG) | .download_url')
}

process_pattern_A() {
  local REPO_OWNER="$1"
  local REPO_NAME="$2"
  local DIR_PATH="$3"
  local PKG_PREFIX="$4"
  # „Éë„Çø„Éº„É≥A„ÅÆÂá¶ÁêÜ
  default_package "$REPO_NAME" "$DIR_PATH" "$PKG_PREFIX"
}

process_pattern_A_github() {
  local REPO_OWNER="$1"
  local REPO_NAME="$2"
  local DIR_PATH="$3"
  local PKG_PREFIX="$4"
  # „Éë„Çø„Éº„É≥A-Github„ÅÆÂá¶ÁêÜ
  default_package "$REPO_NAME" "$DIR_PATH" "$PKG_PREFIX"
}

process_pattern_A_package() {
  local REPO_OWNER="$1"
  local REPO_NAME="$2"
  local DIR_PATH="$3"
  local PKG_PREFIX="$4"
  # „Éë„Çø„Éº„É≥A-PackageÂêç„ÅÆÂá¶ÁêÜ
  default_package "$REPO_NAME" "$DIR_PATH" "$PKG_PREFIX"
}
