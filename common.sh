#!/bin/sh
# License: CC0
# OpenWrt >= 19.07, Compatible with 24.10.0
# Important! OpenWrt OS only works with Almquist Shell, not Bourne-again shell.
# ÂêÑÁ®ÆÂÖ±ÈÄöÂá¶ÁêÜÔºà„Éò„É´„ÉóË°®Á§∫„ÄÅ„Ç´„É©„ÉºÂá∫Âäõ„ÄÅ„Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±Á¢∫Ë™ç„ÄÅË®ÄË™ûÈÅ∏Êäû„ÄÅÁ¢∫Ë™ç„ÉªÈÄöÁü•„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂ§öË®ÄË™ûÂØæÂøú„Å™„Å©Ôºâ„ÇíÊèê‰æõ„Åô„Çã„ÄÇ

SCRIPT_VERSION="2025.02.16-03-06"
echo -e "\033[7;40mUpdated to version $SCRIPT_VERSION common.sh \033[0m"

DEV_NULL="${DEV_NULL:-on}"
# „Çµ„Ç§„É¨„É≥„Éà„É¢„Éº„Éâ
# export DEV_NULL="on"
# ÈÄöÂ∏∏„É¢„Éº„Éâ
# unset DEV_NULL

# Âü∫Êú¨ÂÆöÊï∞„ÅÆË®≠ÂÆö 
BASE_WGET="${BASE_WGET:-wget -q -O}"
# BASE_WGET="${BASE_WGET:-wget -O}"
BASE_URL="${BASE_URL:-https://raw.githubusercontent.com/site-u2023/aios/main}"
BASE_DIR="${BASE_DIR:-/tmp/aios}"
CACHE_DIR="${CACHE_DIR:-$BASE_DIR/cache}"
LOG_DIR="${LOG_DIR:-$BASE_DIR/logs}"
mkdir -p "$CACHE_DIR" "$LOG_DIR"
DEBUG_MODE="${DEBUG_MODE:-false}"

# üîµ„ÄÄ„Ç®„É©„Éº„Éª„Éá„Éê„ÉÉ„Ç∞„Éª„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ-------------------------------------------------------------------------------------------------------------------------------------------
#########################################################################
# Last Update: 2025-02-16 16:00:00 (JST) üöÄ
# "Clarity in errors, precision in handling. Every function must be robust."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. „Åô„Åπ„Å¶„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí `messages.db` „ÅßÁÆ°ÁêÜ„Åó„ÄÅÂ§öË®ÄË™ûÂØæÂøú„Åô„Çã„ÄÇ
# 2. `debug_log("ERROR", message)` „ÇÇ `message.db` „Çí‰ΩøÁî®„Åô„Çã„ÄÇ
# 3. `{file}`, `{version}` „Å™„Å©„ÅÆÂ§âÊï∞„ÇíÂãïÁöÑ„Å´ÁΩÆÊèõ„ÄÇ
# 4. ÂΩ±ÈüøÁØÑÂõ≤: `aios` & `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
handle_error() {
    local error_key="$1"
    local file="$2"
    local version="$3"
    local exit_required="${4:-no}"

    local error_message
    error_message=$(get_message "$error_key")

    # „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂèñÂæó„Åß„Åç„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
    if [ -z "$error_message" ]; then
        error_message="Unknown error occurred. Key: $error_key"
    fi

    # Â§âÊï∞„ÇíÁΩÆÊèõ
    error_message=$(echo "$error_message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # „É≠„Ç∞Ë®òÈå≤ & Ë°®Á§∫
    debug_log "ERROR" "$error_message"
    echo -e "$(color red "$error_message")"

    if [ "$exit_required" = "yes" ]; then
        debug_log "ERROR" "Critical error occurred, exiting: $error_message"
        exit 1
    else
        debug_log "WARN" "Non-critical error: $error_message"
        return 1
    fi
}

#########################################################################
# Last Update: 2025-02-16 16:10:00 (JST) üöÄ
# "Logging with clarity, debugging with precision."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. „Åô„Åπ„Å¶„ÅÆ„É≠„Ç∞„É°„ÉÉ„Çª„Éº„Ç∏„Çí `messages.db` „ÅßÁÆ°ÁêÜ„Åó„ÄÅÂ§öË®ÄË™ûÂØæÂøú„Åô„Çã„ÄÇ
# 2. `{file}`, `{version}` „Å™„Å©„ÅÆÂ§âÊï∞„Çí `sed` „ÅßÂãïÁöÑ„Å´ÁΩÆÊèõ„Åô„Çã„ÄÇ
# 3. `DEBUG_MODE` „ÅÆË®≠ÂÆö„Å´Âøú„Åò„Å¶ `DEBUG`, `INFO`, `WARN`, `ERROR` „ÇíÁÆ°ÁêÜ„Åô„Çã„ÄÇ
# 4. ÂΩ±ÈüøÁØÑÂõ≤: `aios` & `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
debug_log() {
    local level="$1"
    local message_key="$2"
    local file="$3"
    local version="$4"

    # „ÇÇ„Åó `$1` „Å´„É≠„Ç∞„É¨„Éô„É´ (DEBUG/INFO/WARN/ERROR) „ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Å™„Åã„Å£„Åü„Çâ„ÄÅ„Éá„Éï„Ç©„É´„Éà„Åß DEBUG „Å´„Åô„Çã
    case "$level" in
        "DEBUG"|"INFO"|"WARN"|"ERROR") ;;  # ‰Ωï„ÇÇ„Åó„Å™„ÅÑ (Ê≠£„Åó„ÅÑ„É≠„Ç∞„É¨„Éô„É´)
        "")
            # `$1` „ÅåÁ©∫„Å™„Çâ `$2` „Çí„É°„ÉÉ„Çª„Éº„Ç∏„Å®„Åó„Å¶Êâ±„ÅÑ„ÄÅ„Éá„Éï„Ç©„É´„Éà„Çí DEBUG „Å´„Åô„Çã
            level="DEBUG"
            message_key="$1"
            file="$2"
            version="$3"
            ;;
        *)
            # `$1` „Å´„É≠„Ç∞„É¨„Éô„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÄÅ„Éá„Éï„Ç©„É´„Éà„Çí DEBUG „Å´„Åô„Çã
            message_key="$1"
            file="$2"
            version="$3"
            level="DEBUG"
            ;;
    esac

    # „É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæó
    local message
    message=$(get_message "$message_key")

    # Â§âÊï∞„ÇíÁΩÆÊèõ
    message=$(echo "$message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # „É≠„Ç∞„É¨„Éô„É´Âà∂Âæ°
    case "$DEBUG_LEVEL" in
        DEBUG)    allowed_levels="DEBUG INFO WARN ERROR" ;;
        INFO)     allowed_levels="INFO WARN ERROR" ;;
        WARN)     allowed_levels="WARN ERROR" ;;
        ERROR)    allowed_levels="ERROR" ;;
        *)        allowed_levels="ERROR" ;;
    esac

    if echo "$allowed_levels" | grep -q "$level"; then
        local timestamp
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        local log_message="[$timestamp] $level: $message"

        # „Ç´„É©„ÉºË°®Á§∫
        case "$level" in
            "ERROR") echo -e "$(color red "$log_message")" ;;
            "WARN") echo -e "$(color yellow "$log_message")" ;;
            "INFO") echo -e "$(color cyan "$log_message")" ;;
            "DEBUG") echo -e "$(color white "$log_message")" ;;
        esac

        # „É≠„Ç∞„Éï„Ç°„Ç§„É´„Å´Ë®òÈå≤
        echo "$log_message" >> "$LOG_DIR/debug.log"
    fi
}

#########################################################################
# Last Update: 2025-02-16 17:30:00 (JST) üöÄ
# "Debug with clarity, test with precision. Every log tells a story."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `test_country_search()`, `test_timezone_search()`, `test_cache_contents()` „ÇíÁµ±Âêà„ÄÇ
# 2. `debug_log()` „Çí‰ΩøÁî®„Åó„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„Çí `message.db` „Åã„ÇâÂèñÂæó„ÄÇ
# 3. `country.db` „ÅÆÊ§úÁ¥¢ÁµêÊûú„ÅåÈÅ©Âàá„Å´Âá∫Âäõ„Åï„Çå„Çã„ÅãÁ¢∫Ë™ç„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã„ÄÇ
# 4. ÂΩ±ÈüøÁØÑÂõ≤: `common.sh` „ÅÆ„ÅøÔºà`aios` „Å´„ÅØÂΩ±Èüø„Å™„ÅóÔºâ„ÄÇ
#########################################################################
test_debug_functions() {
    local test_type="$1"
    local test_input="$2"

    case "$test_type" in
        country)
            debug_log "INFO" "MSG_TEST_COUNTRY_SEARCH" "$test_input"
            if [ ! -f "${BASE_DIR}/country.db" ]; then
                handle_error "ERR_FILE_NOT_FOUND" "country.db"
                return 1
            fi
            awk -v query="$test_input" '
                $2 ~ query || $3 ~ query || $4 ~ query || $5 ~ query {
                    print NR, $2, $3, $4, $5, $6, $7, $8, $9
                }' "${BASE_DIR}/country.db"
            ;;

        timezone)
            debug_log "INFO" "MSG_TEST_TIMEZONE_SEARCH" "$test_input"
            if [ ! -f "${BASE_DIR}/country.db" ]; then
                handle_error "ERR_FILE_NOT_FOUND" "country.db"
                return 1
            fi
            awk -v country="$test_input" '
                $2 == country || $4 == country || $5 == country {
                    print NR, $5, $6, $7, $8, $9, $10, $11
                }' "${BASE_DIR}/country.db"
            ;;

        cache)
            debug_log "INFO" "MSG_TEST_CACHE_CONTENTS"
            for cache_file in "country_tmp.ch" "zone_tmp.ch"; do
                if [ -f "${CACHE_DIR}/$cache_file" ]; then
                    debug_log "INFO" "MSG_CACHE_CONTENTS" "$cache_file"
                    cat "${CACHE_DIR}/$cache_file"
                else
                    debug_log "WARN" "MSG_CACHE_NOT_FOUND" "$cache_file"
                fi
            done
            ;;
        
        *)
            debug_log "ERROR" "ERR_INVALID_ARGUMENT" "$test_type"
            return 1
            ;;
    esac
}

# üî¥„ÄÄ„Ç®„É©„Éº„Éª„Éá„Éê„ÉÉ„Ç∞„Éª„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥-------------------------------------------------------------------------------------------------------------------------------------------

# üîµ„ÄÄ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------


#########################################################################
# Last Update: 2025-02-16 16:20:00 (JST) üöÄ
# "Efficiency in updates, precision in versions. Every script matters."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `messages.db` „Çí‰ΩøÁî®„Åó„ÄÅ„Åô„Åπ„Å¶„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂ§öË®ÄË™ûÂØæÂøú„Åô„Çã„ÄÇ
# 2. `debug_log()` „Çí‰ΩøÁî®„Åó„ÄÅ„É≠„Ç∞„Çí `messages.db` „ÅßÁµ±‰∏Ä„Åô„Çã„ÄÇ
# 3. `script.ch` „Å´„Éê„Éº„Ç∏„Éß„É≥„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Åó„ÄÅÂ§âÊõ¥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„Åø„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÄÇ
# 4. `download()` „ÇíÊ¥ªÁî®„Åó„ÄÅ„Çπ„ÇØ„É™„Éó„Éà & DB „ÅÆÂèñÂæó„ÇíÁµ±‰∏Ä„ÄÇ
# 5. ÂΩ±ÈüøÁØÑÂõ≤: `aios` & `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
script_update() {
    local version="$1"
    local file_name="$2"
    local cache_file="${CACHE_DIR}/script.ch"

    # „Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
    mkdir -p "${CACHE_DIR}"

    # „Éá„Éï„Ç©„É´„Éà„ÅÆ‰ªÆ„Éê„Éº„Ç∏„Éß„É≥
    local default_version="2020.01.01-00-00"

    # `wget` „Çí‰ΩøÁî®„Åó„Å¶Áõ¥Êé• `SCRIPT_VERSION` „ÇíÂèñÂæó
    local remote_version
    remote_version=$(wget -qO- --no-check-certificate "${BASE_URL}/${file_name}" | grep "^SCRIPT_VERSION=" | cut -d'=' -f2 | tr -d '"')

    # `wget` Â§±ÊïóÊôÇ„Åæ„Åü„ÅØ `SCRIPT_VERSION` „ÅåÂèñÂæó„Åß„Åç„Å™„Åã„Å£„ÅüÂ†¥Âêà
    if [ -z "$remote_version" ]; then
        debug_log "WARN" "SCRIPT_VERSION not found in $file_name. Using default version ($default_version)."
        remote_version="$default_version"
    fi

    # **„Ç≠„É£„ÉÉ„Ç∑„É• (`script.ch`) „Å´Êõ∏„ÅçËæº„Åø**
    sed -i "/^$file_name=/d" "$cache_file" 2>/dev/null
    echo "$file_name=$remote_version" >> "$cache_file"

    # **„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞**
    debug_log "DEBUG" "Local version: $version"
    debug_log "DEBUG" "Remote version: $remote_version"
    debug_log "DEBUG" "Cached version for $file_name: $remote_version"

    # **„Éê„Éº„Ç∏„Éß„É≥ÊØîËºÉ**
    local v1_parts v2_parts
    v1_parts=$(echo "$version" | sed 's/[-.]/ /g')
    v2_parts=$(echo "$remote_version" | sed 's/[-.]/ /g')

    local i=1
    local num_v1 num_v2
    while [ $i -le 5 ]; do
        num_v1=$(echo "$v1_parts" | awk '{print $'$i'}')
        num_v2=$(echo "$v2_parts" | awk '{print $'$i'}')

        # **Á©∫„Å™„Çâ 0 „ÇíË®≠ÂÆö**
        [ -z "$num_v1" ] && num_v1=0
        [ -z "$num_v2" ] && num_v2=0

        # **Êï∞ÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ**
        if ! echo "$num_v1" | grep -q '^[0-9]\+$'; then num_v1=0; fi
        if ! echo "$num_v2" | grep -q '^[0-9]\+$'; then num_v2=0; fi

        if [ "$num_v1" -lt "$num_v2" ]; then
            debug_log "INFO" "Updating $file_name to version $remote_version."
            download "$file_name" "script"
            return 0
        fi
        i=$((i + 1))
    done

    debug_log "INFO" "Skipping download: $file_name is up-to-date."
    return 0
}

#########################################################################
# Last Update: 2025-02-17 01:15:00 (JST) üöÄ
# "Enhanced debugging for precise issue tracking."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. **`wget` „ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí `debug_log()` „ÅßË®òÈå≤„Åô„Çã„ÄÇ**
# 2. **„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂæå„Å´„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åô„Çã„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„ÄÅË©≥Á¥∞„Å™„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„ÇíË®òÈå≤„Åô„Çã„ÄÇ**
# 3. **„É™„É¢„Éº„Éà„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†± (`remote_version`) „ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÇíÊîπÂñÑ„ÄÇ**
# 4. **ÂΩ±ÈüøÁØÑÂõ≤: `common.sh` „ÅÆ `download()` „ÅÆ„ÅøÔºà‰ªñ„ÅÆÈñ¢Êï∞„Å´„ÅØÂΩ±Èüø„Å™„ÅóÔºâ„ÄÇ**
#########################################################################
download() {
    local file_name="$1"
    local type="$2"
    local install_path="${BASE_DIR}/${file_name}"
    local remote_url="${BASE_URL}/${file_name}"

    debug_log "DEBUG" "Starting download of $file_name from $remote_url"

    # `wget` „Åß„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
    wget -q --no-check-certificate -O "$install_path" "$remote_url"
    local wget_status=$?

    # ÊàêÂäü„ÉªÂ§±Êïó„ÇíÂà§ÂÆö
    if [ $wget_status -ne 0 ]; then
        debug_log "ERROR" "Download failed: $file_name (wget exit code: $wget_status)"
        return 1
    fi

    # Á©∫„Éï„Ç°„Ç§„É´ÂØæÁ≠ñ
    if [ ! -s "$install_path" ]; then
        debug_log "ERROR" "Download failed: $file_name is empty."
        return 1
    fi

    debug_log "INFO" "Download completed: $file_name is valid."

    # **„Éê„Éº„Ç∏„Éß„É≥„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüÊñΩ**
    local script_version
    if grep -q "^SCRIPT_VERSION=" "$install_path"; then
        script_version=$(grep "^SCRIPT_VERSION=" "$install_path" | cut -d'=' -f2 | tr -d '"')
    else
        debug_log "WARN" "SCRIPT_VERSION not found in $file_name. Using default version (2020.01.01-00-00)."
        script_version="2020.01.01-00-00"
    fi

    script_update "$script_version" "$file_name"

    return 0
}

# üî¥„ÄÄ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

#########################################################################
# print_help: „Éò„É´„Éó„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
#########################################################################
print_help() {
    echo "Usage: aios.sh [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -reset, --reset, -r     Reset all cached data"
    echo "  -help, --help, -h       Show this help message"
    echo "  ja, en, zh-cn, ...      Set language"
    echo ""
    echo "Examples:"
    echo "  sh aios.sh full ja       # Run in full mode with language set to Japanese"
    echo "  sh aios.sh full          # If language cache exists, use it; otherwise, prompt for language"
}

#########################################################################
# color: ANSI „Ç®„Çπ„Ç±„Éº„Éó„Ç∑„Éº„Ç±„É≥„Çπ„Çí‰Ωø„Å£„Å¶Ëâ≤‰ªò„Åç„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá∫Âäõ„Åô„ÇãÈñ¢Êï∞
#########################################################################
color() {
    local color_code
    color_code=$(color_code_map "$1")
    shift
    echo -e "${color_code}$*$(color_code_map "reset")"
}

#########################################################################
# color_code_map: „Ç´„É©„ÉºÂêç„Åã„Çâ ANSI „Ç®„Çπ„Ç±„Éº„Éó„Ç∑„Éº„Ç±„É≥„Çπ„ÇíËøî„ÅôÈñ¢Êï∞
#########################################################################
color_code_map() {
    local color="$1"
    case "$color" in
        "red") echo "\033[1;31m" ;;
        "green") echo "\033[1;32m" ;;
        "yellow") echo "\033[1;33m" ;;
        "blue") echo "\033[1;34m" ;;
        "magenta") echo "\033[1;35m" ;;
        "cyan") echo "\033[1;36m" ;;
        "white") echo "\033[1;37m" ;;
        "red_underline") echo "\033[4;31m" ;;
        "green_underline") echo "\033[4;32m" ;;
        "yellow_underline") echo "\033[4;33m" ;;
        "blue_underline") echo "\033[4;34m" ;;
        "magenta_underline") echo "\033[4;35m" ;;
        "cyan_underline") echo "\033[4;36m" ;;
        "white_underline") echo "\033[4;37m" ;;
        "red_white") echo "\033[1;41m" ;;
        "green_white") echo "\033[1;42m" ;;
        "yellow_white") echo "\033[1;43m" ;;
        "blue_white") echo "\033[1;44m" ;;
        "magenta_white") echo "\033[1;45m" ;;
        "cyan_white") echo "\033[1;46m" ;;
        "white_black") echo "\033[7;40m" ;;
        "reset") echo "\033[0;39m" ;;
        *) echo "\033[0;39m" ;;  # „Éá„Éï„Ç©„É´„Éà„Åß„É™„Çª„ÉÉ„Éà
    esac
}


#########################################################################
# check_openwrt: OpenWrt„ÅÆ„Éê„Éº„Ç∏„Éß„É≥Á¢∫Ë™ç„ÉªÊ§úË®º
#########################################################################
check_openwrt() {
    local version_file="${CACHE_DIR}/openwrt.ch"
    if [ -f "$version_file" ]; then
        CURRENT_VERSION=$(cat "$version_file")
    else
        CURRENT_VERSION=$(awk -F"'" '/DISTRIB_RELEASE/ {print $2}' /etc/openwrt_release | cut -d'-' -f1)
        echo "$CURRENT_VERSION" > "$version_file"
    fi

    if grep -q "^$CURRENT_VERSION=" "${BASE_DIR}/openwrt.db"; then
        local db_entry=$(grep "^$CURRENT_VERSION=" "${BASE_DIR}/openwrt.db" | cut -d'=' -f2)
        PACKAGE_MANAGER=$(echo "$db_entry" | cut -d'|' -f1)
        VERSION_STATUS=$(echo "$db_entry" | cut -d'|' -f2)
        echo -e "$(color green "Version $CURRENT_VERSION is supported ($VERSION_STATUS)")"
    else
        handle_error "Unsupported OpenWrt version: $CURRENT_VERSION"
    fi
}

#########################################################################
# get_package_manager: „Éë„ÉÉ„Ç±„Éº„Ç∏„Éû„Éç„Éº„Ç∏„É£„ÉºÂà§ÂÆöÔºàapk / opkg ÂØæÂøúÔºâ
#########################################################################
get_package_manager() {
    if [ -f "${BASE_DIR}/downloader_ch" ]; then
        PACKAGE_MANAGER=$(cat "${CACHE_DIR}/downloader_ch")
    else
        if command -v apk >/dev/null 2>&1; then
            PACKAGE_MANAGER="apk"
        elif command -v opkg >/dev/null 2>&1; then
            PACKAGE_MANAGER="opkg"
        else
            PACKAGE_MANAGER="opkg"  # „Éá„Éï„Ç©„É´„Éà„Çí„Çª„ÉÉ„Éà
        fi
        echo "$PACKAGE_MANAGER" > "${CACHE_DIR}/downloader_ch"
    fi
    echo -e "$(color green "Downloader $PACKAGE_MANAGER")"
}

#########################################################################
# Last Update: 2025-02-16 13:40:00 (JST) üöÄ
# "Precision in code, clarity in purpose. Every update refines the path."
#
# get_message: Â§öË®ÄË™ûÂØæÂøú„É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæóÈñ¢Êï∞
#
# „ÄêË¶Å‰ª∂„Äë
# 1. Ë®ÄË™û„ÅÆÊ±∫ÂÆö:
#    - 'message.ch' „ÇíÊúÄÂÑ™ÂÖà„ÅßÂèÇÁÖß„Åô„ÇãÔºànormalize_country() „Å´„Çà„ÇäÁ¢∫ÂÆöÔºâ
#    - 'message.ch' „ÅåÁÑ°„Åë„Çå„Å∞„ÄÅ'country.ch' „Åã„ÇâÂõΩ„Ç≥„Éº„Éâ„ÇíÂèñÂæó„Åó„ÄÅ„Éá„Éï„Ç©„É´„Éà„Çí "en" „Å´Ë®≠ÂÆö
#
# 2. „É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæó„ÅÆÊµÅ„Çå:
#    - messages.db „Åã„Çâ„ÄÅË®ÄË™û„Ç≥„Éº„Éâ (‰æã: "en", "US", "ja" Á≠â) „Å´ÂØæÂøú„Åô„Çã„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
#    - Ë©≤ÂΩì„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÁÑ°„ÅÑÂ†¥Âêà„ÄÅ"US"ÔºàËã±Ë™ûÔºâ„Çí„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
#    - „Åù„Çå„Åß„ÇÇË¶ã„Å§„Åã„Çâ„Å™„Åë„Çå„Å∞„ÄÅ„Ç≠„Éº ($1) „Çí„Åù„ÅÆ„Åæ„ÅæËøî„Åô
#
# 3. country.ch „Å®„ÅÆÈñ¢‰øÇ:
#    - country.ch „ÅØ„Éá„Éê„Ç§„ÇπË®≠ÂÆöÁî®ÔºàÂ§âÊõ¥‰∏çÂèØÔºâ„Åß„ÄÅ„Åì„Åì„Åã„ÇâË®ÄË™û„Ç≥„Éº„Éâ„ÅåÂèñÂæó„Åï„Çå„Çã
#    - message.ch „ÅØ„Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫Áî®Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂèØËÉΩÔºâ„Åß„ÄÅÈÄöÂ∏∏„ÅØ normalize_country() „Å´„Çà„ÇäÊ±∫ÂÆö
#
# 4. „É°„É≥„ÉÜ„Éä„É≥„Çπ:
#    - Ë®ÄË™ûË®≠ÂÆö„Å´ÂΩ±Èüø„Çí‰∏é„Åà„Åö„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„Åø message.ch „ÅßÁÆ°ÁêÜ„Åô„Çã
#    - normalize_country() „Å´„Çà„Å£„Å¶ message.ch „ÅåÊ±∫ÂÆö„Åï„Çå„Çã„Åü„ÇÅ„ÄÅÂ§âÊõ¥„ÅØ normalize_country() ÂÅ¥„ÅßË°å„ÅÜ
#
# 5. „Ç™„Éó„Ç∑„Éß„É≥ (quiet):
#    - Á¨¨‰∫åÂºïÊï∞„Å´ "quiet" „ÇíÊåáÂÆö„Åô„Çã„Å®„ÄÅÂèñÂæó„Åó„Åü„É°„ÉÉ„Çª„Éº„Ç∏„Çí echo „Åõ„Åö„ÄÅÂá∫Âäõ„ÇíÊäëÂà∂„Åô„Çã
#      Ôºà‰æã: get_message "MSG_CONFIRM_INSTALL" quiet Ôºâ
#########################################################################
get_message() {
    local key="$1"
    local quiet_flag="$2"
    local message_cache="${CACHE_DIR}/message.ch"
    local lang="en"  # „Éá„Éï„Ç©„É´„Éà„ÅØ "en"

    # message.ch „ÅåÁÑ°„ÅÑÂ†¥Âêà„ÄÅcountry.ch „Åã„ÇâË®ÄË™û„Ç≥„Éº„Éâ„ÇíÂèñÂæó
    if [ ! -f "$message_cache" ]; then
        if [ -f "${CACHE_DIR}/country.ch" ]; then
            lang=$(awk '{print $5}' "${CACHE_DIR}/country.ch")
        fi
        [ -z "$lang" ] && lang="en"
    else
        lang=$(cat "$message_cache")
    fi

    local message_db="${BASE_DIR}/messages.db"
    local message=""

    # messages.db „ÅåÁÑ°„ÅÑÂ†¥Âêà„ÅØ„ÄÅ„Ç≠„Éº„Åù„ÅÆ„Åæ„Åæ„ÇíËøî„Åô
    if [ ! -f "$message_db" ]; then
        message="$key"
    else
        message=$(grep "^${lang}|${key}=" "$message_db" | cut -d'=' -f2-)
        # Ë©≤ÂΩì„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÁÑ°„Åë„Çå„Å∞„ÄÅUS „Çí„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        if [ -z "$message" ]; then
            message=$(grep "^US|${key}=" "$message_db" | cut -d'=' -f2-)
        fi
        # „Åù„Çå„Åß„ÇÇË¶ã„Å§„Åã„Çâ„Å™„Åë„Çå„Å∞„ÄÅ„Ç≠„Éº„Åù„ÅÆ„Åæ„Åæ„Å®„Åó„ÄÅ„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„ÇíÂá∫„Åô
        if [ -z "$message" ]; then
            debug_log "INFO" "Message key '$key' not found in messages.db."
            message="$key"
        fi
    fi

    # quiet „Ç™„Éó„Ç∑„Éß„É≥„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà„ÅØÂá∫Âäõ„Åõ„ÅöÁµÇ‰∫Ü
    if [ "$quiet_flag" = "quiet" ]; then
        return 0
    else
        echo "$message"
    fi
}

# üîµ„ÄÄ„É©„É≥„Ç≤„Éº„Ç∏ÔºàË®ÄË™û„Éª„Çæ„Éº„É≥ÔºâÁ≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ-------------------------------------------------------------------------------------------------------------------------------------------
#########################################################################
# Last Update: 2025-02-12 17:25:00 (JST) üöÄ
# "Precision in code, clarity in purpose. Every update refines the path."
# select_country: „É¶„Éº„Ç∂„Éº„Å´ÂõΩ„ÅÆÈÅ∏Êäû„Çí‰øÉ„ÅôÔºàÊ§úÁ¥¢Ê©üËÉΩ‰ªò„ÅçÔºâ
#
# select_country()
# ‚îú‚îÄ‚îÄ selection_list()  ‚Üí ÈÅ∏ÊäûÁµêÊûú„Çí country_tmp.ch „Å´‰øùÂ≠ò
# ‚îú‚îÄ‚îÄ country_write()   ‚Üí country.ch, country.ch, luci.ch, zone.ch „Å´Á¢∫ÂÆö
# ‚îî‚îÄ‚îÄ select_zone()     ‚Üí zone.ch „Åã„Çâ zonename.ch, timezone.ch „Å´Á¢∫ÂÆö
#
# [1] „É¶„Éº„Ç∂„Éº„ÅåÂõΩ„ÇíÈÅ∏Êäû ‚Üí selection_list()
# [2] ‰∏ÄÊôÇ„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò (country_tmp.ch)
# [3] country_write() „ÇíÂÆüË°å
# [4] Á¢∫ÂÆö„Ç≠„É£„ÉÉ„Ç∑„É•„Çí‰ΩúÊàêÔºàcountry.ch, country.ch, luci.ch, zone.chÔºâ‚Üí Êõ∏„ÅçËæº„ÅøÁ¶ÅÊ≠¢„Å´„Åô„Çã
# [5] select_zone() „ÇíÂÆüË°å
#
# #Ô∏è‚É£ `$1` „ÅÆÂ≠òÂú®Á¢∫Ë™ç
#   ‚îú‚îÄ „ÅÇ„Çä ‚Üí `country.db` „ÅßÊ§úÁ¥¢
#   |    ‚îú‚îÄ Ë¶ã„Å§„Åã„Çã ‚Üí `select_zone()`Ôºà„Çæ„Éº„É≥ÈÅ∏Êäû„Å∏Ôºâ
#   |    ‚îú‚îÄ Ë¶ã„Å§„Åã„Çâ„Å™„ÅÑ ‚Üí Ë®ÄË™ûÈÅ∏Êäû„ÇíÂÆüË°å
#   ‚îú‚îÄ „Å™„Åó ‚Üí `country.ch` „ÇíÁ¢∫Ë™ç
#        ‚îú‚îÄ „ÅÇ„Çä ‚Üí Ë®ÄË™ûÁ≥ªÁµÇ‰∫ÜÔºà‰ª•Èôç„ÅÆÂá¶ÁêÜ„Å™„ÅóÔºâ
#        ‚îú‚îÄ „Å™„Åó ‚Üí Ë®ÄË™ûÈÅ∏Êäû„ÇíÂÆüË°å
#########################################################################
select_country() {
    echo "DEBUG: Entered select_country()"
    debug_log "DEBUG" "Entering select_country() with arg: '$1'"

    local cache_country="${CACHE_DIR}/country.ch"
    local tmp_country="${CACHE_DIR}/country_tmp.ch"


    if [ -f "$cache_country" ]; then
        debug_log "INFO" "Country cache found. Skipping selection."
        select_zone
        return
    fi

    while true; do
        printf "%s\n" "$(color cyan "$(get_message "MSG_ENTER_COUNTRY")")"
        printf "%s" "$(color cyan "$(get_message "MSG_SEARCH_KEYWORD")")"
        read -r input
        
        # ÂÖ•Âäõ„ÅÆÊ≠£Ë¶èÂåñ: "/", ",", "_" „Çí„Çπ„Éö„Éº„Çπ„Å´ÁΩÆ„ÅçÊèõ„Åà
        local cleaned_input
        cleaned_input=$(echo "$input" | sed 's/[\/,_]/ /g')
        
        # ÂÆåÂÖ®‰∏ÄËá¥„ÇíÂÑ™ÂÖà
        local search_results
        search_results=$(awk -v search="$cleaned_input" 'BEGIN {IGNORECASE=1} 
            { key = $2" "$3" "$4" "$5; if ($0 ~ search && !seen[key]++) print $0 }' "$BASE_DIR/country.db" 2>>"$LOG_DIR/debug.log")

        # ÂÆåÂÖ®‰∏ÄËá¥„Åå„Å™„ÅÑÂ†¥Âêà„ÄÅÈÉ®ÂàÜ‰∏ÄËá¥„ÇíÊ§úÁ¥¢
        if [ -z "$search_results" ]; then
            search_results=$(awk -v search="$cleaned_input" 'BEGIN {IGNORECASE=1} 
                { for (i=2; i<=NF; i++) if ($i ~ search) print $0 }' "$BASE_DIR/country.db")
        fi

        if [ -z "$search_results" ]; then
            printf "%s\n" "$(color red "Error: No matching country found for '$input'. Please try again.")"
            continue
        fi

        selection_list "$search_results" "$tmp_country" "country"
        country_write
        select_zone
        return
    done
}

BAK_select_country() {
    debug_log "DEBUG" "Entering select_country() with arg: '$1'"
    
    local cache_country="${CACHE_DIR}/country.ch"
    local tmp_country="${CACHE_DIR}/country_tmp.ch"

    if [ -n "$1" ]; then
        debug_log "INFO" "Processing input: $1"
        local predefined_country=$(awk -v search="$1" 'BEGIN {IGNORECASE=1} 
            $2 == search || $3 == search || $4 == search || $5 == search {print $0}' "$BASE_DIR/country.db")

        if [ -n "$predefined_country" ]; then
            debug_log "INFO" "Found country entry: $predefined_country"
            echo  "$predefined_country" > "$tmp_country"
            country_write
            select_zone  
            return
        else
            debug_log "ERROR" "Invalid input '$1' is not a valid country."
            printf "%s\n" "$(color red "Error: '$1' is not a recognized country name or code.")"
            printf "%s\n" "$(color yellow "Switching to language selection.")"
            set --  
        fi
    fi

    if [ -f "$cache_country" ]; then
        debug_log "INFO" "Country cache found. Skipping selection."
        select_zone
        return
    fi

    while true; do
        printf "%s\n" "$(color cyan "$(get_message "MSG_ENTER_COUNTRY")")"
        printf "%s" "$(color cyan "$(get_message "MSG_SEARCH_KEYWORD")")"
        read -r input
        
        # ÂÖ•Âäõ„ÅÆÊ≠£Ë¶èÂåñ: "/", ",", "_" „Çí„Çπ„Éö„Éº„Çπ„Å´ÁΩÆ„ÅçÊèõ„Åà
        local cleaned_input
        cleaned_input=$(echo "$input" | sed 's/[\/,_]/ /g')
        
        # ÂÆåÂÖ®‰∏ÄËá¥„ÇíÂÑ™ÂÖà
        local search_results
        search_results=$(awk -v search="$cleaned_input" 'BEGIN {IGNORECASE=1} 
            { key = $2" "$3" "$4" "$5; if ($0 ~ search && !seen[key]++) print $0 }' "$BASE_DIR/country.db")


        # ÂÆåÂÖ®‰∏ÄËá¥„Åå„Å™„ÅÑÂ†¥Âêà„ÄÅÈÉ®ÂàÜ‰∏ÄËá¥„ÇíÊ§úÁ¥¢
        if [ -z "$search_results" ]; then
            search_results=$(awk -v search="$cleaned_input" 'BEGIN {IGNORECASE=1} 
                { for (i=2; i<=NF; i++) if ($i ~ search) print $0 }' "$BASE_DIR/country.db")
        fi

        if [ -z "$search_results" ]; then
            printf "%s\n" "$(color red "Error: No matching country found for '$input'. Please try again.")"
            continue
        fi

        selection_list "$search_results" "$tmp_country" "country"
        country_write
        select_zone
        return
    done
}

#########################################################################
# Last Update: 2025-02-12 16:12:39 (JST) üöÄ
# "Precision in code, clarity in purpose. Every update refines the path."
#########################################################################
# selection_list()
# ÈÅ∏Êäû„É™„Çπ„Éà„Çí‰ΩúÊàê„Åó„ÄÅÈÅ∏ÊäûÁµêÊûú„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞„ÄÇ
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `mode=country`:
#     - ÂõΩ„É™„Çπ„Éà„Çí `$2 $3 $4 $5`ÔºàÂõΩÂêç„ÉªË®ÄË™û„ÉªË®ÄË™û„Ç≥„Éº„Éâ„ÉªÂõΩ„Ç≥„Éº„ÉâÔºâ„ÅßË°®Á§∫
#     - `$6` ‰ª•ÈôçÔºà„Çæ„Éº„É≥„Éç„Éº„É†„Éª„Çø„Ç§„É†„Çæ„Éº„É≥Ôºâ„ÅØ **`zone_list_tmp.ch` „Å´‰øùÂ≠ò**
# 2. `mode=zone`:
#     - „Çæ„Éº„É≥„É™„Çπ„Éà„ÇíË°®Á§∫
#     - **„Çæ„Éº„É≥ÊÉÖÂ†±„ÅÆ‰øùÂ≠ò„ÅØ `select_zone()` „Å´‰ªª„Åõ„Çã**
# 3. „Åù„ÅÆ‰ªñ:
#     - ÂÖ•Âäõ„Éá„Éº„Çø„ÅåÁ©∫„Å™„Çâ„Ç®„É©„Éº„ÇíËøî„Åô
#     - ÈÅ∏ÊäûÂæå„Å´ `Y/N` „ÅßÁ¢∫Ë™ç
#########################################################################
selection_list() {
    local input_data="$1"
    local output_file="$2"
    local mode="$3"
    local list_file=""
    local i=1

    if [ "$mode" = "country" ]; then
        list_file="${CACHE_DIR}/country_tmp.ch"
    elif [ "$mode" = "zone" ]; then
        list_file="${CACHE_DIR}/zone_tmp.ch"
    else
        return 1
    fi

    : > "$list_file"

    echo "$input_data" | while IFS= read -r line; do
        if [ "$mode" = "country" ]; then
            local extracted
            extracted=$(echo "$line" | awk '{print $2, $3, $4, $5}')
            if [ -n "$extracted" ]; then
                printf "[%d] %s\n" "$i" "$extracted"
                echo "$line" >> "$list_file"
                i=$((i + 1))
            fi
        elif [ "$mode" = "zone" ]; then
            if [ -n "$line" ]; then
                echo "$line" >> "$list_file"
                printf "[%d] %s\n" "$i" "$line"
                i=$((i + 1))
            fi
        fi
    done

    while true; do
        printf "%s\n" "$(color cyan "$(get_message "MSG_ENTER_NUMBER_CHOICE")")"
        printf "%s" "$(get_message "MSG_SELECT_NUMBER")"
        read -r choice
        local selected_value
        selected_value=$(awk -v num="$choice" 'NR == num {print $0}' "$list_file")

        if [ -z "$selected_value" ]; then
            printf "%s\n" "$(color red "$(get_message "MSG_INVALID_SELECTION")")"
            continue
        fi

        local confirm_info=""
        if [ "$mode" = "country" ]; then
            confirm_info=$(echo "$selected_value" | awk '{print $2, $3, $4, $5}')
        elif [ "$mode" = "zone" ]; then
            confirm_info=$(echo "$selected_value" | awk '{print $1, $2}')
        fi

        printf "%s\n" "$(color cyan "$(get_message "MSG_CONFIRM_SELECTION") [$choice] $confirm_info")"
        printf "%s" "$(get_message "MSG_CONFIRM_YNR")"
        read -r yn
        
        case "$yn" in
            [Yy]*) 
                printf "%s\n" "$selected_value" > "$output_file"
                return
                ;;
            [Nn]*) 
                printf "%s\n" "$(color yellow "Returning to selection.")"
                selection_list "$input_data" "$output_file" "$mode"
                return
                ;;
            [Rr]*)                
                rm -f "$CACHE_DIR/country.ch" \
                "$CACHE_DIR/language.ch" \
                "$CACHE_DIR/luci.ch" \
                "$CACHE_DIR/zone.ch" \
                "$CACHE_DIR/zonename.ch" \
                "$CACHE_DIR/timezone.ch" \
                "$CACHE_DIR/country_success_done" \
                "$CACHE_DIR/timezone_success_done"
                select_country
                return
                ;;
            *)
                printf "%s\n" "$(color red "$(get_message "MSG_INVALID_INPUT_YNR")")"
                continue
                ;;
        esac
    done  
}

#########################################################################
# Last Update: 2025-02-13 14:18:00 (JST) üöÄ
# "Precision in code, clarity in purpose. Every update refines the path."
# country_write(): ÂõΩ„ÅÆÈÅ∏ÊäûÊÉÖÂ†±„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `country.ch` „ÅØ **„Åô„Åπ„Å¶„ÅÆÂü∫Ê∫ñÔºàÁúüÔºâ**
#     - `select_country()` „ÅßÈÅ∏Êäû„Åó„Åü„Éá„Éº„Çø„Çí **ÁÑ°Êù°‰ª∂„Åß `country.ch` „Å´‰øùÂ≠ò**
#     - `country.ch` „ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„Å® `zone()` „ÇÑ `country()` „ÅØÂãï‰Ωú„Åó„Å™„ÅÑ
#     - `country.ch` ‰ΩúÊàêÊôÇ„Å´ **Âç≥ `chattr +i` „Åß‰∏äÊõ∏„ÅçÁ¶ÅÊ≠¢**
#     - **country.ch „ÅÆ„Éá„Éº„Çø„ÇíÂÖÉ„Å´„ÄÅ‰ª•‰∏ã„ÅÆ `ch` „Éï„Ç°„Ç§„É´„ÇÇ‰ΩúÊàê**
#       - `country.ch` (`$3`: Ë®ÄË™ûÂêç)
#       - `luci.ch` (`$4`: Ë®ÄË™û„Ç≥„Éº„Éâ)
#
# 2. `zone_tmp.ch` „ÅØ **„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅÆ„Åæ„Åæ‰øùÂ≠ò**
#     - `$6` ‰ª•Èôç„ÅÆ„Éá„Éº„Çø„Çí **„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅÆ„Åæ„Åæ `zone_tmp.ch` „Å´‰øùÂ≠ò**Ôºà„Çø„Ç§„É†„Çæ„Éº„É≥ÊÉÖÂ†±„ÅØ„Çª„ÉÉ„Éà„Å†„Åã„ÇâÔºâ
#     - `zone()` „ÅÆ„Çø„Ç§„Éü„É≥„Ç∞„Åß **ÈÅ∏Êäû„Åï„Çå„ÅüË°å„Çí `zonename.ch` / `timezone.ch` „Å´ÂàÜÂâ≤‰øùÂ≠ò**
#       - `zonename.ch` ‚Üí `$6`Ôºà„Çæ„Éº„É≥ÂêçÔºâ
#       - `timezone.ch` ‚Üí `$7`Ôºà„Çø„Ç§„É†„Çæ„Éº„É≥Ôºâ
#
# 3. ‰∏äÊõ∏„ÅçÁ¶ÅÊ≠¢ (`ch` „Éï„Ç°„Ç§„É´)
#     - `country.ch`
#     - `luci.ch`
#     - `country.ch`
#     - `zonename.ch`
#     - `timezone.ch`
#
# 4. `zone_tmp.ch` „Åã„Çâ `[1] Áï™Âè∑‰ªò„ÅçÈÅ∏ÊäûÊñπÂºè`
#     - `zone_tmp.ch` „Å´„ÅØ **„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅÆ„Åæ„Åæ** ‰øùÂ≠ò
#     - **ÈÅ∏ÊäûÊôÇ„Å´ `zonename.ch` / `timezone.ch` „Å´ÂàÜÂâ≤Êõ∏„ÅçËæº„Åø**
#     - **`zonename.ch` / `timezone.ch` „ÅØ‰∏äÊõ∏„ÅçÁ¶ÅÊ≠¢Ôºà1Âõû„Å†„ÅëÊõ∏„ÅçËæº„ÅøÂèØËÉΩÔºâ**
#
# 5. `zone_tmp.ch` „ÅåÁ©∫„Å™„ÇâÂÜçÈÅ∏Êäû
#     - `zone_tmp.ch` „Åå **Á©∫„Å†„Å£„Åü„Çâ„ÄÅ`select_country()` „Å´Êàª„Çã**
#     - `zone_tmp.ch` „ÅÆ **`NO_TIMEZONE` „ÅØË®±ÂèØ„Åó„Å™„ÅÑ**
#########################################################################
#########################################################################
# country_write: ÈÅ∏Êäû„Åï„Çå„ÅüÂõΩÊÉÖÂ†±„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò
#
# „ÄêË¶Å‰ª∂„Äë
# - `country.ch` „Å´ **Ë©≤ÂΩìË°å„Çí‰∏∏„Åî„Å®‰øùÂ≠ò**Ôºà„Éá„Éº„Çø„ÅÆÂü∫Ê∫ñÔºâ
# - `language.ch` „Å´ **$5ÔºàË®ÄË™ûÂêçÔºâ** „Çí‰øùÂ≠ò
# - `luci.ch` „Å´ **$4ÔºàË®ÄË™û„Ç≥„Éº„ÉâÔºâ** „Çí‰øùÂ≠ò
# - `country_tmp.ch`Ôºà$1-$5Ôºâ„Çí‰ΩúÊàê
# - `zone_tmp.ch`Ôºà$6-Ôºâ„Çí‰ΩúÊàêÔºà„Çæ„Éº„É≥ÊÉÖÂ†±„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ `NO_TIMEZONE` „ÇíË®òÈå≤Ôºâ
# - `zonename.ch`„ÄÅ`timezone.ch` „ÅØ `select_zone()` „Åß‰ΩúÊàê
#########################################################################
country_write() {
    local tmp_country="${CACHE_DIR}/country_tmp.ch"
    local cache_country="${CACHE_DIR}/country.ch"
    local cache_language="${CACHE_DIR}/language.ch"
    local cache_luci="${CACHE_DIR}/luci.ch"
    local cache_zone="${CACHE_DIR}/zone.ch"

    local country_data=$(cat "$tmp_country" 2>/dev/null)
    if [ -z "$country_data" ]; then
        return
    fi

    local short_code=$(echo "$country_data" | awk '{print $5}')
    local luci_code=$(echo "$country_data" | awk '{print $4}')
    local zone_data=$(echo "$country_data" | awk '{for(i=6; i<=NF; i++) printf "%s ", $i; print ""}')

    echo "$country_data" > "$cache_country"
    echo "$short_code" > "$cache_language"
    echo "$luci_code" > "$cache_luci"
    echo "$zone_data" > "$cache_zone"

    chmod 444 "$cache_country" "$cache_language" "$cache_luci" "$cache_zone"
    
    normalize_country
}

#########################################################################
# Last Update: 2025-02-12 17:25:00 (JST) üöÄ
# "Precision in code, clarity in purpose. Every update refines the path.""
# select_zone: ÈÅ∏Êäû„Åó„ÅüÂõΩ„Å´ÂØæÂøú„Åô„Çã„Çø„Ç§„É†„Çæ„Éº„É≥„ÇíÈÅ∏Êäû
#
# [1] „É¶„Éº„Ç∂„Éº„Åå„Çæ„Éº„É≥„ÇíÈÅ∏Êäû ‚Üê zone.ch
# [2] ‰∏ÄÊôÇ„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò (zone_tmp.ch)
# [3] zone.ch „Åã„Çâ zonename.ch, timezone.ch „ÇíÂàÜÈõ¢
# [4] zonename.ch, timezone.ch „ÇíÊõ∏„ÅçËæº„ÅøÁ¶ÅÊ≠¢„Å´„Åô„Çã
#[5] ‚Üí normalize_country()
#########################################################################
select_zone() {
    local cache_zone="${CACHE_DIR}/zone.ch"
    local cache_zone_tmp="${CACHE_DIR}/zone_tmp.ch"
    local cache_zonename="${CACHE_DIR}/zonename.ch"
    local cache_timezone="${CACHE_DIR}/timezone.ch"
    local flag_zone="${CACHE_DIR}/timezone_success_done"
    
    if [ -s "$cache_zonename" ] && [ -s "$cache_timezone" ]; then
        debug_log "INFO" "Timezone is already set. Skipping select_zone()."
        return
    fi
    
    local zone_data=$(cat "$cache_zone" 2>/dev/null)
    if [ -z "$zone_data" ]; then
        return
    fi

    local formatted_zone_list=$(awk '{gsub(",", " "); for (i=1; i<=NF; i+=2) print $i, $(i+1)}' "$cache_zone")

    selection_list "$formatted_zone_list" "$cache_zone_tmp" "zone"

    local selected_zone=$(cat "$cache_zone_tmp" 2>/dev/null)
    if [ -z "$selected_zone" ]; then
        return
    fi

    local zonename=$(echo "$selected_zone" | awk '{print $1}')
    local timezone=$(echo "$selected_zone" | awk '{print $2}')

    echo "$zonename" > "$cache_zonename"
    echo "$timezone" > "$cache_timezone"

    chmod 444 "$cache_zonename" "$cache_timezone"

    if [ ! -f "$flag_zone" ]; then
        echo "$(get_message "MSG_TIMEZONE_SUCCESS")"
        touch "$flag_zone"
    fi
}

#########################################################################
# Last Update: 2025-02-12 17:10:05 (JST) üöÄ
# "Precision in code, clarity in purpose. Every update refines the path."
# normalize_country: Ë®ÄË™ûË®≠ÂÆö„ÅÆÊ≠£Ë¶èÂåñ
#
# „ÄêË¶Å‰ª∂„Äë
# 1. Ë®ÄË™û„ÅÆÊ±∫ÂÆö:
#    - `country.ch` „ÇíÊúÄÂÑ™ÂÖà„ÅßÂèÇÁÖßÔºàÂ§âÊõ¥‰∏çÂèØÔºâ
#    - `country.ch` „ÅåÁÑ°„ÅÑÂ†¥Âêà„ÅØ `select_country()` „ÇíÂÆüË°å„Åó„ÄÅÊâãÂãïÈÅ∏Êäû
#
# 2. „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË®ÄË™û (`message.ch`) „ÅÆÁ¢∫ÂÆö:
#    - `message.db` „ÅÆ `SUPPORTED_LANGUAGES` „ÇíÁ¢∫Ë™ç
#    - `country.ch` „Å´Ë®òÈå≤„Åï„Çå„ÅüË®ÄË™û„Åå `SUPPORTED_LANGUAGES` „Å´„ÅÇ„Çå„Å∞„ÄÅ„Åù„Çå„Çí `message.ch` „Å´‰øùÂ≠ò
#    - `SUPPORTED_LANGUAGES` „Å´ÁÑ°„ÅÑÂ†¥Âêà„ÄÅ`message.ch` „Å´ `en` „ÇíË®≠ÂÆö
#
# 3. `country.ch` „Å®„ÅÆÈñ¢‰øÇ:
#    - `country.ch` „ÅØ„Éá„Éê„Ç§„ÇπË®≠ÂÆöÁî®ÔºàÂ§âÊõ¥‰∏çÂèØÔºâ
#    - `message.ch` „ÅØ„Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫Áî®Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂèØËÉΩÔºâ
#
# 4. „É°„É≥„ÉÜ„Éä„É≥„Çπ:
#    - `country.ch` „ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å™Â†¥Âêà„Åß„ÇÇÂ§âÊõ¥„Åó„Å™„ÅÑ
#    - `message.ch` „ÅÆ„Åø„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÈÅ©Áî®„Åó„ÄÅ„Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ‰∏ÄË≤´ÊÄß„ÇíÁ∂≠ÊåÅ
#    - Ë®ÄË™ûË®≠ÂÆö„Å´ÂΩ±Èüø„Çí‰∏é„Åà„Åö„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË°®Á§∫„ÅÆ„Åø„ÇíÂà∂Âæ°„Åô„Çã
#########################################################################
normalize_country() {
    local message_db="${BASE_DIR}/messages.db"
    local country_cache="${CACHE_DIR}/country.ch"  # ‰∏ªÔºàÁúüÔºâ„Éá„Éº„Çø
    local message_cache="${CACHE_DIR}/message.ch"
    local selected_language=""
    local flag_file="${CACHE_DIR}/country_success_done"

    # „ÇÇ„ÅóÊó¢„Å´„ÄåÂõΩ„Å®Ë®ÄË™ûË®≠ÂÆöÂÆå‰∫Ü„Äç„ÇíÁ§∫„Åô„Éï„É©„Ç∞„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çå„Å∞„ÄÅ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
    if [ -f "$flag_file" ]; then
        debug_log "INFO" "normalize_country() already done. Skipping repeated success message."
        return
    fi

    # ‚úÖ `country.ch` „ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÄÅ„Ç®„É©„Éº„ÇíËøî„Åó„Å¶ÁµÇ‰∫Ü
    if [ ! -f "$country_cache" ]; then
        debug_log "ERROR: country.ch not found. Cannot determine language."
        return
    fi

    # ‚úÖ `country.ch` „ÅÆ $5ÔºàÂõΩ„Ç≥„Éº„ÉâÔºâ„ÇíÂèñÂæó
    selected_language=$(awk '{print $5}' "$country_cache")

    debug_log "DEBUG: Selected language extracted from country.ch -> $selected_language"

    # ‚úÖ `messages.db` „Åã„Çâ„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„ÇãË®ÄË™û„ÇíÂèñÂæó
    local supported_languages
    supported_languages=$(grep "^SUPPORTED_LANGUAGES=" "$message_db" | cut -d'=' -f2 | tr -d '"')

    # ‚úÖ `selected_language` „Åå `messages.db` „Å´„ÅÇ„ÇãÂ†¥Âêà„ÄÅ„Åù„Çå„Çí `message.ch` „Å´Ë®≠ÂÆö
    if echo "$supported_languages" | grep -qw "$selected_language"; then
        debug_log "INFO: Using message database language: $selected_language"
        echo "$selected_language" > "$message_cache"
    else
        debug_log "WARNING: Language '$selected_language' not found in messages.db. Using 'en' as fallback."
        echo "US" > "$message_cache"
    fi

    debug_log "INFO: Final system message language -> $(cat "$message_cache")"
    echo "$(get_message "MSG_COUNTRY_SUCCESS")"
    touch "$flag_file"    
}

# üî¥„ÄÄ„É©„É≥„Ç≤„Éº„Ç∏ÔºàË®ÄË™û„Éª„Çæ„Éº„É≥ÔºâÁ≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

# üîµ„ÄÄ„Éë„ÉÉ„Ç±„Éº„Ç∏Á≥ª„ÄÄ„Åì„Åì„Åã„Çâ„ÄÄüîµ-------------------------------------------------------------------------------------------------------------------------------------------
#########################################################################
# Last Update: 2025-02-15 10:00:00 (JST) üöÄ
# install_package: „Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´Âá¶ÁêÜ (OpenWrt / Alpine Linux)
#
# „ÄêÊ¶ÇË¶Å„Äë
# ÊåáÂÆö„Åï„Çå„Åü„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„ÄÅ„Ç™„Éó„Ç∑„Éß„É≥„Å´Âøú„Åò„Å¶‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã„ÄÇ
#
# „Äê„Éï„É≠„Éº„Äë
# 1Ô∏è‚É£ install_package update „ÅåÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà„ÄÅopkg update / apk update „ÇíÂÆüË°å
# 2Ô∏è‚É£ „Éá„Éê„Ç§„Çπ„Å´„Éë„ÉÉ„Ç±„Éº„Ç∏„Åå„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅãÁ¢∫Ë™ç
# 3Ô∏è‚É£ „Éë„ÉÉ„Ç±„Éº„Ç∏„Åå„É™„Éù„Ç∏„Éà„É™„Å´Â≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
# 4Ô∏è‚É£ „Ç§„É≥„Çπ„Éà„Éº„É´Á¢∫Ë™çÔºàyn „Ç™„Éó„Ç∑„Éß„É≥„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥ÂêàÔºâ
# 5Ô∏è‚É£ „Ç§„É≥„Çπ„Éà„Éº„É´„ÅÆÂÆüË°å
# 6Ô∏è‚É£ Ë®ÄË™û„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÈÅ©Áî®Ôºàdont „Ç™„Éó„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥ÂêàÔºâ
# 7Ô∏è‚É£ package.db „ÅÆÈÅ©Áî®Ôºànotset „Ç™„Éó„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥ÂêàÔºâ
# 8Ô∏è‚É£ Ë®≠ÂÆö„ÅÆÊúâÂäπÂåñÔºà„Éá„Éï„Ç©„É´„Éà enabled„ÄÅdisabled „Ç™„Éó„Ç∑„Éß„É≥„ÅßÁÑ°ÂäπÂåñÔºâ
#
# „Äê„Ç™„Éó„Ç∑„Éß„É≥„Äë
# - yn         : „Ç§„É≥„Çπ„Éà„Éº„É´Ââç„Å´Á¢∫Ë™ç„Åô„ÇãÔºà„Éá„Éï„Ç©„É´„Éà: Á¢∫Ë™ç„Å™„ÅóÔºâ
# - dont       : Ë®ÄË™û„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÈÅ©Áî®„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºà„Éá„Éï„Ç©„É´„Éà: ÈÅ©Áî®„Åô„ÇãÔºâ
# - notset     : package.db „Åß„ÅÆË®≠ÂÆöÈÅ©Áî®„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºà„Éá„Éï„Ç©„É´„Éà: ÈÅ©Áî®„Åô„ÇãÔºâ
# - disabled   : Ë®≠ÂÆö„Çí disabled „Å´„Åô„ÇãÔºà„Éá„Éï„Ç©„É´„Éà: enabledÔºâ
# - update     : opkg update „Åæ„Åü„ÅØ apk update „ÇíÂÆüË°åÔºà‰ªñ„ÅÆÂ†¥ÊâÄ„Åß„ÅØ update „Åó„Å™„ÅÑÔºâ
# - hidden     : Êó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅÆÂ†¥Âêà„ÄÅ"„Éë„ÉÉ„Ç±„Éº„Ç∏ xxx „ÅØ„Åô„Åß„Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åô" „ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈùûË°®Á§∫„Å´„Åô„Çã
#
# „Äê‰ªïÊßò„Äë
# - downloader_ch „Åã„Çâ opkg „Åæ„Åü„ÅØ apk „ÇíÂèñÂæó„Åó„ÄÅÈÅ©Âàá„Å™„Éë„ÉÉ„Ç±„Éº„Ç∏ÁÆ°ÁêÜ„ÉÑ„Éº„É´„Çí‰ΩøÁî®
# - messages.db „ÇíÂèÇÁÖß„Åó„ÄÅ„Åô„Åπ„Å¶„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæóÔºàJP/US ÂØæÂøúÔºâ
# - package.db „ÅÆË®≠ÂÆö„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅuci set „ÇíÂÆüË°å„ÅóÈÅ©Áî®Ôºànotset „Ç™„Éó„Ç∑„Éß„É≥„ÅßÁÑ°ÂäπÂåñÂèØËÉΩÔºâ
# - Ë®ÄË™û„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅØ luci-app-xxx ÂΩ¢Âºè„ÇíÂØæË±°„Å´ÈÅ©Áî®Ôºàdont „Ç™„Éó„Ç∑„Éß„É≥„ÅßÁÑ°ÂäπÂåñÂèØËÉΩÔºâ
# - Ë®≠ÂÆö„ÅÆÊúâÂäπÂåñ„ÅØ„Éá„Éï„Ç©„É´„Éà enabled„ÄÅdisabled „Ç™„Éó„Ç∑„Éß„É≥ÊåáÂÆöÊôÇ„ÅÆ„Åø disabled
# - update „ÅØÊòéÁ§∫ÁöÑ„Å´ install_package update „ÅßÂÆüË°åÔºà„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´ÊôÇ„Å´„ÅØËá™ÂãïÂÆüË°å„Åó„Å™„ÅÑÔºâ
#
# „Äê‰ΩøÁî®‰æã„Äë
# - install_package update                ‚Üí „Éë„ÉÉ„Ç±„Éº„Ç∏„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
# - install_package ttyd                  ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÁ¢∫Ë™ç„Å™„Åó„ÄÅpackage.db ÈÅ©Áî®„ÄÅË®ÄË™û„Éë„ÉÉ„ÇØÈÅ©Áî®Ôºâ
# - install_package ttyd yn               ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÁ¢∫Ë™ç„ÅÇ„ÇäÔºâ
# - install_package ttyd dont             ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàË®ÄË™û„Éë„ÉÉ„ÇØÈÅ©Áî®„Å™„ÅóÔºâ
# - install_package ttyd notset           ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´Ôºàpackage.db „ÅÆÈÅ©Áî®„Å™„ÅóÔºâ
# - install_package ttyd disabled         ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàË®≠ÂÆö„Çí disabled „Å´„Åô„ÇãÔºâ
# - install_package ttyd yn dont disabled hidden
#   ‚Üí ttyd „Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàÁ¢∫Ë™ç„ÅÇ„Çä„ÄÅË®ÄË™û„Éë„ÉÉ„ÇØÈÅ©Áî®„Å™„Åó„ÄÅË®≠ÂÆö„Çí disabled „Å´„Åó„ÄÅ
#      Êó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÈùûË°®Á§∫Ôºâ
#########################################################################
install_package() {
    local package_name="$1"
    shift  # ÊúÄÂàù„ÅÆÂºïÊï∞ („Éë„ÉÉ„Ç±„Éº„Ç∏Âêç) „ÇíÂèñÂæó„Åó„ÄÅÊÆã„Çä„Çí„Ç™„Éó„Ç∑„Éß„É≥„Å®„Åó„Å¶Âá¶ÁêÜ

    # „Ç™„Éó„Ç∑„Éß„É≥Ëß£Êûê
    local confirm_install="no"
    local skip_lang_pack="no"
    local skip_package_db="no"
    local set_disabled="no"
    local hidden="no"   # hidden „Ç™„Éó„Ç∑„Éß„É≥ÔºöÊó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊäëÂà∂

    for arg in "$@"; do
        case "$arg" in
            yn) confirm_install="yes" ;;
            dont) skip_lang_pack="yes" ;;
            notset) skip_package_db="yes" ;;
            disabled) set_disabled="yes" ;;
            update) 
                if [ "$PACKAGE_MANAGER" = "opkg" ]; then
                    opkg update
                elif [ "$PACKAGE_MANAGER" = "apk" ]; then
                    apk update
                fi
                ;;
            hidden) hidden="yes" ;;
        esac
    done

    # downloader_ch „Åã„Çâ„Éë„ÉÉ„Ç±„Éº„Ç∏„Éû„Éç„Éº„Ç∏„É£„Éº„ÇíÂèñÂæó
    if [ -f "${CACHE_DIR}/downloader_ch" ]; then
        PACKAGE_MANAGER=$(cat "${CACHE_DIR}/downloader_ch")
    else
        echo "$(get_message "MSG_PACKAGE_MANAGER_NOT_FOUND")"
        return 1
    fi

    # „Åô„Åß„Å´„Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„Åø„ÅãÁ¢∫Ë™ç
    if [ "$PACKAGE_MANAGER" = "opkg" ]; then
        if opkg list-installed | grep -q "^$package_name "; then
            if [ "$hidden" != "yes" ]; then
                echo "$(get_message "MSG_PACKAGE_ALREADY_INSTALLED" | sed "s/{pkg}/$package_name/")"
            fi
            return 0
        fi
    elif [ "$PACKAGE_MANAGER" = "apk" ]; then
        if apk list-installed | grep -q "^$package_name "; then
            if [ "$hidden" != "yes" ]; then
                echo "$(get_message "MSG_PACKAGE_ALREADY_INSTALLED" | sed "s/{pkg}/$package_name/")"
            fi
            return 0
        fi
    fi

    # „Ç§„É≥„Çπ„Éà„Éº„É´Á¢∫Ë™ç (yn „Ç™„Éó„Ç∑„Éß„É≥„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà)
    if [ "$confirm_install" = "yes" ]; then
        while true; do
            echo "$(get_message "MSG_CONFIRM_INSTALL" | sed "s/{pkg}/$package_name/")"
            echo -n "$(get_message "MSG_CONFIRM_ONLY_YN")"
            read -r yn
            case "$yn" in
                [Yy]*) break ;;
                [Nn]*) echo "$(get_message "MSG_INSTALL_ABORTED")"; return 1 ;;
                *) echo "Invalid input. Please enter Y or N." ;;
            esac
        done
    fi

    # „Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ (DEV_NULL „Å´Âøú„Åò„Å¶Âá∫ÂäõÂà∂Âæ°)
    if [ "$DEV_NULL" = "on" ]; then
        $PACKAGE_MANAGER install "$package_name" > /dev/null 2>&1
    else
        $PACKAGE_MANAGER install "$package_name"
    fi

    # package.db „ÅÆÈÅ©Áî® (notset „Ç™„Éó„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥Âêà)
    if [ "$skip_package_db" = "no" ] && grep -q "^$package_name=" "${BASE_DIR}/packages.db"; then
        eval "$(grep "^$package_name=" "${BASE_DIR}/packages.db" | cut -d'=' -f2-)"
    fi

    # Ë®≠ÂÆö„ÅÆÊúâÂäπÂåñ/ÁÑ°ÂäπÂåñ
    if [ "$skip_package_db" = "no" ]; then
        if uci get "$package_name.@$package_name[0].enabled" >/dev/null 2>&1; then
            if [ "$set_disabled" = "yes" ]; then
                uci set "$package_name.@$package_name[0].enabled=0"
            else
                uci set "$package_name.@$package_name[0].enabled=1"
            fi
            uci commit "$package_name"
        fi
    fi

    # Ë®ÄË™û„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÈÅ©Áî® (dont „Ç™„Éó„Ç∑„Éß„É≥„Åå„Å™„ÅÑÂ†¥Âêà)
    if [ "$skip_lang_pack" = "no" ] && echo "$package_name" | grep -qE '^luci-app-'; then
        local lang_code
        lang_code=$(cat "${CACHE_DIR}/luci.ch" 2>/dev/null || echo "en")
        local lang_package="luci-i18n-${package_name#luci-app-}-$lang_code"

        if [ "$DEV_NULL" = "on" ]; then
            if $PACKAGE_MANAGER list > /dev/null 2>&1 | grep -q "^$lang_package "; then
                install_package "$lang_package" hidden
            else
                if [ "$lang_code" = "xx" ]; then
                    if $PACKAGE_MANAGER list > /dev/null 2>&1 | grep -q "^luci-i18n-${package_name#luci-app-}-en "; then
                        install_package "luci-i18n-${package_name#luci-app-}-en" hidden
                    elif $PACKAGE_MANAGER list > /dev/null 2>&1 | grep -q "^luci-i18n-${package_name#luci-app-} "; then
                        install_package "luci-i18n-${package_name#luci-app-}" hidden
                    fi
                fi
            fi
        else
            if $PACKAGE_MANAGER list | grep -q "^$lang_package "; then
                install_package "$lang_package"
            else
                if [ "$lang_code" = "xx" ]; then
                    if $PACKAGE_MANAGER list | grep -q "^luci-i18n-${package_name#luci-app-}-en "; then
                        install_package "luci-i18n-${package_name#luci-app-}-en"
                    elif $PACKAGE_MANAGER list | grep -q "^luci-i18n-${package_name#luci-app-} "; then
                        install_package "luci-i18n-${package_name#luci-app-}"
                    fi
                fi
            fi
        fi
    fi

    # „Çµ„Éº„Éì„Çπ„ÅÆÊúâÂäπÂåñ/ÈñãÂßã
    if [ "$set_disabled" = "no" ] && ! echo "$package_name" | grep -qE '^(lib|luci)$'; then
        if [ -f "/etc/init.d/$package_name" ]; then
            /etc/init.d/$package_name enable
            /etc/init.d/$package_name start
        fi
    fi
}

# üî¥„ÄÄ„Éë„ÉÉ„Ç±„Éº„Ç∏Á≥ª„ÄÄ„Åì„Åì„Åæ„Åß„ÄÄüî¥„ÄÄ-------------------------------------------------------------------------------------------------------------------------------------------

#########################################################################
# country_info: ÈÅ∏Êäû„Åï„Çå„ÅüÂõΩ„Å®Ë®ÄË™û„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíË°®Á§∫
#########################################################################
country_info() {
    local country_info_file="${BASE_DIR}/country.ch"
    local selected_language_code=$(cat "${BASE_DIR}/check_country")
    if [ -f "$country_info_file" ]; then
        grep -w "$selected_language_code" "$country_info_file"
    else
        printf "%s\n" "$(color red "Country information not found.")"
    fi
}

#########################################################################
# handle_exit: Ê≠£Â∏∏ÁµÇ‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åó„Å¶ÁµÇ‰∫Ü
#########################################################################
handle_exit() {
    local message="$1"
    color yellow "$message"
    exit 0
}

#########################################################################
# Last Update: 2025-02-15 10:00:00 (JST) üöÄ
# check_option: „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥„Ç™„Éó„Ç∑„Éß„É≥Ëß£Êûê„ÉªÊ≠£Ë¶èÂåñÈñ¢Êï∞
#
# „ÄêÊ¶ÇË¶Å„Äë
# „Åì„ÅÆÈñ¢Êï∞„ÅØ„ÄÅaios Ëµ∑ÂãïÊôÇ„Å´Ê∏°„Åï„Çå„Åü„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÇíËß£Êûê„Åó„ÄÅ
# „ÉÄ„ÉÉ„Ç∑„É•‰ªò„Åç„ÅÆÂºïÊï∞„ÅØ„Ç™„Éó„Ç∑„Éß„É≥„Å®„Åó„Å¶Ëß£Êûê„ÄÅÈùû„ÉÄ„ÉÉ„Ç∑„É•ÂºïÊï∞„ÅØ„Åô„Åπ„Å¶
# Ë®ÄË™û„Ç™„Éó„Ç∑„Éß„É≥„Å®„Åó„Å¶Êâ±„ÅÑ„ÄÅÊúÄÂàù„Å´Ë¶ã„Å§„Åã„Å£„ÅüÂÄ§„Çí SELECTED_LANGUAGE „Å´Ë®≠ÂÆö„Åó„Åæ„Åô„ÄÇ
#
# ‚Äª MODE „ÅÆÊåáÂÆö„ÅØÂøÖ„Åö„ÉÄ„ÉÉ„Ç∑„É•‰ªò„Åç„ÅßË°å„ÅÑ„ÄÅ‰ª•‰∏ã„ÅÆÂêÑ„Éë„Çø„Éº„É≥„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åô„ÄÇ
#     common_full  : -cf, --cf, -common_full, --common_full  ‚Üí MODE="full"
#     common_light : -cl, --cl, -ocommon_light, --ocommon_light ‚Üí MODE="light"
#     common_debug : -cd, --cd, -common_debug, --common_debug, --ocommon_debug ‚Üí MODE="debug"
#     reset        : -r, --r, -reset, --reset, -resrt, --resrt ‚Üí MODE="reset" „Åä„Çà„Å≥ RESET="true"
#
# „ÄêÂØæÂøú„Ç™„Éó„Ç∑„Éß„É≥„Äë
#  - „Éò„É´„Éó:         -h, --h, -help, --help, -?, --?  
#  - „Éê„Éº„Ç∏„Éß„É≥:     -v, --v, -version, --version  
#  - „Éá„Éê„ÉÉ„Ç∞:       -d, --d, -debug, --debug, -d1, --d1  
#                     ‚Üí DEBUG_MODE="true", DEBUG_LEVEL="DEBUG"
#                   -d2, --d2, -debug2, --debug2  
#                     ‚Üí DEBUG_MODE="true", DEBUG_LEVEL="DEBUG2"
#  - „É¢„Éº„ÉâÊåáÂÆö:
#       - full:       -cf, --cf, -common_full, --common_full  ‚Üí MODE="full"
#       - light:      -cl, --cl, -ocommon_light, --ocommon_light ‚Üí MODE="light"
#       - debug:      -cd, --cd, -common_debug, --common_debug, --ocommon_debug ‚Üí MODE="debug"
#       - reset:      -r, --r, -reset, --reset, -resrt, --resrt ‚Üí MODE="reset", RESET="true"
#  - Âº∑Âà∂ÂÆüË°å:       -f, --f, -force, --force  ‚Üí FORCE="true"
#  - „Éâ„É©„Ç§„É©„É≥:     -dr, --dr, -dry-run, --dry-run  ‚Üí DRY_RUN="true"
#  - „É≠„Ç∞Âá∫ÂäõÂÖà:     -l, --l, -logfile, --logfile <path>  ‚Üí LOGFILE „Å´ÊåáÂÆö„Éë„Çπ
#
# „Äê‰ªïÊßò„Äë
# 1. „ÉÄ„ÉÉ„Ç∑„É•‰ªò„Åç„ÅÆÂºïÊï∞„ÅØ„Ç™„Éó„Ç∑„Éß„É≥„Å®„Åó„Å¶Ëß£Êûê„Åó„ÄÅÈùû„ÉÄ„ÉÉ„Ç∑„É•ÂºïÊï∞„ÅØ„Åô„Åπ„Å¶ SELECTED_LANGUAGE „Å®„Åó„Å¶Êâ±„ÅÑ„Åæ„Åô„ÄÇ
# 2. Ëß£ÊûêÁµêÊûú„ÅØ„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ SELECTED_LANGUAGE, DEBUG_MODE, DEBUG_LEVEL, MODE, DRY_RUN, LOGFILE, FORCE, RESET, HELP „Å®„Åó„Å¶„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åï„Çå„ÄÅ
#    ÂæåÁ∂ö„ÅÆ check_common(), select_country(), debug(), script_version() „Å™„Å©„Å´Ê≠£Ë¶èÂåñ„Åï„Çå„ÅüÂÄ§„Å®„Åó„Å¶Ê∏°„Åï„Çå„Åæ„Åô„ÄÇ
#
# „Äê‰ΩøÁî®‰æã„Äë
#   sh aios.sh -d --dry-run --reset -l /var/log/aios.log -f -cf en
#    ‚Üí Ë®ÄË™û "en" „Åå SELECTED_LANGUAGE „Å´Ë®≠ÂÆö„Åï„Çå„ÄÅMODE „ÅØ "full"Ôºà-cfÁ≠â„ÅßÊåáÂÆöÔºâ„ÄÅ„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâÊúâÂäπ„ÄÅ
#       „Ç≠„É£„ÉÉ„Ç∑„É•„É™„Çª„ÉÉ„Éà„ÄÅ„Éâ„É©„Ç§„É©„É≥„ÄÅ„É≠„Ç∞Âá∫ÂäõÂÖà /var/log/aios.log„ÄÅÂº∑Âà∂ÂÆüË°å„ÅåÊúâÂäπ„Å´„Å™„Çã„ÄÇ
#########################################################################
check_option() {
    debug_log DEBUG "check_option received before args: $*"

    # „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÅÆË®≠ÂÆö
    SELECTED_LANGUAGE=""
    MODE="full"
    DEBUG_MODE="false"
    DEBUG_LEVEL="INFO"
    DRY_RUN="false"
    LOGFILE=""
    FORCE="false"
    RESET="false"
    HELP="false"

    # Ë®ÄË™û„Åä„Çà„Å≥„Ç™„Éó„Ç∑„Éß„É≥ÂºïÊï∞„ÅÆÂá¶ÁêÜ
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--h|-help|--help|-\?|--\?)
                HELP="true"
                print_help
                exit 0
                ;;
            -v|--v|-version|--version)
                script_version
                exit 0
                ;;
            -d|--d|-debug|--debug|-d1|--d1)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG"
                ;;
            -d2|--d2|-debug2|--debug2)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG2"
                ;;
            -cf|--cf|-common_full|--common_full)
                MODE="full"
                ;;
            -cl|--cl|-ocommon_light|--ocommon_light)
                MODE="light"
                ;;
            -cd|--cd|-common_debug|--common_debug|--ocommon_debug)
                MODE="debug"
                ;;
            -r|--r|-reset|--reset|-resrt|--resrt)
                MODE="reset"
                RESET="true"
                ;;
            -f|--f|-force|--force)
                FORCE="true"
                ;;
            -dr|--dr|-dry-run|--dry-run)
                DRY_RUN="true"
                ;;
            -l|--l|-logfile|--logfile)
                if [ -n "$2" ] && [ "${2#-}" != "$2" ]; then
                    LOGFILE="$2"
                    shift
                else
                    echo "Error: --logfile requires a path argument"
                    exit 1
                fi
                ;;
            -*)
                echo "Warning: Unknown option: $1" >&2
                ;;
            *)
                if [ -z "$SELECTED_LANGUAGE" ]; then
                    SELECTED_LANGUAGE="$1"
                fi
                ;;
        esac
        shift
    done

    # Áí∞Â¢ÉÂ§âÊï∞„Å®„Åó„Å¶Ë®≠ÂÆö
    export SELECTED_LANGUAGE DEBUG_MODE DEBUG_LEVEL MODE DRY_RUN LOGFILE FORCE RESET HELP

    # „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂá∫Âäõ
    debug_log DEBUG "check_option: SELECTED_LANGUAGE='$SELECTED_LANGUAGE', MODE='$MODE', DEBUG_MODE='$DEBUG_MODE', DEBUG_LEVEL='$DEBUG_LEVEL', DRY_RUN='$DRY_RUN', LOGFILE='$LOGFILE', FORCE='$FORCE', RESET='$RESET', HELP='$HELP'"

    # Ë®≠ÂÆö„Åï„Çå„ÅüË®ÄË™û„Çí `check_common()` „Å´Ê∏°„Åô
    check_common "$SELECTED_LANGUAGE"
}

#########################################################################
# Last Update: 2025-02-16 21:45:00 (JST) üöÄ
# "Ensuring seamless updates, one script at a time."
#
# „ÄêË¶Å‰ª∂„Äë
# 1. `download_script()` „Çí `download()` „Å´Áµ±Âêà„Åó„ÄÅ‰∏ÄË≤´ÊÄß„ÇíÁ¢∫‰øù„Åô„Çã„ÄÇ
# 2. `debug_log()` „ÇíÂº∑Âåñ„Åó„ÄÅ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁä∂Ê≥Å„ÇíË©≥Á¥∞„Å´Ë®òÈå≤„ÄÇ
# 3. `download()` „ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÇíË¶ãÁõ¥„Åó„ÄÅÂ§±ÊïóÊôÇ„ÅÆÊåôÂãï„ÇíÊîπÂñÑ„ÄÇ
# 4. `openwrt.db`, `messages.db`, `country.db`, `packages.db` „ÇíÈÅ©Âàá„Å´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÄÇ
# 5. ÂΩ±ÈüøÁØÑÂõ≤: `common.sh`ÔºàÁüõÁõæ„Å™„ÅèÈÅ©Áî®Ôºâ„ÄÇ
#########################################################################
check_common() {
    local lang_code="$1"
    local mode="${2:-full}" 

    echo "üîç MODE: $MODE"

    case "$MODE" in
        reset)
            debug_log "INFO" "Reset mode: Clearing all cache files."
            rm -f "${CACHE_DIR}/country.ch" \
                  "${CACHE_DIR}/language.ch" \
                  "${CACHE_DIR}/luci.ch" \
                  "${CACHE_DIR}/zone.ch" \
                  "${CACHE_DIR}/zonename.ch" \
                  "${CACHE_DIR}/timezone.ch" \
                  "${CACHE_DIR}/country_success_done" \
                  "${CACHE_DIR}/timezone_success_done"
            echo "$(get_message "MSG_RESET_COMPLETE")"
            exit 0
            ;;
        full)
            debug_log "INFO" "check_common called with lang_code: '$lang_code' and MODE: '$MODE'"
            #script_update "$SCRIPT_VERSION" || handle_error "ERR_SCRIPT_UPDATE" "script_update" "latest"  
            download "openwrt.db" "db" || handle_error "ERR_DOWNLOAD" "openwrt.db" "latest"
            download "country.db" "db" || handle_error "ERR_DOWNLOAD" "country.db" "latest"
            download "packages.db" "db" || handle_error "ERR_DOWNLOAD" "packages.db" "latest"
            download "messages.db" "db" || handle_error "ERR_DOWNLOAD" "messages.db" "latest"
            check_openwrt || handle_error "ERR_OPENWRT_VERSION" "check_openwrt" "latest"
            get_package_manager
            debug_log "DEBUG" "Calling select_country() with lang_code: '$lang_code'"
            select_country "$lang_code"
            debug_log "DEBUG" "Returned from select_country()"
            ;;
        light)
            if [ -f "${CACHE_DIR}/country.ch" ]; then
                debug_log "INFO" "Country cache found; skipping country selection."
            else
                select_country "$lang_code"
            fi
            ;;
        debug)
            debug_log "DEBUG" "Running in debug mode: Additional debug output enabled."
            select_country "$lang_code"
            debug_log "DEBUG" "Post country selection debug info..."
            ;;
        *)
            select_country "$lang_code"
            ;;
    esac
}
