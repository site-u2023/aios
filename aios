#!/bin/sh

SCRIPT_VERSION="2025.04.22-00-00"

# =========================================================
# 📌 OpenWrt / Alpine Linux POSIX-Compliant Shell Script
# 🚀 Last Update: 2025-02-21
#
# 🏷️ License: CC0 (Public Domain)
# 🎯 Compatibility: OpenWrt >= 19.07 (Tested on 24.10.0)
#
# ⚠️ IMPORTANT NOTICE:
# OpenWrt OS exclusively uses **Almquist Shell (ash)** and
# is **NOT** compatible with Bourne-Again Shell (bash).
#
# 📢 POSIX Compliance Guidelines:
# ✅ Use `[` instead of `[[` for conditions
# ✅ Use $(command) instead of backticks `command`
# ✅ Use $(( )) for arithmetic instead of let
# ✅ Define functions as func_name() {} (no function keyword)
# ✅ No associative arrays (declare -A is NOT supported)
# ✅ No here-strings (<<< is NOT supported)
# ✅ No -v flag in test or [[
# ✅ Avoid bash-specific string operations like ${var:0:3}
# ✅ Avoid arrays entirely when possible (even indexed arrays can be problematic)
# ✅ Use printf followed by read instead of read -p
# ✅ Use printf instead of echo -e for portable formatting
# ✅ Avoid process substitution <() and >()
# ✅ Prefer case statements over complex if/elif chains
# ✅ Use command -v instead of which or type for command existence checks
# ✅ Keep scripts modular with small, focused functions
# ✅ Use simple error handling instead of complex traps
# ✅ Test scripts with ash/dash explicitly, not just bash
#
# 🛠️ Keep it simple, POSIX-compliant, and lightweight for OpenWrt!
### =========================================================
### 📌 AI Assistance Request: POSIX-Compliant Debugging Guide
### 
### When debugging or fixing errors in this POSIX shell script:
### 
### 1️⃣ Create a minimal reproducible test case (avoid bash features)
### 2️⃣ Test with ash/dash explicitly: dash ./test.sh
### 3️⃣ Use portable debugging methods: echo, printf, or set -x
### 4️⃣ Validate fixes against all POSIX compliance guidelines
### 5️⃣ Ensure the solution works in resource-constrained OpenWrt
### 
### ⚠️ IMPORTANT:
### - Avoid suggesting bash-specific solutions
### - Always test fixes with ash/dash before implementation
### - Prefer simple solutions over complex ones
### - Do not modify production code without test verification
### 
### 🛠️ Keep debugging simple, focused, and POSIX-compliant!
### =========================================================

# システム制御
DEV_NULL="${DEV_NULL:-on}"       # サイレントモード制御（on=有効, unset=無効）
DEBUG_MODE="${DEBUG_MODE:-false}" # デバッグモード（true=有効, false=無効）
DOWNLOAD_METHOD="${DOWNLOAD_METHOD:-api}" # ダウンロード方式 (api/direct)
# DOWNLOAD_METHOD="${DOWNLOAD_METHOD:-direct}" # ダウンロード方式 (api/direct)

# パス・ファイル関連
INTERPRETER="${INTERPRETER:-ash}"  # デフォルトインタープリタ
script_dir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd )"
script_path="${script_dir}/$(basename "$0")"
BIN_DIR="$script_dir"    # ディレクトリの絶対パス
BIN_PATH="$script_path"  # スクリプトファイルの絶対パス
BIN_FILE="$(basename "$0")" # スクリプトファイル名

# ベースディレクトリ設定
BASE_DIR="${BASE_DIR:-/tmp/aios}"      # 基本ディレクトリ
CACHE_DIR="${CACHE_DIR:-$BASE_DIR/cache}" # キャッシュディレクトリ
FEED_DIR="${FEED_DIR:-$BASE_DIR/feed}" # フィードディレクトリ
LOG_DIR="${LOG_DIR:-$BASE_DIR/logs}"   # ログディレクトリ

# スピナーデフォルト設定
SPINNER_DELAY="1" # デフォルトは秒単位
SPINNER_USLEEP_VALUE="1000000" # 1秒（マイクロ秒）
SPINNER_COLOR="white" # デフォルトのスピナー色
ANIMATION_ENABLED="1" # アニメーション有効/無効フラグ

# ダウンロード関連設定
BASE_URL="${BASE_URL:-https://raw.githubusercontent.com/site-u2023/aios/main}" # 基本URL
CACHE_BUST="?cache_bust=$(date +%s)" # キャッシュバスティングパラメータ

# wget関連設定
BASE_WGET="wget --no-check-certificate -q" # 基本wgetコマンド
BASE_WGET_AUTH_BEARER='wget --no-check-certificate -q -O "$1" --header="Authorization: Bearer $2" "$3"' # Bearer認証用
BASE_WGET_AUTH_TOKEN='wget --no-check-certificate -q -O "$1" --header="Authorization: token $2" "$3"'   # Token認証用

# GitHub API認証関連
GITHUB_TOKEN_FILE="/etc/aios_token" # GitHubトークン保存ファイル
UPDATE_CACHE="${CACHE_DIR}/update.ch" # 更新情報キャッシュ

# メッセージ翻訳システムの設定
DEFAULT_LANGUAGE="${DEFAULT_LANGUAGE:-en}"  # デフォルト言語
MSG_MEMORY=""                          # メッセージキャッシュ
MSG_MEMORY_INITIALIZED="false"         # メモリキャッシュ初期化フラグ
MSG_MEMORY_LANG=""                     # メモリキャッシュの言語

# String Formatting Control within get_message function
GET_MESSAGE_FORMATTING_ENABLED="true"   # get_message 内でのフォーマット処理全体を有効にするか (true/false)
FORMAT_TYPE_UPPER_ENABLED="true"        # 'upper' (大文字) フォーマットを有効にするか (true/false)
FORMAT_TYPE_CAPITALIZE_ENABLED="true"   # 'capitalize' (先頭大文字) フォーマットを有効にするか (true/false)

# メッセージキャッシュ
MSG_MEMORY=""
MSG_MEMORY_INITIALIZED="false"
MSG_MEMORY_LANG=""

# GitHub APIレート制限情報
API_REMAINING=""       # 残りAPI呼び出し回数
API_LIMIT=""           # APIレート制限値
API_RESET_TIME=""      # API制限リセット時間（分）
API_AUTH_METHOD=""     # 認証方法（token/bearer/direct）
API_LAST_CHECK=""      # 最終API確認時間（Unix時間）
API_CACHE_TTL="60"     # APIキャッシュ有効期間（秒）

# コミット情報キャッシュ関連
COMMIT_CACHE_DIR="${CACHE_DIR}/commits" # コミット情報キャッシュディレクトリ
COMMIT_CACHE_TTL="1800" # コミットキャッシュ有効期間（30分=1800秒）
SKIP_CACHE="false"     # キャッシュスキップフラグ（true=キャッシュ無視）

# 🔵　エラー・デバッグ　ここから　🔵-------------------------------------------------------------------------------------------------------------------------------------------

handle_error() {
    local error_key="$1"
    local file="$2"
    local version="$3"
    local exit_required="${4:-no}"

    local error_message
    error_message=$(get_message "$error_key")

    # メッセージが取得できなかった場合のフォールバック
    if [ -z "$error_message" ]; then
        error_message="Unknown error occurred. Key: $error_key"
    fi

    # 変数を置換
    error_message=$(echo "$error_message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # ログ記録 & 表示
    debug_log "DEBUG" "$error_message"
    echo -e "$(color red "$error_message")"

    if [ "$exit_required" = "yes" ]; then
        debug_log "DEBUG" "Critical error occurred, exiting: $error_message"
        exit 1
    else
        debug_log "DEBUG" "Non-critical error: $error_message"
        return 1
    fi
}

debug_log() {
    local level="$1"
    local message="$2"
    local file="$3"
    local version="$4"
    local debug_level="${DEBUG_LEVEL:-ERROR}"  # デフォルト値を設定
    
    # レベル判定のシンプル化
    case "$level" in
        "DEBUG"|"INFO"|"WARN"|"ERROR") ;;
        "")
            level="DEBUG"
            message="$1"
            file="$2"
            version="$3"
            ;;
        *)
            message="$1"
            file="$2"
            version="$3"
            level="DEBUG"
            ;;
    esac

    # バージョン情報のクリーニング（メッセージにバージョン情報が含まれる場合）
    if echo "$message" | grep -q "version\|Version"; then
        # バージョン情報部分を抽出してクリーニング
        local cleaned_message="$message"
        # aios - [2025-03-10... のようなパターンを検出
        if echo "$message" | grep -q " - "; then
            local prefix=$(echo "$message" | sed 's/ - .*//')
            local version_part=$(echo "$message" | sed 's/.* - //')
            
            # clean_version_string関数を呼び出し
            local cleaned_version=$(clean_version_string "$version_part")
            
            cleaned_message="$prefix - $cleaned_version"
        fi
        message="$cleaned_message"
    fi

    # 変数を置換
    message=$(echo "$message" | sed -e "s/{file}/$file/g" -e "s/{version}/$version/g")

    # ログレベル制御
    case "$DEBUG_LEVEL" in
        DEBUG)    allowed_levels="DEBUG INFO WARN ERROR" ;;
        INFO)     allowed_levels="INFO WARN ERROR" ;;
        WARN)     allowed_levels="WARN ERROR" ;;
        ERROR)    allowed_levels="ERROR" ;;
        *)        allowed_levels="ERROR" ;;
    esac

    if echo "$allowed_levels" | grep -q "$level"; then
        local timestamp
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        local log_message="[$timestamp] $level: $message"

        # カラー表示 - 標準エラー出力に出力
        case "$level" in
            "ERROR") printf "%s\n" "$(color red "$log_message")" >&2 ;;
            "WARN") printf "%s\n" "$(color yellow "$log_message")" >&2 ;;
            "INFO") printf "%s\n" "$(color cyan "$log_message")" >&2 ;;
            "DEBUG") printf "%s\n" "$(color white "$log_message")" >&2 ;;
        esac

        # ログファイルに記録
        if [ "$AIOS_INITIALIZED" = "true" ] && [ -d "$LOG_DIR" ]; then
            echo "$log_message" >> "$LOG_DIR/debug.log" 2>/dev/null
        fi
    fi
}

# 🔴　エラー・デバッグ　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　ヘルプ　ここから　🔵-------------------------------------------------------------------------------------------------------------------------------------------

print_help() {
    printf "%s\n\n" "$(get_message "MSG_HELP_USAGE")"
    
    printf "%s\n" "$(get_message "MSG_HELP_OPTIONS_HEADER")"
    printf "  %-25s %s\n" "-h, --help" "$(get_message "MSG_HELP_HELP")"
    printf "  %-25s %s\n" "-v, --version" "$(get_message "MSG_HELP_VERSION")"
    printf "  %-25s %s\n" "-r, --reset" "$(get_message "MSG_HELP_RESET")"
    printf "  %-25s %s\n" "-d, --debug" "$(get_message "MSG_HELP_DEBUG")"
    printf "  %-25s %s\n" "-u, --update" "$(get_message "MSG_HELP_UPDATE")"
    printf "  %-25s %s\n" "-f, --force" "$(get_message "MSG_HELP_FORCE")"
    printf "  %-25s %s\n" "-t, --token" "$(get_message "MSG_HELP_TOKEN")"
    printf "  %-25s %s\n" "-cf, --common_full" "$(get_message "MSG_HELP_FULL")"
    printf "  %-25s %s\n" "-cl, --common_light" "$(get_message "MSG_HELP_LIGHT")"
    printf "  %-25s %s\n" "-cd, --common_debug" "$(get_message "MSG_HELP_COMMON_DEBUG")"
    printf "  %-25s %s\n" "-dr, --dry-run" "$(get_message "MSG_HELP_DRY_RUN")"
    printf "  %-25s %s\n" "-nc, --no-cache" "Skip using cached version data"
    
    printf "\n%s\n" "$(get_message "MSG_HELP_LANGUAGE_HEADER")"
    printf "  %-25s %s\n" "US, JP, ..." "$(get_message "MSG_HELP_LANGUAGE")"
    
    printf "\n%s\n" "$(get_message "MSG_HELP_EXAMPLES_HEADER")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE1")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE2")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE3")"
    printf "  %s\n" "$(get_message "MSG_HELP_EXAMPLE4")"
}

# 🔴　ヘルプ　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　カラー系　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

# 基本色表示関数
color() {
    local c="$1"; shift
    case "$c" in
        red) printf "\033[38;5;196m%s\033[0m" "$*" ;;
        orange) printf "\033[38;5;208m%s\033[0m" "$*" ;;
        yellow) printf "\033[38;5;226m%s\033[0m" "$*" ;;
        green) printf "\033[38;5;46m%s\033[0m" "$*" ;;
        cyan) printf "\033[38;5;51m%s\033[0m" "$*" ;;
        blue) printf "\033[38;5;33m%s\033[0m" "$*" ;;
        indigo) printf "\033[38;5;57m%s\033[0m" "$*" ;;
        purple) printf "\033[38;5;129m%s\033[0m" "$*" ;;
        magenta) printf "\033[38;5;201m%s\033[0m" "$*" ;;
        white) printf "\033[37m%s\033[0m" "$*" ;;
        black) printf "\033[30m%s\033[0m" "$*" ;;
        *) printf "%s" "$*" ;;
    esac
}

# 🔴　カラー系　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　メッセージ系　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

# メモリへのメッセージ読み込み関数
into_memory_message() {
    local lang="$DEFAULT_LANGUAGE"
    if [ -f "${CACHE_DIR}/message.ch" ]; then
        lang=$(cat "${CACHE_DIR}/message.ch")
    fi
    
    # メモリメッセージの初期化 - 基本的な補助メッセージのみを保持
    MSG_MEMORY=""
    
    # 基本メッセージの設定
    MSG_MEMORY="${MSG_MEMORY}${lang}|CONFIG_DOWNLOAD_SUCCESS=Downloaded{:}"$'\n'
    MSG_MEMORY="${MSG_MEMORY}${lang}|CONFIG_DOWNLOAD_UNNECESSARY=Latest Files{:}"$'\n'
    MSG_MEMORY="${MSG_MEMORY}${lang}|MSG_RESET_COMPLETE=Reset completed. All cached data has been cleared"$'\n'
    MSG_MEMORY="${MSG_MEMORY}${lang}|MSG_DELETE_COMPLETE=Delete completed. All base data has been cleared"$'\n'
    
    # DBファイルの内容を追加しない - DBファイルが主要ソース
    
    MSG_MEMORY_INITIALIZED="true"
    MSG_MEMORY_LANG="$lang"
}

# 翻訳システムを初期化する関数
init_translation() {
    debug_log "DEBUG" "Initializing translation system"
    
    # message.chが無い場合、デフォルト言語を設定
    if [ ! -f "${CACHE_DIR}/message.ch" ] && [ -f "${BASE_DIR}/message_${DEFAULT_LANGUAGE}.db" ]; then
        echo "$DEFAULT_LANGUAGE" > "${CACHE_DIR}/message.ch"
        debug_log "DEBUG" "Created default language settings: $DEFAULT_LANGUAGE"
    fi
    
    # メモリ内メッセージの初期化
    into_memory_message
    
    debug_log "DEBUG" "Translation module initialization complete"
    return 0
}

# メッセージDBファイルのパスを取得する関数
check_message_cache() {
    local lang="$1"
    
    # 言語パラメータの確認
    if [ -z "$lang" ]; then
        # 言語が指定されていない場合、message.chから取得
        if [ -f "${CACHE_DIR}/message.ch" ]; then
            lang=$(cat "${CACHE_DIR}/message.ch")
        else
            lang="$DEFAULT_LANGUAGE"
        fi
    fi
    
    # 言語固有DBの確認
    if [ -f "${BASE_DIR}/message_${lang}.db" ]; then
        echo "${BASE_DIR}/message_${lang}.db"
        return 0
    fi
    
    # デフォルト言語DBの確認
    if [ -f "${BASE_DIR}/message_${DEFAULT_LANGUAGE}.db" ]; then
        echo "${BASE_DIR}/message_${DEFAULT_LANGUAGE}.db"
        return 0
    fi
    
    # 何も見つからない場合は空文字列
    echo ""
    return 0
}

# Function to format strings based on specified type
# Usage: format_string <format_type> <input_string>
# format_type: "upper" (all uppercase), "capitalize" (first letter uppercase, rest lowercase)
# Default: returns original string if type is unknown or empty
format_string() {
    local format_type="$1"
    local input_string="$2"
    local output_string=""
    local char=""
    local i=0
    local length=0

    # Check if input string is empty
    if [ -z "$input_string" ]; then
        printf "" # Use printf instead of echo for consistency
        return 0
    fi

    case "$format_type" in
        "upper")
            # Convert entire string to uppercase using shell loop and case
            debug_log "DEBUG" "format_string: Formatting to uppercase (using loop)"
            length=${#input_string}
            while [ "$i" -lt "$length" ]; do
                char="${input_string:$i:1}"
                case "$char" in
                    a) output_string="${output_string}A" ;;
                    b) output_string="${output_string}B" ;;
                    c) output_string="${output_string}C" ;;
                    d) output_string="${output_string}D" ;;
                    e) output_string="${output_string}E" ;;
                    f) output_string="${output_string}F" ;;
                    g) output_string="${output_string}G" ;;
                    h) output_string="${output_string}H" ;;
                    i) output_string="${output_string}I" ;;
                    j) output_string="${output_string}J" ;;
                    k) output_string="${output_string}K" ;;
                    l) output_string="${output_string}L" ;;
                    m) output_string="${output_string}M" ;;
                    n) output_string="${output_string}N" ;;
                    o) output_string="${output_string}O" ;;
                    p) output_string="${output_string}P" ;;
                    q) output_string="${output_string}Q" ;;
                    r) output_string="${output_string}R" ;;
                    s) output_string="${output_string}S" ;;
                    t) output_string="${output_string}T" ;;
                    u) output_string="${output_string}U" ;;
                    v) output_string="${output_string}V" ;;
                    w) output_string="${output_string}W" ;;
                    x) output_string="${output_string}X" ;;
                    y) output_string="${output_string}Y" ;;
                    z) output_string="${output_string}Z" ;;
                    *) output_string="${output_string}${char}" ;; # Append non-lowercase chars as is
                esac
                i=$((i + 1))
            done
            ;;
        "capitalize")
            # Convert first letter to uppercase, rest to lowercase using shell loop and case
            debug_log "DEBUG" "format_string: Formatting to capitalize (using loop)"
            # Extract first character and rest of the string (ash/bash extensions)
            local first_char="${input_string:0:1}"
            local rest_string="${input_string:1}"

            # Convert first char to uppercase
            case "$first_char" in
                a) output_string="A" ;;
                b) output_string="B" ;;
                c) output_string="C" ;;
                d) output_string="D" ;;
                e) output_string="E" ;;
                f) output_string="F" ;;
                g) output_string="G" ;;
                h) output_string="H" ;;
                i) output_string="I" ;;
                j) output_string="J" ;;
                k) output_string="K" ;;
                l) output_string="L" ;;
                m) output_string="M" ;;
                n) output_string="N" ;;
                o) output_string="O" ;;
                p) output_string="P" ;;
                q) output_string="Q" ;;
                r) output_string="R" ;;
                s) output_string="S" ;;
                t) output_string="T" ;;
                u) output_string="U" ;;
                v) output_string="V" ;;
                w) output_string="W" ;;
                x) output_string="X" ;;
                y) output_string="Y" ;;
                z) output_string="Z" ;;
                *) output_string="$first_char" ;; # Append non-lowercase first char as is
            esac

            # Convert rest of the string to lowercase
            length=${#rest_string}
            i=0 # Reset loop counter
            while [ "$i" -lt "$length" ]; do
                char="${rest_string:$i:1}"
                case "$char" in
                    A) output_string="${output_string}a" ;;
                    B) output_string="${output_string}b" ;;
                    C) output_string="${output_string}c" ;;
                    D) output_string="${output_string}d" ;;
                    E) output_string="${output_string}e" ;;
                    F) output_string="${output_string}f" ;;
                    G) output_string="${output_string}g" ;;
                    H) output_string="${output_string}h" ;;
                    I) output_string="${output_string}i" ;;
                    J) output_string="${output_string}j" ;;
                    K) output_string="${output_string}k" ;;
                    L) output_string="${output_string}l" ;;
                    M) output_string="${output_string}m" ;;
                    N) output_string="${output_string}n" ;;
                    O) output_string="${output_string}o" ;;
                    P) output_string="${output_string}p" ;;
                    Q) output_string="${output_string}q" ;;
                    R) output_string="${output_string}r" ;;
                    S) output_string="${output_string}s" ;;
                    T) output_string="${output_string}t" ;;
                    U) output_string="${output_string}u" ;;
                    V) output_string="${output_string}v" ;;
                    W) output_string="${output_string}w" ;;
                    X) output_string="${output_string}x" ;;
                    Y) output_string="${output_string}y" ;;
                    Z) output_string="${output_string}z" ;;
                    *) output_string="${output_string}${char}" ;; # Append non-uppercase chars as is
                esac
                i=$((i + 1))
            done
            ;;
        *)
            # Unknown or empty format type, return original string
            debug_log "DEBUG" "format_string: Unknown format type '$format_type', returning original string"
            output_string="$input_string"
            ;;
    esac

    # Return the formatted string
    printf '%s' "$output_string"
    return 0
}

# Function to format strings based on specified type
# Usage: format_string <format_type> <input_string>
# format_type: "upper" (all uppercase), "capitalize" (first letter uppercase, rest lowercase)
# Default: returns original string if type is unknown or empty
OK_format_string() {
    local format_type="$1"
    local input_string="$2"
    local output_string=""

    # Check if input string is empty
    if [ -z "$input_string" ]; then
        echo ""
        return 0
    fi

    case "$format_type" in
        "upper")
            # Convert entire string to uppercase using sed
            debug_log "DEBUG" "format_string: Formatting to uppercase"
            output_string=$(echo "$input_string" | sed \
                -e 's/a/A/g' -e 's/b/B/g' -e 's/c/C/g' -e 's/d/D/g' -e 's/e/E/g' \
                -e 's/f/F/g' -e 's/g/G/g' -e 's/h/H/g' -e 's/i/I/g' -e 's/j/J/g' \
                -e 's/k/K/g' -e 's/l/L/g' -e 's/m/M/g' -e 's/n/N/g' -e 's/o/O/g' \
                -e 's/p/P/g' -e 's/q/Q/g' -e 's/r/R/g' -e 's/s/S/g' -e 's/t/T/g' \
                -e 's/u/U/g' -e 's/v/V/g' -e 's/w/W/g' -e 's/x/X/g' -e 's/y/Y/g' \
                -e 's/z/Z/g')
            ;;
        "capitalize")
            # Convert first letter to uppercase, rest to lowercase
            debug_log "DEBUG" "format_string: Formatting to capitalize"
            # Extract first character
            local first_char=$(echo "$input_string" | cut -c1)
            # Extract rest of the string
            local rest_string=$(echo "$input_string" | cut -c2-)

            # Convert first char to uppercase
            local first_char_upper=$(echo "$first_char" | tr '[:lower:]' '[:upper:]')
            # Convert rest of the string to lowercase
            local rest_string_lower=$(echo "$rest_string" | tr '[:upper:]' '[:lower:]')

            # Combine them
            output_string="${first_char_upper}${rest_string_lower}"
            ;;
        *)
            # Unknown or empty format type, return original string
            debug_log "DEBUG" "format_string: Unknown format type '$format_type', returning original string"
            output_string="$input_string"
            ;;
    esac

    # Return the formatted string
    printf '%s' "$output_string"
    return 0
}

OK_normalize_message() {
    local input="$1"
    local lang="$2"
    local output="$input"
    local saved_locale="$LC_ALL"

    debug_log "DEBUG" "normalize_message: Input = [$input]"

    # Full-width to half-width normalization
    output=$(echo "$output" | sed 's/｛/{/g; s/｝/}/g')
    output=$(echo "$output" | sed 's/：/:/g; s/∶/:/g; s/꞉/:/g; s/ː/:/g')
    output=$(echo "$output" | sed 's/；/;/g')
    output=$(echo "$output" | sed 's/　/ /g')
    output=$(echo "$output" | sed 's/＠/@/g')
    output=$(echo "$output" | sed 's/＼/\\/g')
    debug_log "DEBUG" "normalize_message: After full-width normalization = [$output]"

    # Placeholder space removal (using LC_ALL=C for safety)
    LC_ALL=C
    debug_log "DEBUG" "normalize_message: Entering LC_ALL=C block for space removal"
    local before_space_removal="$output"
    output=$(echo "$output" | sed 's/[[:space:]]\+{/{/g') # Space before {
    # output=$(echo "$output" | sed 's/}[[:space:]]\+/}/g') # Space after }
    output=$(echo "$output" | sed 's/{[[:space:]]\+/{/g') # Space after { (inside)
    output=$(echo "$output" | sed 's/[[:space:]]\+}/}/g') # Space before } (inside)
    if [ "$output" != "$before_space_removal" ]; then
        debug_log "DEBUG" "normalize_message: Placeholder space removal applied. Result = [$output]"
    fi
    debug_log "DEBUG" "normalize_message: Exiting LC_ALL=C block. Result = [$output]"
    LC_ALL="$saved_locale"

    # Special placeholder replacement ( {;} is NOT replaced here )
    local before_special_replace="$output"
    output=$(echo "$output" | sed 's/{:}/:/g') # {:} -> :
    if [ "$output" != "$before_special_replace" ]; then
         debug_log "DEBUG" "normalize_message: Replaced {:} with :. Result = [$output]"
    fi
    before_special_replace="$output"
    output=$(echo "$output" | sed 's/{@}/\\n/g') # {@} -> newline (\n)
     if [ "$output" != "$before_special_replace" ]; then
         debug_log "DEBUG" "normalize_message: Replaced {@} with \\n. Result = [$output]"
    fi

    # Language-specific number normalization
    local before_num_norm="$output"
    case "${lang%%-*}" in
        ar) output=$(echo "$output" | sed 's/٠/0/g; s/١/1/g; s/٢/2/g; s/٣/3/g; s/٤/4/g; s/٥/5/g; s/٦/6/g; s/٧/7/g; s/٨/8/g; s/٩/9/g') ;;
        fa) output=$(echo "$output" | sed 's/۰/0/g; s/۱/1/g; s/۲/2/g; s/۳/3/g; s/۴/4/g; s/۵/5/g; s/۶/6/g; s/۷/7/g; s/۸/8/g; s/۹/9/g') ;;
        bn) output=$(echo "$output" | sed 's/০/0/g; s/۱/1/g; s/২/2/g; s/৩/3/g; s/৪/4/g; s/৫/5/g; s/৬/6/g; s/৭/7/g; s/৮/8/g; s/৯/9/g') ;;
        hi|mr|ne) output=$(echo "$output" | sed 's/०/0/g; s/१/1/g; s/२/2/g; s/३/3/g; s/४/4/g; s/५/5/g; s/६/6/g; s/७/7/g; s/८/8/g; s/९/9/g') ;;
        ja|zh|ko) output=$(echo "$output" | sed 's/０/0/g; s/１/1/g; s/２/2/g; s/３/3/g; s/４/4/g; s/５/5/g; s/６/6/g; s/７/7/g; s/８/8/g; s/９/9/g') ;;
    esac

    # Consolidated log output for number normalization
    if [ "$output" != "$before_num_norm" ]; then
        debug_log "DEBUG" "normalize_message: Applied number normalization for '$lang'. Result = [$output]"
    fi

    debug_log "DEBUG" "normalize_message: Final Output = [$output]"
    printf '%s' "$output" # 出力は %s のまま
    return 0
}

# メッセージを取得し、パラメータ置換とフォーマットを行う関数
# Usage: get_message <key> [format_type] [param1=value1] [param2=value2] ...
# format_type: "upper", "capitalize", "none" (default)
# Reads global variables: GET_MESSAGE_FORMATTING_ENABLED, FORMAT_TYPE_UPPER_ENABLED, FORMAT_TYPE_CAPITALIZE_ENABLED
OK_get_message() {
    local key="$1"
    local format_type="none" # デフォルトのフォーマットタイプ
    local shift_count=1      # デフォルトはキーのみを shift する

    # 第2引数が存在し、かつそれがフォーマットタイプ指定子であるか確認
    if [ $# -ge 2 ]; then
        case "$2" in
            upper|capitalize|none)
                format_type="$2"
                shift_count=2
                debug_log "DEBUG" "get_message: Format type '$format_type' provided for key '$key'."
                ;;
            *)
                debug_log "DEBUG" "get_message: Second argument '$2' is not a format type, assuming parameter for key '$key'."
                ;;
        esac
    else
        debug_log "DEBUG" "get_message: No second argument provided for key '$key'."
    fi

    # 判定結果に基づいて shift を実行
    shift "$shift_count"

    local lang="$DEFAULT_LANGUAGE"
    local message=""
    local add_colon="false"

    # 言語コードの取得
    if [ -f "${CACHE_DIR}/message.ch" ]; then
        lang=$(cat "${CACHE_DIR}/message.ch")
    fi

    # 1. DBからメッセージ取得
    local db_file="$(check_message_cache "$lang")"
    if [ -n "$db_file" ] && [ -f "$db_file" ]; then
        message=$(grep "^${lang}|${key}=" "$db_file" 2>/dev/null | cut -d'=' -f2-)
        if [ -z "$message" ] && [ "$lang" != "$DEFAULT_LANGUAGE" ]; then
            local default_db_file="$(check_message_cache "$DEFAULT_LANGUAGE")"
            if [ -n "$default_db_file" ] && [ -f "$default_db_file" ]; then
                message=$(grep "^${DEFAULT_LANGUAGE}|${key}=" "$default_db_file" 2>/dev/null | cut -d'=' -f2-)
            fi
        fi
    fi

    # 2. メモリキャッシュを試す
    if [ -z "$message" ]; then
        if [ "$MSG_MEMORY_INITIALIZED" != "true" ] || [ "$MSG_MEMORY_LANG" != "$lang" ]; then
            into_memory_message
        fi
        if [ -n "$MSG_MEMORY" ]; then
            message=$(echo "$MSG_MEMORY" | grep "^${lang}|${key}=" 2>/dev/null | cut -d'=' -f2-)
            if [ -z "$message" ] && [ "$lang" != "$DEFAULT_LANGUAGE" ]; then
                 message=$(echo "$MSG_MEMORY" | grep "^${DEFAULT_LANGUAGE}|${key}=" 2>/dev/null | cut -d'=' -f2-)
            fi
        fi
    fi

    # 3. フォールバック
    if [ -z "$message" ]; then
        message="$key"
    fi

    # 4. {;} 検出
    if echo "$message" | grep -q '{;}'; then
        message=$(echo "$message" | sed 's/{;}//g')
        add_colon="true"
    fi

    # 5. パラメータ置換 ($@ は shift 済み)
    for param in "$@"; do
        param_name=$(echo "$param" | cut -d'=' -f1)
        param_value=$(echo "$param" | cut -d'=' -f2-)
        local escaped_value=$(printf '%s\n' "$param_value" | sed -e 's/[\\#]/\\&/g')
        if [ -n "$param_name" ] ; then
             message=$(echo "$message" | sed "s#{$param_name}#$escaped_value#g")
             debug_log "DEBUG" "get_message: Replaced {$param_name} for key '$key'"
        fi
    done

    # 6. normalize_message
    message=$(normalize_message "$message" "$lang")

    # --- 変更箇所 ここから ---
    # 7. フォーマット処理 (グローバル変数による制御付き)
    if [ "$GET_MESSAGE_FORMATTING_ENABLED" = "true" ]; then
        # フォーマット処理が全体的に有効な場合のみ実行
        case "$format_type" in
            "upper")
                # 'upper' タイプが有効かチェック
                if [ "$FORMAT_TYPE_UPPER_ENABLED" = "true" ]; then
                    debug_log "DEBUG" "get_message: Applying 'upper' format (enabled) for key '$key'"
                    message=$(format_string "upper" "$message")
                else
                    debug_log "DEBUG" "get_message: 'upper' format is disabled (FORMAT_TYPE_UPPER_ENABLED=false) for key '$key'"
                fi
                ;;
            "capitalize")
                # 'capitalize' タイプが有効かチェック
                if [ "$FORMAT_TYPE_CAPITALIZE_ENABLED" = "true" ]; then
                    debug_log "DEBUG" "get_message: Applying 'capitalize' format (enabled) for key '$key'"
                    message=$(format_string "capitalize" "$message")
                else
                    debug_log "DEBUG" "get_message: 'capitalize' format is disabled (FORMAT_TYPE_CAPITALIZE_ENABLED=false) for key '$key'"
                fi
                ;;
            "none"|*)
                # "none" または未知のタイプの場合は何もしない
                debug_log "DEBUG" "get_message: No formatting applied (type: '$format_type') for key '$key'"
                ;;
        esac
    else
        # フォーマット処理が全体的に無効な場合
        debug_log "DEBUG" "get_message: Formatting globally disabled (GET_MESSAGE_FORMATTING_ENABLED=false) for key '$key'"
    fi
    # --- 変更箇所 ここまで ---

    # 8. コロン追加
    if [ "$add_colon" = "true" ]; then message="${message}: "; fi

    # 9. 出力
    printf "%b" "$message"
    return 0
}

# --- normalize_message function (Handles normalization EXCEPT braces) ---
# Arguments: $1: Input string, $2: Language code
normalize_message() {
    local input="$1"
    local lang="$2"
    local output="$input"
    local saved_locale="$LC_ALL"

    # Full-width to half-width normalization (Braces are handled in get_message)
    # output=$(echo "$output" | sed 's/｛/{/g; s/｝/}/g') # REMOVED - Handled by get_message
    output=$(echo "$output" | sed 's/：/:/g; s/∶/:/g; s/꞉/:/g; s/ː/:/g')
    output=$(echo "$output" | sed 's/；/;/g')
    output=$(echo "$output" | sed 's/　/ /g')
    output=$(echo "$output" | sed 's/＠/@/g')
    output=$(echo "$output" | sed 's/＼/\\/g') # Normalize full-width backslash

    # Placeholder space removal (using LC_ALL=C for safety)
    LC_ALL=C
    output=$(echo "$output" | sed 's/[[:space:]]\+{/{/g') # Space before {
    # output=$(echo "$output" | sed 's/}[[:space:]]\+/}/g') # Space after } (Keep commented out as per original)
    output=$(echo "$output" | sed 's/{[[:space:]]\+/{/g') # Space after { (inside)
    output=$(echo "$output" | sed 's/[[:space:]]\+}/}/g') # Space before } (inside)
    LC_ALL="$saved_locale"

    # Special placeholder replacement ( {;} is NOT replaced here )
    output=$(echo "$output" | sed 's/{:}/:/g') # {:} -> :
    output=$(echo "$output" | sed 's/{@}/\\n/g') # {@} -> newline (\n) - printf %b will interpret this

    # Language-specific number normalization
    case "${lang%%-*}" in
        ar) output=$(echo "$output" | sed 's/٠/0/g; s/١/1/g; s/٢/2/g; s/٣/3/g; s/٤/4/g; s/٥/5/g; s/٦/6/g; s/٧/7/g; s/٨/8/g; s/٩/9/g') ;;
        fa) output=$(echo "$output" | sed 's/۰/0/g; s/۱/1/g; s/۲/2/g; s/۳/3/g; s/۴/4/g; s/۵/5/g; s/۶/6/g; s/۷/7/g; s/۸/8/g; s/۹/9/g') ;;
        bn) output=$(echo "$output" | sed 's/০/0/g; s/۱/1/g; s/২/2/g; s/৩/3/g; s/৪/4/g; s/৫/5/g; s/৬/6/g; s/৭/7/g; s/৮/8/g; s/৯/9/g') ;;
        hi|mr|ne) output=$(echo "$output" | sed 's/०/0/g; s/१/1/g; s/२/2/g; s/३/3/g; s/४/4/g; s/५/5/g; s/६/6/g; s/७/7/g; s/८/8/g; s/९/9/g') ;;
        ja|zh|ko) output=$(echo "$output" | sed 's/０/0/g; s/１/1/g; s/２/2/g; s/３/3/g; s/４/4/g; s/５/5/g; s/６/6/g; s/７/7/g; s/８/8/g; s/９/9/g') ;;
    esac

    # Output using printf %s as per original function's behavior
    printf '%s' "$output"
    return 0
}

# --- get_message function (Handles message retrieval, normalization, and formatting) ---
# Usage: get_message <key> [format_type] [param1=value1] [param2=value2] ...
# format_type: "upper", "capitalize", "none" (default)
# Reads global variables: DEFAULT_LANGUAGE, CACHE_DIR, MSG_MEMORY_INITIALIZED, MSG_MEMORY_LANG, MSG_MEMORY,
#                         GET_MESSAGE_FORMATTING_ENABLED, FORMAT_TYPE_UPPER_ENABLED, FORMAT_TYPE_CAPITALIZE_ENABLED
get_message() {
    local key="$1"
    local format_type="none" # Default format type
    local shift_count=1      # Default shift count (only key)
    local awk_script         # Local variable for awk script

    # Check if the second argument is a format type specifier
    if [ $# -ge 2 ]; then
        case "$2" in
            upper|capitalize|none)
                format_type="$2"
                shift_count=2
                ;;
        esac
    fi

    # Shift arguments based on whether format type was provided
    shift "$shift_count"

    local lang="$DEFAULT_LANGUAGE"
    local message=""
    local add_colon="false" # Initialize flag for adding colon

    # Get language code (assuming CACHE_DIR is defined)
    if [ -f "${CACHE_DIR}/message.ch" ]; then
        lang=$(cat "${CACHE_DIR}/message.ch")
    fi

    # 1. Get message from DB file cache
    local db_file="$(check_message_cache "$lang")" # Assumes check_message_cache exists
    if [ -n "$db_file" ] && [ -f "$db_file" ]; then
        # Retrieve message for the specific language and key
        message=$(grep "^${lang}|${key}=" "$db_file" 2>/dev/null | cut -d'=' -f2-)
        # Fallback to default language if message not found for current language
        if [ -z "$message" ] && [ "$lang" != "$DEFAULT_LANGUAGE" ]; then
            local default_db_file="$(check_message_cache "$DEFAULT_LANGUAGE")"
            if [ -n "$default_db_file" ] && [ -f "$default_db_file" ]; then
                message=$(grep "^${DEFAULT_LANGUAGE}|${key}=" "$default_db_file" 2>/dev/null | cut -d'=' -f2-)
            fi
        fi
    fi

    # 2. Try memory cache if DB file cache failed
    if [ -z "$message" ]; then
        # Initialize memory cache if needed (assuming into_memory_message exists)
        if [ "$MSG_MEMORY_INITIALIZED" != "true" ] || [ "$MSG_MEMORY_LANG" != "$lang" ]; then
            into_memory_message
        fi
        # Retrieve message from memory cache
        if [ -n "$MSG_MEMORY" ]; then
            message=$(echo "$MSG_MEMORY" | grep "^${lang}|${key}=" 2>/dev/null | cut -d'=' -f2-)
            # Fallback to default language in memory cache
            if [ -z "$message" ] && [ "$lang" != "$DEFAULT_LANGUAGE" ]; then
                 message=$(echo "$MSG_MEMORY" | grep "^${DEFAULT_LANGUAGE}|${key}=" 2>/dev/null | cut -d'=' -f2-)
            fi
        fi
    fi

    # 3. Fallback to key itself if message not found
    if [ -z "$message" ]; then
        message="$key"
    fi

    # --- MODIFIED: Step 4: Detect and handle various colon markers ---
    # Handles {;}, {؛}, ｛;｝, and ｛؛｝ for multi-language and full-width support.
    case "$message" in
        *'{;}'*|*'{؛}'*|*'｛;｝'*|*'｛؛｝'*)
            # Found one of the markers. Remove all possible occurrences.
            # Remove standard half-width marker
            message="${message//\{;\}/}"
            # Remove Arabic semicolon marker
            message="${message//\{؛\}/}"
            # Remove full-width brace + half-width semicolon marker
            message="${message//｛;｝/}"
            # Remove full-width brace + Arabic semicolon marker
            message="${message//｛؛｝/}"
            add_colon="true"
            ;;
    esac
    # --- END MODIFIED ---

    # --- ADDED: Unconditionally normalize braces before replacement ---
    # Ensures full-width braces ｛｝ become half-width {} for awk compatibility
    # (This line was present in the provided source and remains unchanged)
    message=$(echo "$message" | sed 's/｛/{/g; s/｝/}/g')

    # --- MODIFIED: Parameter replacement using awk (Case-Insensitive, POSIX Compliant) ---
    # (The awk script and execution logic below are exactly as provided in the source and remain unchanged)
    awk_script='
        BEGIN { FS="=" }
        NR == 1 { msg = $0; next } # First line is the message template
        NR > 1 { # Subsequent lines are parameters name=value
            p_name = $1
            # Correctly get raw value even if it contains =
            p_value = substr($0, index($0, "=") + 1)
            params[p_name] = p_value # Store param in array (key is original case from input)
        }
        END {
            # Iterate through parameters to perform replacements
            for (p_name in params) {
                # --- MODIFIED: Build case-insensitive regex dynamically ---
                regex_ci = "\\{" # Start regex with escaped {
                for (i = 1; i <= length(p_name); ++i) {
                    char = substr(p_name, i, 1)
                    lc = tolower(char)
                    uc = toupper(char)
                    # If char is not a letter (lc == uc), append it directly.
                    # Otherwise, append [lL] character class.
                    if (lc == uc) {
                        # Handle potential regex special characters within the name itself
                        # If char is a regex metacharacter that needs escaping, escape it.
                        # Basic example for backslash, extend if needed for ., *, +, ?, etc.
                        if (char == "\\") {
                             regex_ci = regex_ci "\\\\" # Append escaped backslash
                        } else if (char == "[") {
                             regex_ci = regex_ci "\\[" # Append escaped [
                        } else if (char == "]") {
                             regex_ci = regex_ci "\\]" # Append escaped ]
                        # Add other metacharacters like ., *, +, ?, ^, $, | if needed
                        } else {
                            regex_ci = regex_ci char # Append other non-letter chars directly
                        }
                    } else {
                        # Append character class for letters, e.g., [vV]
                        regex_ci = regex_ci "[" lc uc "]"
                    }
                }
                regex_ci = regex_ci "\\}" # End regex with escaped }
                # Example: if p_name is "Value1", regex_ci becomes "\{[vV][aA][lL][uU][eE]1\}"
                # --- END MODIFIED ---

                # Prepare the replacement value: escape \ and & for gsub
                current_value = params[p_name]
                gsub(/\\/, "\\\\", current_value) # Escape backslashes first
                gsub(/&/, "\\&", current_value)   # Escape ampersands

                # Perform the global substitution using the dynamically generated case-insensitive regex
                gsub(regex_ci, current_value, msg)
            }
            print msg # Output the final message
        }
    '
    # Execute awk script only if parameters are provided ($@ contains params after shift)
    if [ $# -gt 0 ]; then
        message=$( \
            ( \
                printf "%s\n" "$message"; \
                local param param_name param_value; \
                # Pass parameters to awk, one per line, handling '=' in value
                for param in "$@"; do \
                    param_name=$(echo "$param" | cut -d'=' -f1); \
                    param_value=$(echo "$param" | cut -d'=' -f2-); \
                    if [ -n "$param_name" ]; then \
                        printf "%s=%s\n" "$param_name" "$param_value"; \
                    fi; \
                done \
            ) | awk "$awk_script" \
        )
    fi

    # 6. Call normalize_message for remaining normalization
    # (This line was present in the provided source and remains unchanged)
    # Pass the potentially placeholder-replaced message and language
    message=$(normalize_message "$message" "$lang")

    # 7. Apply formatting (if enabled and type specified)
    # (This section was present in the provided source and remains unchanged)
    if [ "$GET_MESSAGE_FORMATTING_ENABLED" = "true" ]; then
        # Only proceed if formatting is globally enabled
        case "$format_type" in
            "upper")
                # Check if 'upper' format type is enabled
                if [ "$FORMAT_TYPE_UPPER_ENABLED" = "true" ]; then
                    message=$(format_string "upper" "$message") # Assumes format_string exists
                fi
                ;;
            "capitalize")
                # Check if 'capitalize' format type is enabled
                if [ "$FORMAT_TYPE_CAPITALIZE_ENABLED" = "true" ]; then
                    message=$(format_string "capitalize" "$message") # Assumes format_string exists
                fi
                ;;
            "none"|*)
                # Do nothing for "none" or unknown types
                ;;
        esac
    fi

    # 8. Append colon if marker {;} was present
    # (This logic remains the same, using the add_colon flag set in Step 4)
    if [ "$add_colon" = "true" ]; then
        message="${message}: " # Add colon and space
    fi

    # 9. Output the final message (using %b to interpret backslash escapes like \n from {@})
    # (This line was present in the provided source and remains unchanged)
    printf "%b" "$message"
    return 0
}

# 🔴　メッセージ系　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　スピナー系　ここから　🔵-------------------------------------------------------------------------------------------------------------------------------------------

# スピナー開始関数
start_spinner() {
    local message="$1"
    local spinner_color="${2:-$SPINNER_COLOR}"
    local anim_type="${3:-figure}" 
    
    # グローバル変数を設定
    SPINNER_MESSAGE="$message"
    SPINNER_TYPE="$anim_type"
    SPINNER_COLOR="$spinner_color"
    
    if [ "$ANIMATION_ENABLED" -eq "0" ]; then
        debug_log "DEBUG: Animation disabled, showing static message"
        return
    fi

    if command -v usleep >/dev/null 2>&1; then
        SPINNER_USLEEP_VALUE="300000"  # 300000マイクロ秒 = 0.3秒
        SPINNER_DELAY="300000"         # アニメーションディレイ値
        debug_log "DEBUG: Using fast animation mode (0.3s) with usleep"
    else
        SPINNER_DELAY="1"              # アニメーションディレイ値（秒）
        debug_log "DEBUG: Using standard animation mode (1s)"
    fi

    # カーソル非表示
    printf "\033[?25l"

    # アニメーションタイプに応じた文字セット
    case "$anim_type" in
        spinner)
            SPINNER_CHARS="- \\ | /"
            ;;
        dot)
            SPINNER_CHARS=". .. ... .... ....."
            ;;
        bar)
            SPINNER_CHARS="[=] => ->"
            ;;
        figure)
            SPINNER_CHARS="0 1 2 3 4 5 6 7 8 9"
            ;;
        pulse)
            # 環境依存
            SPINNER_CHARS="◯ ◎"
            ;;
        emoji)
            # 環境依存
            SPINNER_CHARS="💩 👺 😀 👽 😈 💀"
            ;;
        moon)
            # 環境依存
            SPINNER_CHARS="🌑 🌘 🌗 🌖 🌝 🌔 🌓 🌒"
            # SPINNER_CHARS="🌕 🌖 🌗 🌘 🌑 🌒 🌓 🌔"
            ;;
        bloc)
            # 環境依存
            SPINNER_CHARS="⢿ ⣻ ⣽ ⣾ ⣷ ⣯ ⣟ ⡿"
            ;;
        *)
            SPINNER_CHARS="- \\ | /"
            ;;
    esac

    debug_log "DEBUG: Starting spinner with message: $message, type: $anim_type, delay: $SPINNER_DELAY"

    # 直前のスピナープロセスがまだ実行中の場合は停止
    if [ -n "$SPINNER_PID" ]; then
        ps | grep -v grep | grep -q "$SPINNER_PID" 2>/dev/null
        if [ $? -eq 0 ]; then
            debug_log "DEBUG: Stopping previous spinner process PID: $SPINNER_PID"
            kill "$SPINNER_PID" >/dev/null 2>&1
            wait "$SPINNER_PID" 2>/dev/null || true
        fi
    fi

    # メッセージファイルの設定
    SPINNER_MSG_FILE="${CACHE_DIR}/spinner_msg_$$.tmp"
    mkdir -p "${CACHE_DIR}" 2>/dev/null
    printf "%s" "$message" > "$SPINNER_MSG_FILE"
    debug_log "DEBUG: Created spinner message file: $SPINNER_MSG_FILE"

    # バックグラウンドでスピナーを実行
    (
        i=0
        local curr_msg="$message"
        
        while true; do
            # ファイルから新しいメッセージを読み取る
            if [ -f "$SPINNER_MSG_FILE" ]; then
                new_msg=$(cat "$SPINNER_MSG_FILE" 2>/dev/null)
                if [ -n "$new_msg" ] && [ "$new_msg" != "$curr_msg" ]; then
                    curr_msg="$new_msg"
                fi
            fi
            
            for char in $SPINNER_CHARS; do
                printf "\r\033[K%s %s" "$curr_msg" "$(color "$SPINNER_COLOR" "$char")"

                if command -v usleep >/dev/null 2>&1; then
                    usleep "$SPINNER_USLEEP_VALUE"  # マイクロ秒単位のディレイ
                else
                    sleep "$SPINNER_DELAY"  # 秒単位のディレイ
                fi
                
                # アニメーションサイクル中のメッセージ更新チェック
                if [ -f "$SPINNER_MSG_FILE" ]; then
                    new_msg=$(cat "$SPINNER_MSG_FILE" 2>/dev/null)
                    if [ -n "$new_msg" ] && [ "$new_msg" != "$curr_msg" ]; then
                        curr_msg="$new_msg"
                        break  # 新しいメッセージがあれば次のサイクルへ
                    fi
                fi
            done
        done
    ) &
    SPINNER_PID=$!
    debug_log "DEBUG: Spinner started with PID: $SPINNER_PID"
}

# スピナー停止関数
stop_spinner() {
    local message="$1"
    local status="${2:-success}"

    if [ "$ANIMATION_ENABLED" -eq "0" ]; then
        # アニメーション無効時はメッセージがあれば表示 (改行あり)
        if [ -n "$message" ]; then
            printf "%s\n" "$message"
        fi
        return
    fi

    debug_log "DEBUG: Stopping spinner with message: $message, status: $status"

    # メッセージファイルを削除
    if [ -f "$SPINNER_MSG_FILE" ]; then
        rm -f "$SPINNER_MSG_FILE" 2>/dev/null
        debug_log "DEBUG: Removed spinner message file: $SPINNER_MSG_FILE"
    fi

    # プロセスが存在するか確認
    if [ -n "$SPINNER_PID" ]; then
        # プロセスが実際に存在するか確認
        ps | grep -v grep | grep -q "$SPINNER_PID" 2>/dev/null
        if [ $? -eq 0 ]; then
            debug_log "DEBUG: Process found, killing PID: $SPINNER_PID"
            kill "$SPINNER_PID" >/dev/null 2>&1
            wait "$SPINNER_PID" 2>/dev/null || true
            unset SPINNER_PID
            printf "\r\033[K"  # 行をクリア

            # ▼▼▼ 変更点 ▼▼▼
            # メッセージが空でない場合のみ表示 (改行あり)
            if [ -n "$message" ]; then
                # 成功/失敗に応じたメッセージカラー
                if [ "$status" = "success" ]; then
                    printf "%s\n" "$(color green "$message")"
                else
                    printf "%s\n" "$(color yellow "$message")"
                fi
            fi
            # ▲▲▲ 変更点 ▲▲▲
        else
            debug_log "DEBUG: Process not found for PID: $SPINNER_PID"
            unset SPINNER_PID
            # プロセスが見つからなくても、メッセージがあれば表示 (改行あり)
            if [ -n "$message" ]; then
                 if [ "$status" = "success" ]; then
                     printf "%s\n" "$(color green "$message")"
                 else
                     printf "%s\n" "$(color yellow "$message")"
                 fi
            fi
        fi
    # SPINNER_PID がない場合でも、メッセージがあれば表示 (改行あり)
    elif [ -n "$message" ]; then
        if [ "$status" = "success" ]; then
            printf "%s\n" "$(color green "$message")"
        else
            printf "%s\n" "$(color yellow "$message")"
        fi
    fi

    # カーソル表示
    printf "\033[?25h"
}

# スピナーメッセージ更新関数
update_spinner() {
    local message="$1"
    local spinner_color="${2:-$SPINNER_COLOR}"
    
    if [ "$ANIMATION_ENABLED" -eq "0" ]; then
        debug_log "DEBUG: Animation disabled, not updating spinner message"
        return
    fi
    
    # メッセージと色を更新
    SPINNER_MESSAGE="$message"
    
    # 色が指定されている場合のみ更新
    if [ -n "$spinner_color" ]; then
        SPINNER_COLOR="$spinner_color"
    fi
    
    # メッセージファイルを更新
    if [ -f "$SPINNER_MSG_FILE" ]; then
        printf "%s" "$message" > "$SPINNER_MSG_FILE"
        debug_log "DEBUG: Updated spinner message file with: $message"
    else
        debug_log "DEBUG: Spinner message file not found: $SPINNER_MSG_FILE"
    fi
}

# 🔴　スピナー系　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　トークン系　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

# コミット情報をキャッシュに保存する関数
save_commit_to_cache() {
    local file_path="$1"
    local version="$2"
    local auth_method="$3"
    local cache_file="${COMMIT_CACHE_DIR}/$(echo "$file_path" | tr '/' '_').commit"
    local timestamp=$(date +%s)
    
    debug_log "DEBUG" "Saving commit info to cache: $file_path -> $cache_file"
    
    # キャッシュフォルダがなければ作成
    [ -d "${COMMIT_CACHE_DIR}" ] || mkdir -p "${COMMIT_CACHE_DIR}"
    
    # キャッシュファイルに情報を書き込み
    {
        echo "VERSION=$version"
        echo "AUTH_METHOD=$auth_method"
        echo "TIMESTAMP=$timestamp"
        echo "TTL=$COMMIT_CACHE_TTL"
        echo "FILE_PATH=$file_path"
    } > "$cache_file"
    
    return 0
}

# キャッシュからコミット情報を取得する関数
get_commit_from_cache() {
    local file_path="$1"
    local force="$2"  # キャッシュ強制無視フラグ
    local cache_file="${COMMIT_CACHE_DIR}/$(echo "$file_path" | tr '/' '_').commit"
    local current_time=$(date +%s)
    
    # キャッシュスキップが有効またはforceフラグが指定されている場合はキャッシュを無視
    if [ "$SKIP_CACHE" = "true" ] || [ "$force" = "true" ] || [ "$FORCE" = "true" ]; then
        debug_log "DEBUG" "Skipping cache for $file_path (forced)"
        return 1
    fi
    
    # キャッシュファイルが存在しない場合
    if [ ! -f "$cache_file" ]; then
        debug_log "DEBUG" "No cache found for $file_path"
        return 1
    fi
    
    # キャッシュファイルから情報を読み込む
    . "$cache_file"
    
    # 必須変数が設定されているか確認
    if [ -z "$VERSION" ] || [ -z "$TIMESTAMP" ] || [ -z "$TTL" ]; then
        debug_log "DEBUG" "Invalid cache file for $file_path"
        return 1
    fi
    
    # キャッシュが有効期限内かチェック
    if [ $(( current_time - TIMESTAMP )) -gt "$TTL" ]; then
        debug_log "DEBUG" "Cache expired for $file_path ($(( (current_time - TIMESTAMP) / 60 )) minutes old)"
        return 1
    fi
    
    # キャッシュが有効な場合は結果を返す
    debug_log "DEBUG" "Using cached commit info for $file_path: $VERSION (age: $(( (current_time - TIMESTAMP) / 60 )) minutes)"
    echo "$VERSION $AUTH_METHOD"
    return 0
}

format_api_status() {
    local auth_method="$1"
    local remaining="$2"
    local limit="$3"
    local reset_minutes="$4"
    local status_text=""
    
    debug_log "DEBUG" "Formatting API status with auth_method=$auth_method, remaining=$remaining, limit=$limit, reset_minutes=$reset_minutes"
    
    if [ "$auth_method" = "token" ] || [ "$auth_method" = "header" ] || [ "$auth_method" = "user" ]; then
        # 認証API表示
        status_text="API: ${remaining}/${limit} TTL:${reset_minutes}m"
    elif [ "$auth_method" = "direct" ] && [ -n "$remaining" ] && [ -n "$limit" ]; then
        # 未認証APIでも残り回数が分かる場合
        status_text="API: ${remaining}/${limit} TTL:${reset_minutes}m"
    else
        # 直接ダウンロード時
        status_text="API: N/A TTL:${reset_minutes}m"
    fi
    
    echo "$status_text"
}

github_api_request() {
    local endpoint="$1"
    local token=$(get_github_token)
    local response=""
    local auth_method="direct"
    local temp_file="${CACHE_DIR}/api_request.tmp"
    local retry_count=0
    local max_retries=2
    
    # 関数内でのwgetコマンド用のローカル変数を定義
    local local_wget_ipv_opt="$WGET_IPV_OPT"
    local local_base_wget="$BASE_WGET"
    local local_base_wget_auth_bearer="$BASE_WGET_AUTH_BEARER"
    local local_base_wget_auth_token="$BASE_WGET_AUTH_TOKEN"
    
    # wgetの機能チェック
    if [ -z "$WGET_SUPPORTS_HEADER" ]; then
        if wget --help 2>&1 | grep -q -- "--header"; then
            export WGET_SUPPORTS_HEADER=1
        else
            export WGET_SUPPORTS_HEADER=0
        fi
    fi
    
    # GitHub API呼び出しを試行（リトライロジック付き）
    while [ $retry_count -le $max_retries ]; do
        if [ $retry_count -gt 0 ]; then
            debug_log "DEBUG" "Retry attempt $retry_count for API request: $endpoint"
            sleep 1  # リトライ間隔
        fi
        
        if [ -n "$token" ]; then
            debug_log "DEBUG" "Using token authentication for API request"
            
            # 認証方法1: Bearerヘッダー認証
            if [ "$WGET_SUPPORTS_HEADER" = "1" ]; then
                debug_log "DEBUG" "Trying Bearer authentication"
                
                # ローカル変数のBearer認証設定を使用
                eval $local_base_wget_auth_bearer "$temp_file" "$token" "https://api.github.com/$endpoint" 2>/dev/null
                
                if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
                    response=$(cat "$temp_file")
                    if ! echo "$response" | grep -q '"message":"Bad credentials"'; then
                        auth_method="bearer"
                        debug_log "DEBUG" "Bearer authentication successful"
                        break  # 成功したらループを抜ける
                    else
                        debug_log "DEBUG" "Bearer authentication failed, trying token auth"
                        
                        # ローカル変数のToken認証設定を使用
                        eval $local_base_wget_auth_token "$temp_file" "$token" "https://api.github.com/$endpoint" 2>/dev/null
                        
                        if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
                            response=$(cat "$temp_file")
                            if ! echo "$response" | grep -q '"message":"Bad credentials"'; then
                                auth_method="token"
                                debug_log "DEBUG" "Token authentication successful"
                                break  # 成功したらループを抜ける
                            else
                                debug_log "DEBUG" "Token authentication failed"
                            fi
                        fi
                    fi
                else
                    debug_log "DEBUG" "Empty response from Bearer authentication"
                fi
            fi
            
            # 認証方法2: wgetのユーザー認証（ヘッダーがサポートされていない場合）
            if [ "$auth_method" = "direct" ] && [ "$WGET_SUPPORTS_HEADER" = "0" ]; then
                debug_log "DEBUG" "Trying user authentication"
                $local_base_wget -O "$temp_file" --user="$token" --password="x-oauth-basic" \
                         "https://api.github.com/$endpoint" 2>/dev/null
                         
                if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
                    response=$(cat "$temp_file")
                    if ! echo "$response" | grep -q '"message":"Bad credentials"'; then
                        auth_method="user"
                        debug_log "DEBUG" "User authentication successful"
                        break  # 成功したらループを抜ける
                    else
                        debug_log "DEBUG" "User authentication failed"
                    fi
                fi
            fi
        fi
        
        # 認証方法3: フォールバック（直接アクセス）
        if [ "$auth_method" = "direct" ]; then
            debug_log "DEBUG" "Falling back to direct access"
            $local_base_wget -O "$temp_file" "https://api.github.com/$endpoint" 2>/dev/null
            
            if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
                response=$(cat "$temp_file")
                if ! echo "$response" | grep -q '"message":"API rate limit exceeded'; then
                    debug_log "DEBUG" "Direct access successful"
                    break  # 成功したらループを抜ける
                fi
            fi
        fi
        
        # リトライ時の接続方法を変更（ローカル変数のみ更新）
        if [ $retry_count -eq 0 ] && [ -f "${CACHE_DIR}/network.ch" ]; then
            local current_network=$(cat "${CACHE_DIR}/network.ch")
            
            if [ "$current_network" = "v4v6" ]; then
                # デュアルスタックの場合、IPv4がデフォルト。失敗したらIPv6を試す
                local_wget_ipv_opt="-6"
                # ローカル変数を更新（関数内でのみ有効）
                local_base_wget="wget --no-check-certificate -q ${local_wget_ipv_opt} -O"
                local_base_wget_auth_bearer="wget --no-check-certificate -q ${local_wget_ipv_opt} -O \"\$1\" --header=\"Authorization: Bearer \$2\" \"\$3\""
                local_base_wget_auth_token="wget --no-check-certificate -q ${local_wget_ipv_opt} -O \"\$1\" --header=\"Authorization: token \$2\" \"\$3\""
                debug_log "DEBUG" "Switching to IPv6 for retry"
            elif [ "$current_network" = "v4" ] || [ "$current_network" = "v6" ]; then
                # シングルスタックの場合はタイムアウト値を増やす
                export WGET_TIMEOUT="--timeout=30"
                debug_log "DEBUG" "Increasing timeout for retry"
            fi
        fi
        
        retry_count=$((retry_count + 1))
    done
    
    # リトライ後の最終結果確認
    if [ -z "$response" ]; then
        debug_log "DEBUG" "Empty response from API request after $max_retries retries"
        rm -f "$temp_file" 2>/dev/null
        return 1
    fi
    
    if echo "$response" | grep -q '"message":"API rate limit exceeded'; then
        debug_log "DEBUG" "GitHub API rate limit exceeded"
        rm -f "$temp_file" 2>/dev/null
        return 1
    fi
    
    # 認証エラーチェック
    if echo "$response" | grep -q '"message":"Bad credentials"'; then
        debug_log "DEBUG" "GitHub API authentication failed: Bad credentials"
        rm -f "$temp_file" 2>/dev/null
        return 2
    fi
    
    # その他エラーチェック
    if echo "$response" | grep -q '"message":"'; then
        local error_msg=$(echo "$response" | grep -o '"message":"[^"]*"' | cut -d':' -f2- | tr -d '"')
        debug_log "DEBUG" "GitHub API error: $error_msg"
        rm -f "$temp_file" 2>/dev/null
        return 3
    fi

    # 成功
    echo "$response"
    rm -f "$temp_file" 2>/dev/null
    
    # wget設定を元に戻す関数を呼び出し
    setup_wget_options
    return 0
}

save_github_token() {
    token="$1"
    
    if [ -z "$token" ]; then
        debug_log "DEBUG" "Empty token provided, cannot save"
        return 1
    fi
    
    # トークンを保存して権限を設定
    echo "$token" > "$GITHUB_TOKEN_FILE"
    chmod 600 "$GITHUB_TOKEN_FILE"
    
    if [ $? -eq 0 ]; then
        debug_log "DEBUG" "GitHub token saved to $GITHUB_TOKEN_FILE"
        return 0
    else
        debug_log "DEBUG" "Failed to save token to $GITHUB_TOKEN_FILE"
        return 1
    fi
}

get_github_token() {
    local token=""
    
    if [ -f "$GITHUB_TOKEN_FILE" ] && [ -r "$GITHUB_TOKEN_FILE" ]; then
        # 改行や余分なスペースを削除したトークンを返す
        token=$(cat "$GITHUB_TOKEN_FILE" | tr -d '\n\r\t ' | head -1)
        if [ -n "$token" ]; then
            echo "$token"
            return 0
        fi
    fi
    
    # 環境変数からの取得（不要な文字も削除）
    if [ -n "$GITHUB_TOKEN" ]; then
        echo "$GITHUB_TOKEN" | tr -d '\n\r\t '
        return 0
    fi
    
    return 1
}

# オリジナルの save_version_to_cache 関数
save_version_to_cache() {
    local file_name="$1"
    local version="$2"
    local script_file="$3"
    local tmp_file="${script_file}.tmp" # 一時ファイル名を変数に

    debug_log "DEBUG" "save_version_to_cache: Called for file='$file_name', version='$version', script_file='$script_file'"

    # バージョンが空でないかチェック
    if [ -z "$version" ]; then
        debug_log "DEBUG" "save_version_to_cache: Received empty version for file '$file_name'. Aborting cache save."
        return 1 # バージョンが空なら書き込みしない
    fi

    # tmpファイルを確実に削除しておく
    rm -f "$tmp_file" 2>/dev/null

    # script_file が存在する場合の処理
    if [ -f "$script_file" ]; then
        debug_log "DEBUG" "save_version_to_cache: File '$script_file' exists. Filtering existing entry for '$file_name'."
        # grep の実行と結果確認
        if grep -v "^${file_name}=" "$script_file" > "$tmp_file"; then
            debug_log "DEBUG" "save_version_to_cache: Successfully filtered '$script_file' to '$tmp_file'."
        else
            local grep_status=$?
            debug_log "DEBUG" "save_version_to_cache: grep command failed with status $grep_status for '$script_file'."
            # grep失敗時は一時ファイルを削除して終了（安全策）
            rm -f "$tmp_file" 2>/dev/null
            return 1
        fi

        # 新しいバージョン情報を追記
        debug_log "DEBUG" "save_version_to_cache: Appending new version '$version' for '$file_name' to '$tmp_file'."
        echo "${file_name}=${version}" >> "$tmp_file"

        # 一時ファイルの内容をデバッグログに出力（確認用）
        debug_log "DEBUG" "save_version_to_cache: Content of '$tmp_file' before move:"
        while IFS= read -r line || [ -n "$line" ]; do
             debug_log "DEBUG" "  | $line"
        done < "$tmp_file"

        # mv の実行と結果確認
        if mv "$tmp_file" "$script_file"; then
            debug_log "DEBUG" "save_version_to_cache: Successfully moved '$tmp_file' to '$script_file'."
        else
            local mv_status=$?
            debug_log "DEBUG" "save_version_to_cache: mv command failed with status $mv_status. Failed to update '$script_file'."
            # mv失敗時も一時ファイルを削除
            rm -f "$tmp_file" 2>/dev/null
            return 1
        fi
    else
        # script_file が存在しない場合の処理
        debug_log "DEBUG" "save_version_to_cache: File '$script_file' does not exist. Creating new file."
        # echo の実行と結果確認
        if echo "${file_name}=${version}" > "$script_file"; then
             debug_log "DEBUG" "save_version_to_cache: Successfully created '$script_file' with initial version."
        else
             local echo_status=$?
             debug_log "DEBUG" "save_version_to_cache: echo command failed with status $echo_status. Failed to create '$script_file'."
             return 1
        fi
    fi

    return 0 # 成功
}

# トークンセットアップ関数の改善版
setup_github_token() {
    echo "GitHub API Token Setup"
    echo "======================"
    
    # wget機能チェック
    local wget_capability=$(detect_wget_capabilities)
    debug_log "DEBUG" "Detected wget capability: $wget_capability"
    
    # トークン認証が利用できない場合は警告して終了
    if [ "$wget_capability" = "limited" ]; then
        echo "ERROR: GitHub API token authentication is not supported on this system."
        echo "Your version of wget does not support the required authentication methods."
        echo "API requests will be limited to 60 calls per hour."
        echo ""
        echo "This system uses a wget version without authentication support." 
        debug_log "DEBUG" "Token authentication not supported due to limited wget capabilities"
        return 1
    fi
    
    echo "This will save a GitHub Personal Access Token to $GITHUB_TOKEN_FILE"
    echo "The token will be used for API requests to avoid rate limits."
    echo ""
    
    printf "Enter your GitHub Personal Access Token: "
    read -r token
    echo ""
    
    if [ -n "$token" ]; then
        if save_github_token "$token"; then
            echo "Token has been saved successfully!"
            echo "API requests will now use authentication (up to 5000 calls per hour)."
            echo ""
            
            # 使用可能な認証方法の表示
            case "$wget_capability" in
                header)
                    echo "Your system supports header authentication (optimal)."
                    ;;
                basic)
                    echo "Your system supports basic authentication."
                    ;;
            esac
        else
            echo "Failed to save token. Please check permissions."
        fi
    else
        echo "No token entered. Operation cancelled."
    fi
}

# 🔴　トークン系　ここまで　🔴-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　ダウンロード系　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

check_network_connectivity() {
    local ip_check_file="${CACHE_DIR}/network.ch"
    local ret4=1
    local ret6=1

    debug_log "DEBUG: Checking IPv4 connectivity"
    ping -c 1 -w 3 8.8.8.8 >/dev/null 2>&1
    ret4=$?

    debug_log "DEBUG: Checking IPv6 connectivity"
    ping6 -c 1 -w 3 2001:4860:4860::8888 >/dev/null 2>&1
    ret6=$?

    if [ "$ret4" -eq 0 ] && [ "$ret6" -eq 0 ]; then
        echo "v4v6" > "${ip_check_file}"
    elif [ "$ret4" -eq 0 ]; then
        echo "v4" > "${ip_check_file}"
    elif [ "$ret6" -eq 0 ]; then
        echo "v6" > "${ip_check_file}"
    else
        echo "" > "${ip_check_file}"
    fi
}

setup_wget_options() {
    # ネットワーク状態をキャッシュファイルから取得
    local network_type=""
    if [ -f "${CACHE_DIR}/network.ch" ]; then
        network_type=$(cat "${CACHE_DIR}/network.ch")
    fi
    
    # デフォルトのIPバージョンオプション（空=システム設定に従う）
    WGET_IPV_OPT=""
    
    # ネットワーク状態に応じてIPバージョンオプションを設定 
    case "$network_type" in
        v4)
            WGET_IPV_OPT="-4"
            debug_log "DEBUG" "Setting wget to use IPv4 only"
            ;;
        v6)
            WGET_IPV_OPT="-6"
            debug_log "DEBUG" "Setting wget to use IPv6 only"
            ;;
        v4v6|*)
            # デュアルスタック環境またはデフォルト
            WGET_IPV_OPT=""
            debug_log "DEBUG" "Using system default IP settings for wget"
            ;;
    esac
    
    debug_log "DEBUG" "wget IP version updated to: ${WGET_IPV_OPT}"
}

version_is_newer() {
    local current="$1"  # リモートバージョン
    local reference="$2"  # ローカルバージョン
    
    debug_log "DEBUG" "Comparing: Remote=$current, Local=$reference"
    
    # どちらかが不明の場合は更新必要
    if echo "$current $reference" | grep -q "No version\|unknown"; then
        debug_log "DEBUG" "Unknown version detected, update required"
        return 0
    fi
    
    # 完全一致の場合は更新不要
    if [ "$current" = "$reference" ]; then
        debug_log "DEBUG" "Exact match: No update needed"
        return 1
    fi
    
    # 日付部分を抽出（YYYY.MM.DD形式）
    local current_date=$(echo "$current" | grep -o "[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" | head -1)
    local reference_date=$(echo "$reference" | grep -o "[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" | head -1)
    
    # 日付が抽出できなかった場合は更新が必要
    if [ -z "$current_date" ] || [ -z "$reference_date" ]; then
        debug_log "DEBUG" "Date extraction failed: Update for safety"
        return 0
    fi
    
    # 日付を数値に変換（区切り文字を削除）
    local current_num=$(echo "$current_date" | tr -d '.')
    local reference_num=$(echo "$reference_date" | tr -d '.')
    
    # 数値比較（日付形式）
    if [ "$current_num" -gt "$reference_num" ]; then
        debug_log "DEBUG" "Remote date is newer: Update required"
        return 0  # リモート（current）が新しい
    elif [ "$current_num" -lt "$reference_num" ]; then
        debug_log "DEBUG" "Local date is newer: No update needed"
        return 1  # ローカル（reference）が新しい
    fi
    
    # 日付が同じ場合はSHA部分を比較
    local current_sha=$(echo "$current" | grep -o "\-[a-z0-9]*" | sed 's/^-//' | head -1)
    local reference_sha=$(echo "$reference" | grep -o "\-[a-z0-9]*" | sed 's/^-//' | head -1)
    
    # SHA情報をデバッグ出力
    debug_log "DEBUG" "SHA comparison: Remote=$current_sha, Local=$reference_sha"
    
    # 直接DL時の特別処理: ハッシュの先頭7文字だけ比較して異なる場合のみ更新
    if [ -n "$current_sha" ] && [ -n "$reference_sha" ]; then
        # どちらかにdirectというマークがあれば直接DLモードと判断
        if echo "$current $reference" | grep -q "direct"; then
            # 先頭7文字だけ比較（SHA-1とSHA-256を混在比較する場合の対策）
            local current_short=$(echo "$current_sha" | head -c 7)
            local reference_short=$(echo "$reference_sha" | head -c 7)
            
            if [ "$current_short" != "$reference_short" ]; then
                debug_log "DEBUG" "Different file hash in direct mode: Update required"
                return 0  # 異なるハッシュ
            else
                debug_log "DEBUG" "Same file hash in direct mode: No update needed"
                return 1  # 同一ハッシュ
            fi
        elif [ "$current_sha" != "$reference_sha" ]; then
            debug_log "DEBUG" "Different SHA: Update required"
            return 0  # 異なるコミット
        fi
    fi
    
    debug_log "DEBUG" "Same version or unable to compare: No update needed"
    return 1  # 同一バージョン
}

# OpenWrt環境のwget機能検出関数（改良版）
detect_wget_capabilities() {
    debug_log "DEBUG" "Detecting wget capabilities for current environment"
    
    local temp_file="${CACHE_DIR}/wget_help.tmp"
    local test_file="${CACHE_DIR}/wget_test_header.tmp"
    local header_support="no"
    local user_support="no"
    
    # wgetのヘルプを一時ファイルに保存（--helpがサポートされていない場合のため空ファイル作成）
    touch "$temp_file"
    wget --help > "$temp_file" 2>&1 || true
    
    # デバッグ用にwgetヘルプ内容の先頭行を記録
    debug_log "DEBUG" "wget help output beginning:"
    head -3 "$temp_file" | while read line; do
        debug_log "DEBUG" "  $line"
    done
    
    # OpenWrt/BusyBox wgetの検出（特徴的な出力パターン）
    if grep -q "BusyBox" "$temp_file" || ! grep -q "\-\-header" "$temp_file"; then
        debug_log "DEBUG" "Detected BusyBox wget without header support"
        rm -f "$temp_file"
        echo "limited"
        return 1
    fi
    
    # ヘッダーオプションのサポートを確認 - より厳密なパターン
    if grep -q -- "--header=" "$temp_file" || grep -q -- "--header " "$temp_file"; then
        debug_log "DEBUG" "wget supports header authentication"
        header_support="yes"
    fi
    
    # 基本認証のサポートを確認 - より厳密なパターン
    if grep -q -- "--user=" "$temp_file" || grep -q -- "--user " "$temp_file"; then
        debug_log "DEBUG" "wget supports basic authentication"
        user_support="yes"
    fi
    
    # 実際に機能テストを行う（ヘルプテキスト検出のバックアップ）
    if [ "$header_support" = "yes" ]; then
        debug_log "DEBUG" "Testing header support with actual command"
        rm -f "$temp_file"
        echo "header"
        return 0
    elif [ "$user_support" = "yes" ]; then
        debug_log "DEBUG" "Basic authentication is supported"
        rm -f "$temp_file"
        echo "basic" 
        return 0
    else
        debug_log "DEBUG" "No authentication methods supported"
        rm -f "$temp_file"
        echo "limited"
        return 1
    fi
}

# APIレート制限情報のチェックと取得（キャッシュ機能付き）
check_api_rate_limit() {
    local token="$(get_github_token)"
    local temp_file="${CACHE_DIR}/api_limit.tmp"
    local auth_method="direct"
    local current_time=$(date +%s)
    
    # IPバージョン設定の初期化確認
    if [ -z "$WGET_IPV_OPT" ]; then
        setup_wget_options
        debug_log "DEBUG" "Initialized wget IP options before checking API rate limit"
    fi
    
    # 先にキャッシュファイルをロード（初回実行時）
    if [ -z "$API_LAST_CHECK" ] && [ -f "${CACHE_DIR}/api_rate.ch" ]; then
        debug_log "DEBUG" "Loading API rate information from cache file"
        . "${CACHE_DIR}/api_rate.ch"
    fi
    
    # キャッシュ有効期間内の場合は保存値を返す
    if [ -n "$API_REMAINING" ] && [ $(( current_time - API_LAST_CHECK )) -lt ${API_CACHE_TTL:-60} ]; then
        debug_log "DEBUG" "Using cached API rate limit info: $API_REMAINING/$API_LIMIT, age: $(( current_time - API_LAST_CHECK ))s"
        echo "API: ${API_REMAINING}/${API_LIMIT} TTL:${API_RESET_TIME}m"
        return 0
    fi
    
    # 既存のファイルを削除
    [ -f "$temp_file" ] && rm -f "$temp_file"
    
    # wget機能と認証方法の検出（一度だけ実行）
    if [ -z "$WGET_CAPABILITY" ] && [ -n "$token" ]; then
        WGET_CAPABILITY=$(detect_wget_capabilities)
        debug_log "DEBUG" "Detected wget capability: $WGET_CAPABILITY"
        
        # トークンが設定されていても認証機能が使えない場合、警告表示
        if [ "$WGET_CAPABILITY" = "limited" ] && [ -f "$GITHUB_TOKEN_FILE" ]; then
            debug_log "DEBUG" "GitHub token is set but authentication is not supported with current wget version"
        fi
    fi
    
    # 認証方法の選択
    if [ -n "$token" ] && [ "$WGET_CAPABILITY" != "limited" ]; then
        if [ "$WGET_CAPABILITY" = "header" ]; then
            # ヘッダー認証（最適）
            $BASE_WGET -O "$temp_file" --header="Authorization: token $token" \
                 "https://api.github.com/rate_limit" 2>/dev/null
            
            if [ -f "$temp_file" ] && [ -s "$temp_file" ] && ! grep -q "Bad credentials\|Unauthorized" "$temp_file"; then
                auth_method="token"
                debug_log "DEBUG" "Successfully authenticated with token header"
            fi
        elif [ "$WGET_CAPABILITY" = "basic" ]; then
            # 基本認証
            $BASE_WGET -O "$temp_file" --user="$token" --password="x-oauth-basic" \
                 "https://api.github.com/rate_limit" 2>/dev/null
                 
            if [ -f "$temp_file" ] && [ -s "$temp_file" ] && ! grep -q "Bad credentials\|Unauthorized" "$temp_file"; then
                auth_method="basic"
                debug_log "DEBUG" "Successfully authenticated with basic auth"
            fi
        fi
    fi
    
    # 非認証リクエスト（認証に失敗した場合または認証なしの場合）
    if [ "$auth_method" = "direct" ]; then
        debug_log "DEBUG" "Making direct API request"
        $BASE_WGET -O "$temp_file" "https://api.github.com/rate_limit" 2>/dev/null
    fi
    
    # レスポンス解析
    if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
        # レート情報の抽出
        local core_limit=$(grep -o '"limit"[ ]*:[ ]*[0-9]\+' "$temp_file" | head -1 | grep -o '[0-9]\+')
        local core_remaining=$(grep -o '"remaining"[ ]*:[ ]*[0-9]\+' "$temp_file" | head -1 | grep -o '[0-9]\+')
        local core_reset=$(grep -o '"reset"[ ]*:[ ]*[0-9]\+' "$temp_file" | head -1 | grep -o '[0-9]\+')
        
        # コアセクション優先
        if [ -z "$core_limit" ] || [ -z "$core_remaining" ] || [ -z "$core_reset" ]; then
            local core_section=$(sed -n '/"core":/,/},/p' "$temp_file")
            [ -z "$core_limit" ] && core_limit=$(echo "$core_section" | grep -o '"limit"[ ]*:[ ]*[0-9]\+' | head -1 | grep -o '[0-9]\+')
            [ -z "$core_remaining" ] && core_remaining=$(echo "$core_section" | grep -o '"remaining"[ ]*:[ ]*[0-9]\+' | head -1 | grep -o '[0-9]\+')
            [ -z "$core_reset" ] && core_reset=$(echo "$core_section" | grep -o '"reset"[ ]*:[ ]*[0-9]\+' | head -1 | grep -o '[0-9]\+')
        fi
        
        # リセット時間の計算
        local reset_minutes=60
        if [ -n "$core_reset" ] && [ "$core_reset" -gt 1000000000 ]; then
            local now_time=$(date +%s)
            if [ "$core_reset" -gt "$now_time" ]; then
                local reset_seconds=$(( core_reset - now_time ))
                reset_minutes=$(( reset_seconds / 60 ))
                [ "$reset_minutes" -lt 1 ] && reset_minutes=1
            else
                reset_minutes=0
            fi
        else
            # デフォルト値の設定
            if [ "$auth_method" != "direct" ]; then
                reset_minutes=60
            else
                reset_minutes=5
            fi
        fi
        
        # グローバル変数に保存（キャッシュ）
        API_REMAINING=$core_remaining
        API_LIMIT=$core_limit
        API_RESET_TIME=$reset_minutes
        API_AUTH_METHOD=$auth_method
        API_LAST_CHECK=$current_time
        
        # 値のチェックと整形
        [ -z "$API_LIMIT" ] && API_LIMIT="?"
        [ -z "$API_REMAINING" ] && API_REMAINING="?"
    else
        # 情報取得失敗時のデフォルト値
        if [ "$auth_method" != "direct" ]; then
            API_LIMIT="5000"
            API_REMAINING="?"
            API_RESET_TIME="60"
        else
            API_LIMIT="60"
            API_REMAINING="?"
            API_RESET_TIME="5"
        fi
        API_AUTH_METHOD=$auth_method
        API_LAST_CHECK=$current_time
    fi
    
    # キャッシュ保存
    save_api_rate_cache
    
    # 結果文字列の生成
    local status_text="API: ${API_REMAINING}/${API_LIMIT} TTL:${API_RESET_TIME}m"
    debug_log "DEBUG" "Final API status: $status_text (auth_method=$auth_method)"
    
    # 一時ファイル削除
    [ -f "$temp_file" ] && rm -f "$temp_file"
    
    # 結果を返す
    echo "$status_text"
}

# キャッシュにAPIレート制限情報を保存
save_api_rate_cache() {
    local cache_file="${CACHE_DIR}/api_rate.ch"
    
    # キャッシュディレクトリがなければ作成
    [ ! -d "$CACHE_DIR" ] && mkdir -p "$CACHE_DIR"
    
    # 保存内容の作成
    {
        echo "API_REMAINING=\"$API_REMAINING\""
        echo "API_LIMIT=\"$API_LIMIT\""
        echo "API_RESET_TIME=\"$API_RESET_TIME\""
        echo "API_AUTH_METHOD=\"$API_AUTH_METHOD\""
        echo "API_LAST_CHECK=\"$API_LAST_CHECK\""
    } > "$cache_file"
    
    debug_log "DEBUG" "API rate info cached to $cache_file"
}

clean_version_string() {
    local version_str="$1"
    
    # 1. 改行と復帰を削除
    local cleaned=$(printf "%s" "$version_str" | tr -d '\n\r')
    
    # 2. 角括弧を削除
    cleaned=$(printf "%s" "$cleaned" | sed 's/\[//g; s/\]//g')
    
    # 3. ANSIエスケープコードを削除
    cleaned=$(printf "%s" "$cleaned" | sed 's/\x1b\[[0-9;]*[mK]//g')
    
    # 4. バージョン番号の抽出（シンプルな方法）
    if echo "$cleaned" | grep -q '20[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]'; then
        # 年.月.日 形式のバージョンを抽出
        local date_part=$(printf "%s" "$cleaned" | grep -o '20[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]')
        
        # バージョン文字列の残りの部分があれば追加
        if echo "$cleaned" | grep -q "${date_part}-"; then
            local remainder=$(printf "%s" "$cleaned" | sed "s/.*${date_part}-//; s/[^0-9a-zA-Z-].*//")
            printf "%s-%s" "$date_part" "$remainder"
        else
            printf "%s" "$date_part"
        fi
    else
        # バージョンが見つからない場合は元の文字列をクリーニングしたものを返す
        printf "%s" "$cleaned"
    fi
}

# オリジナルの get_commit_version 関数
get_commit_version() {
    local file_path="$1"
    local force_refresh="$2"  # キャッシュ強制更新フラグ
    local temp_file="${CACHE_DIR}/commit_info_$(echo "$file_path" | tr '/' '_').tmp" # ファイルごとに一意なAPI一時ファイル名
    local direct_file="${CACHE_DIR}/direct_file_$(echo "$file_path" | tr '/' '_').tmp" # ファイルごとに一意なDirect一時ファイル名
    local repo_owner="site-u2023" # リポジトリ情報はローカル変数として定義
    local repo_name="aios"
    local version="EMPTY_VERSION" # デバッグ用の初期値
    local auth_method="unknown"   # デバッグ用の初期値

    debug_log "DEBUG" "get_commit_version: Starting for file='$file_path', force_refresh='$force_refresh', DOWNLOAD_METHOD='$DOWNLOAD_METHOD', SKIP_CACHE='$SKIP_CACHE'"

    # --- DOWNLOAD_METHOD による分岐 ---
    if [ "$DOWNLOAD_METHOD" = "direct" ]; then
        debug_log "DEBUG" "get_commit_version: Direct download mode enabled for $file_path."

        # --- 直接ダウンロード処理 ---
        local retry_count=0
        local direct_download_success=0
        while [ $retry_count -le 1 ]; do
            local current_wget_opt="$WGET_IPV_OPT"
            if [ $retry_count -eq 1 ] && [ -f "${CACHE_DIR}/network.ch" ]; then
                 local current_network=$(cat "${CACHE_DIR}/network.ch")
                 if [ "$current_network" = "v4v6" ]; then
                      if [ "$WGET_IPV_OPT" = "-6" ]; then current_wget_opt=""; else current_wget_opt="-6"; fi
                      debug_log "DEBUG" "get_commit_version(direct): Switching IP preference for retry: $current_wget_opt"
                 fi
            fi

            rm -f "$direct_file" 2>/dev/null # ダウンロード前に一時ファイルを削除
            debug_log "DEBUG" "get_commit_version(direct): Attempting download with wget opt '$current_wget_opt' to '$direct_file'"
            if wget -q --no-check-certificate ${current_wget_opt} -O "$direct_file" "https://raw.githubusercontent.com/$repo_owner/$repo_name/main/$file_path" 2>/dev/null; then
                debug_log "DEBUG" "get_commit_version(direct): wget command finished for '$direct_file'."
                if [ -s "$direct_file" ]; then
                    debug_log "DEBUG" "get_commit_version(direct): File '$direct_file' downloaded successfully and is not empty. Calculating hash."
                    local file_hash=$(sha256sum "$direct_file" 2>/dev/null | cut -c1-7)
                    rm -f "$direct_file" 2>/dev/null # ハッシュ取得後に一時ファイルを削除
                    local today=$(date +%Y.%m.%d)
                    version="$today-$file_hash" # version 変数を設定
                    auth_method="direct"        # auth_method 変数を設定
                    direct_download_success=1
                    debug_log "DEBUG" "get_commit_version(direct): Hash calculated: '$file_hash'. Generated version: '$version'. Auth: '$auth_method'."

                    setup_wget_options # wget設定を元に戻す
                    echo "$version $auth_method" # 最終的な出力
                    return 0
                else
                    debug_log "DEBUG" "get_commit_version(direct): wget command succeeded but '$direct_file' is empty or not found after download."
                    rm -f "$direct_file" 2>/dev/null
                fi
            else
                local wget_status=$?
                debug_log "DEBUG" "get_commit_version(direct): wget command failed with status $wget_status for '$direct_file'."
            fi
            retry_count=$((retry_count + 1))
            if [ $retry_count -le 1 ]; then sleep 1; fi # リトライ前に待機
        done # direct モードの while ループの終わり

        # 直接ダウンロード失敗時の処理
        debug_log "DEBUG" "get_commit_version(direct): Failed to download file directly after retries: $file_path"
        rm -f "$direct_file" 2>/dev/null
        setup_wget_options
        version="$(date +%Y.%m.%d)-unknown" # version 変数を設定
        auth_method="direct"                # auth_method 変数を設定
        debug_log "DEBUG" "get_commit_version(direct): Returning fallback version: '$version $auth_method'"
        echo "$version $auth_method" # 最終的な出力
        return 1
        # --- 直接ダウンロード処理ここまで ---

    fi # DOWNLOAD_METHOD = "direct" の if の終わり
    # --- DOWNLOAD_METHOD による分岐ここまで ---

    # --- 以下、DOWNLOAD_METHOD = "api" の場合の処理 ---
    debug_log "DEBUG" "get_commit_version(api): API download mode enabled for $file_path."

    # --- キャッシュチェック処理 ---
    local cache_checked="false"
    local proceed_to_api="true" # デフォルトはAPI呼び出しに進む

    if [ "$SKIP_CACHE" != "true" ] && [ "$force_refresh" != "true" ] && [ "$FORCE" != "true" ]; then
        cache_checked="true"
        debug_log "DEBUG" "get_commit_version(api): Attempting to retrieve from commit cache for '$file_path'."
        local cache_result=$(get_commit_from_cache "$file_path")
        local cache_status=$? # get_commit_from_cache の終了ステータス

        # キャッシュヒットの判定: ステータスが0 かつ 結果が空でないこと
        if [ $cache_status -eq 0 ] && [ -n "$cache_result" ]; then
            debug_log "DEBUG" "get_commit_version(api): Valid cache hit for '$file_path'. Returning cached value: '$cache_result'"
            echo "$cache_result"
            return 0 # キャッシュヒット、ここで終了
        else
            # キャッシュミスまたは無効なキャッシュの場合のログ
            if [ $cache_status -ne 0 ]; then
                 debug_log "DEBUG" "get_commit_version(api): Cache miss or invalid for '$file_path' (status: $cache_status)."
            elif [ -z "$cache_result" ]; then
                 # ステータスは0だが結果が空だった場合 (本来は起こらないはずだが念のため)
                 debug_log "DEBUG" "get_commit_version(api): Cache status was 0 but result was empty for '$file_path'. Treating as cache miss."
            fi
            proceed_to_api="true" # API呼び出しに進む
        fi
    else
         debug_log "DEBUG" "get_commit_version(api): Cache skipped for '$file_path' due to flags."
         proceed_to_api="true" # API呼び出しに進む
    fi # キャッシュチェックの if の終わり
    # --- キャッシュチェック処理ここまで ---

    # --- API呼び出しに進む場合のみ以下の処理を実行 ---
    if [ "$proceed_to_api" = "true" ]; then
        # API URL と認証方法の初期化
        local api_url="repos/${repo_owner}/${repo_name}/commits?path=${file_path}&per_page=1"
        auth_method="direct" # APIモードでも最初は direct から試す可能性がある (初期値)
        local retry_count=0
        local max_retries=2
        local token="$(get_github_token)"
        local api_call_successful="false" # API呼び出し成功フラグ

        # API呼び出しを試行（リトライロジック付き）
        while [ $retry_count -le $max_retries ]; do
            if [ $retry_count -gt 0 ]; then
                debug_log "DEBUG" "get_commit_version(api): Retry attempt $retry_count for API request: $file_path"
                sleep 1
            fi

            # 認証方法に応じたAPI呼び出し
            rm -f "$temp_file" 2>/dev/null # API呼び出し前に一時ファイルを削除
            local current_api_auth_method="direct" # この試行での認証方法
            debug_log "DEBUG" "get_commit_version(api): Attempting API call. Token available: $( [ -n "$token" ] && echo "yes" || echo "no" ). WGET_CAPABILITY: '$WGET_CAPABILITY'. API_AUTH_METHOD (cached): '$API_AUTH_METHOD'."

            if [ -n "$token" ] && [ "$API_AUTH_METHOD" != "direct" ]; then # トークンがあり、キャッシュされた認証方法が direct 以外
                 if [ "$API_AUTH_METHOD" = "token" ] || [ "$WGET_CAPABILITY" = "header" ]; then
                     debug_log "DEBUG" "get_commit_version(api): Trying wget with token header auth."
                     wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$temp_file" --header="Authorization: token $token" "https://api.github.com/$api_url" 2>/dev/null
                     current_api_auth_method="token"
                 elif [ "$API_AUTH_METHOD" = "basic" ] || [ "$WGET_CAPABILITY" = "basic" ]; then
                     debug_log "DEBUG" "get_commit_version(api): Trying wget with basic auth."
                     wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$temp_file" --user="$token" --password="x-oauth-basic" "https://api.github.com/$api_url" 2>/dev/null
                     current_api_auth_method="basic"
                 else
                     debug_log "DEBUG" "get_commit_version(api): Token available but no supported auth method found in cache/capability. Trying direct."
                     wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$temp_file" "https://api.github.com/$api_url" 2>/dev/null
                     current_api_auth_method="direct" # フォールバック
                 fi
            else # トークンがない、またはキャッシュされた認証方法が direct
                debug_log "DEBUG" "get_commit_version(api): Trying wget with direct API call (no auth)."
                wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$temp_file" "https://api.github.com/$api_url" 2>/dev/null
                current_api_auth_method="direct"
            fi # 認証方法分岐の if の終わり
            local wget_api_status=$?
            debug_log "DEBUG" "get_commit_version(api): wget API call finished with status $wget_api_status. Auth method tried: $current_api_auth_method."

            # 応答チェック
            if [ -s "$temp_file" ]; then
                debug_log "DEBUG" "get_commit_version(api): API response file '$temp_file' exists and is not empty."
                # エラーメッセージが含まれていないか確認
                if ! grep -q "API rate limit exceeded\|Not Found\|Bad credentials" "$temp_file"; then
                    debug_log "DEBUG" "get_commit_version(api): Successfully retrieved valid commit information via API."
                    auth_method=$current_api_auth_method # 成功した認証方法を保存
                    api_call_successful="true"
                    break # 成功したらループを抜ける
                else
                    debug_log "DEBUG" "get_commit_version(api): API response file '$temp_file' contains error messages."
                    # エラー内容をログに出力
                    grep "message" "$temp_file" | while IFS= read -r line; do debug_log "DEBUG" "  API Error: $line"; done
                    # grep ループの後には fi は不要
                fi # grep エラーチェックの if の終わり
            else
                 debug_log "DEBUG" "get_commit_version(api): API response file '$temp_file' is empty or not found after wget call."
            fi # 応答チェックの if の終わり

            # リトライ時の接続方法を変更 (従来のロジック)
            if [ $retry_count -eq 0 ] && [ -f "${CACHE_DIR}/network.ch" ]; then
                local current_network=$(cat "${CACHE_DIR}/network.ch")
                if [ "$current_network" = "v4v6" ]; then
                    local original_wget_ipv_opt=$WGET_IPV_OPT # 元の設定を保存
                    if [ "$WGET_IPV_OPT" = "-6" ]; then WGET_IPV_OPT=""; else WGET_IPV_OPT="-6"; fi # トグル
                    BASE_WGET="wget --no-check-certificate -q ${WGET_IPV_OPT} -O"
                    debug_log "DEBUG" "get_commit_version(api): Switching IP preference for API retry: '$WGET_IPV_OPT'"
                    # リトライ後に元に戻す必要があるため注意（setup_wget_optionsで戻るはず）
                elif [ "$current_network" = "v4" ] || [ "$current_network" = "v6" ]; then
                    debug_log "DEBUG" "get_commit_version(api): API retry failed on single stack, will try direct download fallback if retries exhausted."
                    # シングルスタックではIP切り替え不可なので何もしない
                fi # current_network チェックの if/elif の終わり
            fi # リトライIP切り替えの if の終わり
            retry_count=$((retry_count + 1))
        done # API 呼び出しリトライの while の終わり

        # --- API呼び出し成功時の処理 ---
        if [ "$api_call_successful" = "true" ]; then
            debug_log "DEBUG" "get_commit_version(api): Processing successful API response from '$temp_file'."
            # APIレスポンスからコミット情報を抽出
            local commit_date=""
            local commit_sha=""

            # SHA抽出 (より堅牢な方法を試みる)
            commit_sha=$(grep -o '"sha"[[:space:]]*:[[:space:]]*"[a-f0-9]\{7,40\}"' "$temp_file" | head -1 | cut -d'"' -f4 | head -c 7)
            if [ -z "$commit_sha" ]; then # 最初のgrepが失敗した場合のフォールバック
                 commit_sha=$(grep -o '[a-f0-9]\{40\}' "$temp_file" | head -1 | head -c 7)
                 if [ -n "$commit_sha" ]; then debug_log "DEBUG" "get_commit_version(api): Extracted SHA using fallback grep: '$commit_sha'"; fi
            else
                 debug_log "DEBUG" "get_commit_version(api): Extracted SHA using primary grep: '$commit_sha'"
            fi # SHA抽出の if/else の終わり

            # 日付抽出 (より堅牢な方法を試みる)
            commit_date=$(grep -o '"date"[[:space:]]*:[[:space:]]*"[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}T' "$temp_file" | head -1 | cut -d'"' -f4 | cut -dT -f1)
            if [ -z "$commit_date" ]; then # 最初のgrepが失敗した場合のフォールバック
                commit_date=$(grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}T[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}Z' "$temp_file" | head -1 | cut -dT -f1)
                 if [ -n "$commit_date" ]; then debug_log "DEBUG" "get_commit_version(api): Extracted Date using fallback grep: '$commit_date'"; fi
            else
                debug_log "DEBUG" "get_commit_version(api): Extracted Date using primary grep: '$commit_date'"
            fi # 日付抽出の if/else の終わり

            # 情報が取得できない場合はフォールバック
            if [ -z "$commit_date" ] || [ -z "$commit_sha" ]; then
                debug_log "DEBUG" "get_commit_version(api): Failed to extract commit SHA ('$commit_sha') or Date ('$commit_date') from API response. Using fallback values."
                # 念のため再度試行
                [ -z "$commit_sha" ] && commit_sha=$(tr -cd 'a-f0-9' < "$temp_file" | grep -o '[a-f0-9]\{40\}' | head -1 | head -c 7)
                [ -z "$commit_date" ] && commit_date=$(grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' "$temp_file" | head -1)

                [ -z "$commit_sha" ] && commit_sha="unknownsha" # より明確なフォールバック値
                [ -z "$commit_date" ] && commit_date=$(date +%Y-%m-%d)
                debug_log "DEBUG" "get_commit_version(api): Using fallback SHA='$commit_sha', Date='$commit_date'."
                # 抽出失敗時は認証方法を fallback とする
                auth_method="fallback"
            fi # 抽出失敗チェックの if の終わり

            # 結果の組み立て
            if [ -n "$commit_date" ] && [ -n "$commit_sha" ]; then
                local formatted_date=$(echo "$commit_date" | tr '-' '.')
                version="${formatted_date}-${commit_sha}" # version 変数を設定
                debug_log "DEBUG" "get_commit_version(api): Successfully generated version: '$version'. Auth: '$auth_method'."

                rm -f "$temp_file" 2>/dev/null
                setup_wget_options # ここで wget オプションを戻す
                save_commit_to_cache "$file_path" "$version" "$auth_method" # API成功時の認証方法を使う
                echo "$version $auth_method" # 最終的な出力
                return 0
            else
                # このポイントに到達することは通常ないはずだが、念のためエラーログ
                debug_log "DEBUG" "get_commit_version(api): Reached unexpected point after API success processing (date or sha empty). SHA='$commit_sha', Date='$commit_date'."
                # ここで return せずに下の API 失敗処理に進む方が安全かもしれない
            fi # バージョン生成チェックの if/else の終わり
        fi # api_call_successful = true の if の終わり

        # --- APIでの取得に失敗した場合: 直接ファイルダウンロードを試行 (APIモードのフォールバック) ---
        # api_call_successful が false の場合、または true だったが情報抽出・生成に失敗した場合
        if [ "$api_call_successful" = "false" ] || { [ "$api_call_successful" = "true" ] && [ -z "$version" ]; }; then
            # API成功でも version が空の場合のログを追加
            if [ "$api_call_successful" = "true" ] && [ -z "$version" ]; then
                 debug_log "DEBUG" "get_commit_version(api): API call was successful but version generation failed. Falling back to direct download."
            fi

            debug_log "DEBUG" "get_commit_version(api): API call failed or version gen failed, falling back to direct file check for $file_path (API mode fallback)"
            rm -f "$temp_file" 2>/dev/null # 不要なAPI応答ファイルを削除

            # --- 直接ダウンロード処理 (APIフォールバック用) ---
            retry_count=0 # リトライカウントをリセット
            local direct_download_fallback_success=0
            while [ $retry_count -le 1 ]; do
                local current_wget_opt="$WGET_IPV_OPT"
                if [ $retry_count -eq 1 ] && [ -f "${CACHE_DIR}/network.ch" ]; then
                     local current_network=$(cat "${CACHE_DIR}/network.ch")
                     if [ "$current_network" = "v4v6" ]; then
                          if [ "$WGET_IPV_OPT" = "-6" ]; then current_wget_opt=""; else current_wget_opt="-6"; fi
                          debug_log "DEBUG" "get_commit_version(api-fallback): Switching IP preference for direct download retry: $current_wget_opt"
                     fi
                fi

                rm -f "$direct_file" 2>/dev/null
                debug_log "DEBUG" "get_commit_version(api-fallback): Attempting download with wget opt '$current_wget_opt' to '$direct_file'"
                if wget -q --no-check-certificate ${current_wget_opt} -O "$direct_file" "https://raw.githubusercontent.com/$repo_owner/$repo_name/main/$file_path" 2>/dev/null; then
                    debug_log "DEBUG" "get_commit_version(api-fallback): wget command finished for '$direct_file'."
                    if [ -s "$direct_file" ]; then
                        debug_log "DEBUG" "get_commit_version(api-fallback): File '$direct_file' downloaded successfully. Calculating hash."
                        local file_hash=$(sha256sum "$direct_file" 2>/dev/null | cut -c1-7)
                        rm -f "$direct_file" 2>/dev/null
                        local today=$(date +%Y.%m.%d)
                        version="$today-$file_hash" # version 変数を設定
                        auth_method="directfallback" # APIフォールバックでのdirectアクセスを示す
                        direct_download_fallback_success=1
                        debug_log "DEBUG" "get_commit_version(api-fallback): Hash calculated: '$file_hash'. Generated version: '$version'. Auth: '$auth_method'."

                        setup_wget_options
                        save_commit_to_cache "$file_path" "$version" "$auth_method" # API失敗->Direct成功時もキャッシュ
                        echo "$version $auth_method" # 最終的な出力
                        return 0
                    else
                        debug_log "DEBUG" "get_commit_version(api-fallback): wget succeeded but '$direct_file' is empty or not found."
                        rm -f "$direct_file" 2>/dev/null
                    fi # ファイル存在チェックの if/else の終わり
                else
                     local wget_fb_status=$?
                     debug_log "DEBUG" "get_commit_version(api-fallback): wget command failed with status $wget_fb_status for '$direct_file'."
                fi # wget 成功チェックの if/else の終わり
                retry_count=$((retry_count + 1))
                if [ $retry_count -le 1 ]; then sleep 1; fi # リトライ前に待機
            done # Direct フォールバックリトライの while の終わり

            # 直接ダウンロードも失敗した場合 (APIフォールバック)
            debug_log "DEBUG" "get_commit_version(api-fallback): Failed to download file directly after retries: $file_path"
            rm -f "$direct_file" "$temp_file" 2>/dev/null
            setup_wget_options
            version="$(date +%Y.%m.%d)-apifail" # version 変数を設定
            auth_method="apifail"             # auth_method 変数を設定
            debug_log "DEBUG" "get_commit_version(api-fallback): Returning fallback version: '$version $auth_method'"
            echo "$version $auth_method" # 最終的な出力
            return 1
            # --- 直接ダウンロード処理 (APIフォールバック用) ここまで ---
        fi # API失敗 or version生成失敗の if の終わり
    fi # proceed_to_api = true の if の終わり

    # --- 全ての方法が失敗した場合 (通常ここには到達しないはず) ---
    # proceed_to_api が false (キャッシュヒットしたが return されなかった場合など、異常系)
    debug_log "DEBUG" "get_commit_version: Reached end of function unexpectedly for file '$file_path'. This should not happen."
    rm -f "$temp_file" "$direct_file" 2>/dev/null
    setup_wget_options
    version="$(date +%Y.%m.%d)-critical" # version 変数を設定
    auth_method="critical"             # auth_method 変数を設定
    echo "$version $auth_method" # 念のための最終出力
    return 1
}

download() {
    local url="$1"
    local output_path="$2"
    local use_cache="${3:-true}"
    local check_version="${4:-true}"
    local cache_dir="${CACHE_DIR}/downloads"
    local cache_file="${cache_dir}/$(sanitize_filename "$(basename "$url")")"
    local version_file="${CACHE_DIR}/versions.json"
    local commit_file="${CACHE_DIR}/commits.json"
    local headers_file="${WORK_DIR}/headers_$(sanitize_filename "$(basename "$url")").txt"
    local etag=""
    local last_modified=""
    local current_version=""
    local current_commit=""
    local file_type="blob"

    mkdir -p "$(dirname "$output_path")" "$cache_dir" "$WORK_DIR" 2>/dev/null

    local is_github_api=false
    local is_raw_content=false
    if echo "$url" | grep -q "api.github.com/repos/.*/contents/"; then
        is_github_api=true
        file_type="blob"
    elif echo "$url" | grep -q "raw.githubusercontent.com"; then
        is_raw_content=true
        file_type="raw"
    elif echo "$url" | grep -q "github.com/.*/blob/"; then
        local raw_url=$(echo "$url" | sed 's#github.com#raw.githubusercontent.com#; s#/blob/#/#')
        url="$raw_url"
        is_raw_content=true
        file_type="raw"
    elif echo "$url" | grep -q "api.github.com/repos/.*/tarball/" || echo "$url" | grep -q "api.github.com/repos/.*/zipball/"; then
        is_github_api=true
        file_type="archive"
    elif echo "$url" | grep -q "api.github.com/repos/.*/commits/"; then
        is_github_api=true
        file_type="commit"
    fi

    if [ "$use_cache" = "true" ] && [ -f "$cache_file" ]; then
        local cached_version=$(jq -r ".[\"$url\"] // \"\"" "$version_file" 2>/dev/null)
        local cached_commit=$(jq -r ".[\"$url\"] // \"\"" "$commit_file" 2>/dev/null)

        if [ "$check_version" = "true" ]; then
            if ! headers_output=$(call_api "$url" "HEAD"); then
                 cp "$cache_file" "$output_path"
                 return 0
            fi

            etag=$(echo "$headers_output" | grep -i '^ETag:' | sed 's/ETag: //i' | tr -d '"' | tr -d '\r' | head -n 1)
            last_modified=$(echo "$headers_output" | grep -i '^Last-Modified:' | sed 's/Last-Modified: //i' | tr -d '\r' | head -n 1)
            current_version="${etag:-${last_modified}}"

            if [ "$file_type" = "commit" ]; then
                 current_commit="$current_version"
            fi

            local version_match=false
            if [ "$file_type" = "commit" ] && [ -n "$cached_commit" ] && [ "$cached_commit" = "$current_commit" ]; then
                version_match=true
            elif [ "$file_type" != "commit" ] && [ -n "$cached_version" ] && [ "$cached_version" = "$current_version" ]; then
                version_match=true
            fi

            if [ "$version_match" = "true" ]; then
                cp "$cache_file" "$output_path"
                return 0
            fi
        else
            cp "$cache_file" "$output_path"
            return 0
        fi
    fi

    local success=false
    local download_output=""
    local http_status=0

    if download_output=$(call_api "$url" "GET" "$headers_file"); then
        http_status=$(grep '^HTTP/' "$headers_file" | tail -n 1 | awk '{print $2}')

        if [ "$http_status" -ge 200 ] && [ "$http_status" -lt 300 ]; then
            if [ "$is_github_api" = "true" ] && [ "$file_type" = "blob" ]; then
                local content=$(echo "$download_output" | jq -r '.content')
                if [ "$content" = "null" ] || [ -z "$content" ]; then
                    rm -f "$headers_file"
                    return 1
                fi
                if ! echo "$content" | base64 -d > "$output_path"; then
                    rm -f "$output_path" "$headers_file"
                    return 1
                fi
                success=true
            elif [ "$is_github_api" = "true" ] && [ "$file_type" = "commit" ]; then
                echo "$download_output" > "$output_path"
                success=true
                current_commit=$(echo "$download_output" | jq -r '.sha // ""')
                current_version="$current_commit"
            else
                echo "$download_output" > "$output_path"
                success=true
            fi

            if [ "$use_cache" = "true" ]; then
                cp "$output_path" "$cache_file"

                etag=$(grep -i '^ETag:' "$headers_file" | sed 's/ETag: //i' | tr -d '"' | tr -d '\r' | head -n 1)
                last_modified=$(grep -i '^Last-Modified:' "$headers_file" | sed 's/Last-Modified: //i' | tr -d '\r' | head -n 1)
                [ "$file_type" != "commit" ] && current_version="${etag:-${last_modified}}"

                if [ -n "$current_version" ]; then
                    local tmp_version_file="${version_file}.tmp"
                    [ ! -f "$version_file" ] || [ ! -s "$version_file" ] && echo "{}" > "$version_file"
                    jq --arg url "$url" --arg version "$current_version" '.[$url] = $version' "$version_file" > "$tmp_version_file" && mv "$tmp_version_file" "$version_file" || true
                fi

                if [ "$file_type" = "commit" ] && [ -n "$current_commit" ]; then
                     local tmp_commit_file="${commit_file}.tmp"
                    [ ! -f "$commit_file" ] || [ ! -s "$commit_file" ] && echo "{}" > "$commit_file"
                    jq --arg url "$url" --arg commit "$current_commit" '.[$url] = $commit' "$commit_file" > "$tmp_commit_file" && mv "$tmp_commit_file" "$commit_file" || true
                fi
            fi
        else
            success=false
        fi
    else
        success=false
    fi

    rm -f "$headers_file"

    if [ "$success" = "true" ]; then
        return 0
    else
        return 1
    fi
}

download_check_version() {
    local file_name="$1"
    local script_file="${CACHE_DIR}/script.ch"
    local dummy_version="No version control"

    # バージョン情報の取得
    local remote_version_info=$(get_commit_version "$file_name")
    local remote_version=$(printf "%s" "$remote_version_info" | cut -d' ' -f1)
    local auth_method=$(printf "%s" "$remote_version_info" | cut -d' ' -f2) # get_commit_version が返した認証方法を取得
    local local_version=""

    # ローカルバージョンの取得
    if [ -f "$script_file" ]; then
        local_version=$(grep "^${file_name}=" "$script_file" | cut -d'=' -f2)
    fi
    [ -z "$local_version" ] && local_version="$dummy_version"

    local clean_remote_version=$(clean_version_string "$remote_version")
    local clean_local_version=$(clean_version_string "$local_version")

    # --- APIレート制限情報の取得 (direct モード時はスキップ) ---
    local api_status=""
    if [ "$DOWNLOAD_METHOD" = "direct" ]; then
        # direct モードの場合は API チェックをスキップし、固定値を設定
        # auth_method が 'direct' であることも確認 (get_commit_version が期待通り動作しているか)
        if [ "$auth_method" = "direct" ]; then
             api_status="API: N/A (Direct)"
             debug_log "DEBUG" "Direct download mode: Skipping API rate limit check for $file_name"
        else
             # direct モードなのに auth_method が direct でない場合は警告
             api_status="API: ??? (Inconsistent)"
             debug_log "DEBUG" "Inconsistent state: DOWNLOAD_METHOD=direct but auth_method=$auth_method for $file_name"
        fi
    else
        # api モードの場合は従来通りチェック
        api_status=$(check_api_rate_limit)
    fi
    # --- APIレート制限情報の取得ここまで ---

    # バージョン比較とダウンロード判断 (変更なし)
    local update_required=false

    if [ "$local_version" = "$dummy_version" ]; then
        debug_log "DEBUG" "First download: $file_name"
        update_required=true
    elif [ "$clean_remote_version" = "$clean_local_version" ]; then
        debug_log "DEBUG" "Exact match: No update needed for $file_name"
        update_required=false
    else
        debug_log "DEBUG" "Starting version comparison: $file_name"
        version_is_newer "$clean_remote_version" "$clean_local_version"
        if [ $? -eq 0 ]; then
            debug_log "DEBUG" "New version detected: Update required for $file_name"
            update_required=true
        else
            debug_log "DEBUG" "Existing version: No update needed for $file_name"
            update_required=false
        fi
    fi

    debug_log "DEBUG" "Remote version: $file_name - $clean_remote_version"
    debug_log "DEBUG" "Local version: $file_name - $clean_local_version"
    # ログに auth_method を追加して、get_commit_version の動作を確認しやすくする
    debug_log "DEBUG" "API status: $api_status (Auth method from get_commit_version: $auth_method)"

    # 結果を返す
    echo "${update_required}|${clean_remote_version}|${clean_local_version}|${api_status}"
    return 0
}

download_fetch_file() {
    local file_name="$1"
    local clean_remote_version="$2"
    local chmod_mode="$3"
    local install_path="${BASE_DIR}/$file_name"
    local script_file="${CACHE_DIR}/script.ch"
    
    debug_log "DEBUG" "download_fetch_file called for ${file_name}"
    
    # ダウンロードURLの設定
    local remote_url="${BASE_URL}/$file_name"
    
    # キャッシュバスティングの適用
    if [ "$FORCE" = "true" ] || echo "$clean_remote_version" | grep -q "direct"; then
        remote_url="${remote_url}${CACHE_BUST}"
    fi
    
    debug_log "DEBUG" "Downloading from ${remote_url} to ${install_path}"
    
    # IPバージョン設定が初期化されていない場合は設定する
    if [ -z "$WGET_IPV_OPT" ]; then
        setup_wget_options
    fi
    
    # BusyBox wget向けに最適化した明示的なコマンド構文
    if ! wget -q --no-check-certificate ${WGET_IPV_OPT} -O "$install_path" "$remote_url" 2>/dev/null; then
        debug_log "DEBUG" "Download failed: $file_name"
        return 1
    fi
    
    # ファイル検証
    if [ ! -f "$install_path" ]; then
        debug_log "DEBUG" "Downloaded file not found: $file_name"
        return 1
    fi
    
    if [ ! -s "$install_path" ]; then
        debug_log "DEBUG" "Downloaded file is empty: $file_name"
        return 1
    fi
    
    debug_log "DEBUG" "File successfully downloaded to ${install_path}"
    
    # 権限設定
    if [ "$chmod_mode" = "true" ]; then
        chmod +x "$install_path"
        debug_log "DEBUG" "chmod +x applied to $file_name"
    fi
    
    # バージョン情報をキャッシュに保存
    save_version_to_cache "$file_name" "$clean_remote_version" "$script_file"
    
    return 0
}

download_finalize() {
    local file_name="$1"
    local status_message="$2" 
    local clean_remote_version="$3"
    local api_status="$4"
    local load_mode="$5"
    local hidden_mode="$6"
    local status_type="$7"
    local interpreter="${8:-ash}"  # デフォルト値をashに設定
    
    debug_log "DEBUG" "Finalizing download for ${file_name}, status=${status_type}, interpreter=${interpreter}"
    
    # ファイルが実際に存在するか確認
    if [ ! -f "${BASE_DIR}/${file_name}" ]; then
        debug_log "DEBUG" "File not found: ${BASE_DIR}/${file_name}"
        return 1
    fi
    
    # 隠しモードチェック
    if [ "$hidden_mode" = "true" ]; then
        debug_log "DEBUG" "Hidden mode is active, skipping status message"
        # 隠しモードの場合はメッセージを表示しない
    else        
        # ファイル名がDBファイルかどうかをチェック (.db拡張子)
        if echo "$file_name" | grep -q "\.db$"; then
            debug_log "DEBUG" "DB file handling for ${file_name}"
        fi
        
        # ステータスメッセージ表示
        if [ "$status_type" = "success" ]; then
            # 成功時
            if [ "$load_mode" = "true" ]; then
                printf "%s\n" "${status_message} ${file_name} ${clean_remote_version} ${api_status} Loaded"
            else
                printf "%s\n" "${status_message} ${file_name} ${clean_remote_version} ${api_status}"
            fi
        else
            # 更新不要時など
            if [ "$load_mode" = "true" ]; then
                printf "%s\n" "${status_message} ${file_name} ${clean_remote_version} ${api_status} Loaded"
            else
                printf "%s\n" "${status_message} ${file_name} ${clean_remote_version} ${api_status}"
            fi
        fi
    fi
    
    # ファイル読込み処理
    if [ "$load_mode" = "true" ]; then
        debug_log "DEBUG" "Loading file with ${interpreter}: ${BASE_DIR}/${file_name}"
        
        if [ -s "${BASE_DIR}/${file_name}" ]; then
            # インタープリタが存在するか確認
            if [ "$interpreter" != "$INTERPRETER" ]; then
                if ! command -v "$interpreter" > /dev/null 2>&1; then
                    printf "%s\n" "$(color red "Error: Interpreter '${interpreter}' is not installed on this system.")"
                    install_package ${interpreter} yn hidden
                    
                    # インストール後に再度確認
                    if ! command -v "$interpreter" > /dev/null 2>&1; then
                        debug_log "EBUG" "Interpreter still not found after installation attempt: ${interpreter}"
                        return 1
                    else
                        debug_log "DEBUG" "Executing with specified interpreter: ${interpreter}"
                        $interpreter "${BASE_DIR}/${file_name}"
                    fi
                else
                    debug_log "DEBUG" "Executing with specified interpreter: ${interpreter}"
                    $interpreter "${BASE_DIR}/${file_name}"
                fi
            else
                debug_log "DEBUG" "File loaded with source"
                . "${BASE_DIR}/${file_name}"
            fi
        else
            debug_log "DEBUG" "Cannot load empty file: ${file_name}"
            return 1
        fi
    fi
    
    return 0
}

# 🔴　ダウンロード系　ここまで　🔴　-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　バナー・デバイス情報　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

# メイン関数 - バナー表示の統合関数
# 引数: 
#   $1 - バナースタイル（省略可）: "unicode", "ascii", "asterisk", "auto"
print_banner() {
    # スタイル指定またはデフォルト「auto」
    BANNER_STYLE="${1:-auto}"
    
    # 自動検出が必要な場合
    if [ "$BANNER_STYLE" = "auto" ]; then
        BANNER_STYLE=$(detect_terminal_capability)
        debug_log "DEBUG" "Auto-detected banner style: $BANNER_STYLE"
    fi

    # スタイルに応じたバナー表示
    case "$BANNER_STYLE" in
        unicode|block)
            print_banner_unicode
            ;;
        ascii|hash|sharp)
            print_banner_ascii
            ;;
        *)
            # 不明なスタイルの場合はASCIIにフォールバック
            debug_log "DEBUG" "Unknown banner style: $BANNER_STYLE, using ASCII fallback"
            print_banner_ascii
            ;;
    esac
}

print_banner_ascii() {
    debug_log "DEBUG" "Displaying lowercase aios block ASCII art banner"
    
    # ASCIIアート
    printf "\n"
    printf "%s\n" "$(color magenta "               ## #")"
    printf "%s\n" "$(color blue    "     ####      ###       ####      #####")"
    printf "%s\n" "$(color green   "        ##      ##      ##  ##    ##")"
    printf "%s\n" "$(color yellow  "     #####      ##      ##  ##     #####")"
    printf "%s\n" "$(color orange  "    ##  ##      ##      ##  ##         ##")"
    printf "%s\n" "$(color red     "     #####     ####      ####     ######")"
    printf "\n"
    
    # バナーメッセージ
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
    printf "\n"

    debug_log "DEBUG" "Block style lowercase aios banner displayed successfully"
}

print_banner_unicode() {
    debug_log "DEBUG" "Displaying lowercase aios block ASCII art banner"
    
    # ASCIIアート（環境依存文字 - ブロック）
    printf "\n"
    printf "%s\n" "$(color magenta "               ██ █")"
    printf "%s\n" "$(color blue    "     ████      ███       ████      █████")"
    printf "%s\n" "$(color green   "        ██      ██      ██  ██    ██")"
    printf "%s\n" "$(color yellow  "     █████      ██      ██  ██     █████")"
    printf "%s\n" "$(color orange  "    ██  ██      ██      ██  ██         ██")"
    printf "%s\n" "$(color red     "     █████     ████      ████     ██████")"
    printf "\n"

    # バナーメッセージ
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_DECCRIPTION")")"
    printf "%s\n" "$(color white "$(get_message "MSG_BANNER_NAME")")"
    printf "%s\n" "$(color red "$(get_message "MSG_BANNER_DISCLAIMER")")"
    printf "\n"

    debug_log "DEBUG" "Block style lowercase aios banner displayed successfully"
}

print_information() {
    local cpucore=$(cat "${CACHE_DIR}/cpu_core.ch")
    local network=$(cat "${CACHE_DIR}/network.ch")
    local architecture=$(cat "${CACHE_DIR}/architecture.ch")
    local osversion=$(cat "${CACHE_DIR}/osversion.ch")
    local package_manager=$(cat "${CACHE_DIR}/package_manager.ch")
    local usbdevice=$(cat "${CACHE_DIR}/usbdevice.ch")

    # ファイルが存在しない場合のみメッセージを表示
    if [ ! -f "${CACHE_DIR}/message.ch" ]; then
        printf "%s\n" "$(color green "$(get_message "MSG_INFO_DEVICE")")"
    fi
    printf "%s\n" "$(color white "$(get_message "MSG_INFO_NETWORK" "i=$network")")"
    printf "%s\n" "$(color white "$(get_message "MSG_INFO_CPUCORE" "i=$cpucore")")"
    printf "%s\n" "$(color white "$(get_message "MSG_INFO_ARCHITECTURE" "i=$architecture")")"
    printf "%s\n" "$(color white "$(get_message "MSG_INFO_OSVERSION" "i=$osversion")")"
    printf "%s\n" "$(color white "$(get_message "MSG_INFO_PACKAGEMANAGER" "i=$package_manager")")"
    printf "%s\n" "$(color white "$(get_message "MSG_INFO_USBDEVICE" "i=$usbdevice")")"
    printf "\n"
}

# 🔴　バナー・デバイス情報　ここまで　🔴　-------------------------------------------------------------------------------------------------------------------------------------------

# 🔵　メイン　ここから　🔵　-------------------------------------------------------------------------------------------------------------------------------------------

check_option() {
    # デフォルト値の設定
    ORIGINAL_ARGS="$@"
    MODE="${MODE:-update}"
    SELECTED_LANGUAGE=""
    DEBUG_MODE="false"
    DEBUG_LEVEL="INFO"
    DRY_RUN="false"
    LOGFILE=""
    FORCE="false"
    RESET="false"
    HELP="false"
    SKIP_DEVICE_DETECTION="false"
    SKIP_IP_DETECTION="false"
    SKIP_ALL_DETECTION="false"
    SKIP_CACHE="false"

    # 言語およびオプション引数の処理
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -h|--h|-help|--help|-\?|--\?)
                HELP="true"
                print_help
                exit 0
                ;;
            -v|--v|-version|--version)
                script_version
                exit 0
                ;;
            -d|--d|-debug|--debug|-d1|--d1)
                DEBUG_MODE="true"
                DEBUG_LEVEL="DEBUG"
                ;;
            -cf|--cf|-common_full|--common_full)
                MODE="full"
                ;;
            -cl|--cl|-ocommon_light|--ocommon_light)
                MODE="light"
                ;;
            -cd|--cd|-common_debug|--common_debug|--common_debug)
                MODE="debug"
                ;;
            -r|--r|-resrt|--resrt)
                MODE="reset"
                RESET="true"
                ;;
            -del|--del|-delete|--delete)
                MODE="delete"
                ;;
            -f|--f|-force|--force)
                FORCE="true"
                ;;
            -dr|--dr|-dry-run|--dry-run)
                DRY_RUN="true"
                ;;
            -l|--l|-logfile|--logfile)
                if [ -n "$2" ] && [ "${2#-}" = "$2" ]; then
                    LOGFILE="$2"
                    shift
                else
                    debug_log "DEBUG" "logfile requires a path argument"
                    exit 1
                fi
                ;;
            -u|--u|-update|--update)
                debug_log "DEBUG" "check_option: aios update"
                MODE="update"
                ;;
            -t|--t|-token|--token)
                setup_github_token
                exit 0
                ;;
            -ta|--ta|-test_api|--test_api)
                MODE="test_api"
                ;;
            -sc|--sc|-skip-cache|--skip-cache)
                SKIP_CACHE_DETECTION="true"
                ;;
            -sd|--sd|-skip-dev|--skip-dev)
                SKIP_DEVICE_DETECTION="true"
                ;;
            -scd|--scd|-skip-cache-device|--skip-cache-device)
                SKIP_CACHE_DEVICE_DETECTION="true"
                ;;
            -si|--si|-skip-ip|--skip-ip)
                SKIP_IP_DETECTION="true"
                ;;
            -sa|--sa|-skip-all|--skip-all)
                SKIP_ALL_DETECTION="true"
                ;;
            -nc|--nc|-no-cache|--no-cache)
                SKIP_CACHE="true"
                debug_log "DEBUG" "Cache disabled by command line option"
                ;;
            -*)
                echo "Warning: Unknown option: $1" >&2
                ;;
            *)
                if [ -z "$SELECTED_LANGUAGE" ]; then
                    SELECTED_LANGUAGE="$1"
                fi
                ;;
        esac
        shift
    done

    # 環境変数設定
    export SELECTED_LANGUAGE DEBUG_MODE DEBUG_LEVEL MODE DRY_RUN LOGFILE FORCE RESET HELP SKIP_CACHE

    # デバッグ情報を出力
    debug_log "DEBUG" "$BIN_FILE: $SCRIPT_VERSION"
    debug_log "DEBUG" "check_option received args: $ORIGINAL_ARGS"
    debug_log "DEBUG" "check_option: MODE=$MODE, SKIP_CACHE=$SKIP_CACHE, SELECTED_LANGUAGE=$SELECTED_LANGUAGE"

    # 設定された言語を `check_common()` に渡す
    check_common "$SELECTED_LANGUAGE" "$MODE"
}

check_common() {
    local lang_code="$SELECTED_LANGUAGE"
    local mode="$MODE"

    debug_log "DEBUG" "check_common: MODE=$MODE"
    debug_log "DEBUG" "check_common: mode=$mode"

    # 言語設定の早期読み込み（追加）
    if [ -f "${CACHE_DIR}/message.ch" ]; then
        debug_log "DEBUG" "Early loading language settings from cache"
        # 初期化フラグを設定して二重初期化を防止
        EARLY_LANG_LOADED=1
    fi

    # モードごとの処理
    case "$mode" in
        reset|return)
            if ! rm -rf "${CACHE_DIR}"; then
                debug_log "DEBUG" "Failed to remove cache directory: ${CACHE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset failed: Could not remove cache directory.")"
                return 1
            fi
            # キャッシュディレクトリを再作成
            mkdir -p "${CACHE_DIR}" || {
                debug_log "DEBUG" "Failed to recreate cache directory: ${CACHE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset partially failed: Cache removed but could not be recreated.")"
            }
            printf "%s%s%s\n" "$(color yellow "$(get_message "MSG_RESET_COMPLETE")")"
            exit 0
            ;;
        delete)
            if ! rm -rf "${BASE_DIR}"; then
                debug_log "DEBUG" "Failed to remove base directory: ${BASE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset failed: Could not remove base directory.")"
                return 1
            fi
            # キャッシュディレクトリを再作成
            mkdir -p "${BASE_DIR}" || {
                debug_log "DEBUG" "Failed to recreate base directory: ${CACHE_DIR}"
                printf "%s%s%s\n" "$(color yellow "Reset partially failed: Base removed but could not be recreated.")"
            }
            printf "%s%s%s\n" "$(color yellow "$(get_message "MSG_DELETE_COMPLETE")")"
            exit 0
            ;;
        debug)
            download "common-system.sh" "hidden" "chmod" "load"
            download "common-information.sh" "hidden" "chmod" "load"
            download "common-color.sh" "hidden" "chmod" "load"
            download "common-country.sh" "hidden" "chmod" "load"
            download "common-menu.sh" "hidden" "chmod" "load"
            download "common-package.sh" "hidden" "chmod" "load"
            download "common-feed-package.sh" "hidden" "chmod" "load"
            download "menu.db" "hidden"
            download "country.db" "hidden"
            download "message_${DEFAULT_LANGUAGE}.db" "hidden"
            download "local-package.db" "hidden"
            download "custom-package.db" "hidden"
            print_banner
            print_information
            information_main
            country_main "$lang_code"
            translate_main
            install_package update
            selector "$MAIN_MENU" 
            ;;
        full)
            download "common-system.sh" "chmod" "load"
            download "common-information.sh" "chmod" "load"
            download "common-translation.sh" "chmod" "load"
            download "common-color.sh" "chmod" "load"
            download "common-country.sh" "chmod" "load"
            download "common-menu.sh" "chmod" "load"
            download "common-package.sh" "chmod" "load"
            download "common-feed-package.sh" "chmod" "load"
            download "menu.db"
            download "country.db"
            download "message_${DEFAULT_LANGUAGE}.db"
            download "local-package.db"
            download "custom-package.db"
            print_banner
            print_information
            information_main
            country_main "$lang_code"
            translate_main
            install_package update
            selector "$MAIN_MENU"
            ;;
        update)
            check_update "$ORIGINAL_ARGS"
            ;;
        light)
            ;;
        test_api)
            download "github_api_test.sh" "chmod" "load"
            exit 0
            ;;
        *)
            ;;
    esac
    
    return 0
}

# 実行権限の設定
chmod_aios() {
    if ! chmod +x "$BIN_PATH"; then
        debug_log "DEBUG" "Failed to set execute permission"
        return 1
    fi
    return 0
}

# ディレクトリ削除処理
delete_aios() {
    if ! rm -rf "${BASE_DIR}"; then
        debug_log "DEBUG" "Failed to delete $BASE_DIR"
        return 1
    fi
    return 0
}

# 必要ディレクトリ作成
make_directory() {
    if ! mkdir -p "${BASE_DIR}" "$CACHE_DIR" "$LOG_DIR" "$FEED_DIR" "${CACHE_DIR}/commits"; then
        debug_log "DEBUG" "Failed to create required directories"
        return 1
    fi
    
    # .gitignoreファイルの作成（キャッシュディレクトリの内容をgitで無視する）
    if [ ! -f "${CACHE_DIR}/.gitignore" ]; then
        echo "*" > "${CACHE_DIR}/.gitignore" 2>/dev/null
    fi
    
    return 0
}

# オリジナルの check_update 関数
check_update() {
    # デフォルトモードの設定（引数がなくても動作するように）
    local lang_code="$SELECTED_LANGUAGE"
    MODE="${MODE:-update}"

    # 全引数を処理
    local all_args="$@"
    local has_args=0

    # 引数があるかチェック
    [ $# -gt 0 ] && has_args=1

    # アップデート関連オプションのみをフィルタリング
    local filtered_args=""

    # 引数がある場合のみ処理
    if [ $has_args -eq 1 ]; then
        while [ $# -gt 0 ]; do
            case "$1" in
                -u|--u|-update|--update)
                    # アップデート関連オプションは除外
                    ;;
                *)
                    # その他のオプションは保持
                    filtered_args="${filtered_args:+$filtered_args }$1"
                    ;;
            esac
            shift
        done
    fi

    debug_log "DEBUG" "Original args: $all_args"
    debug_log "DEBUG" "Filtered args: $filtered_args"

    # ダウンロード実行
    download "aios" "chmod"
    MODE="full"

    # ファイルが存在する場合のみ移動してexec
    if [ -f "$BASE_DIR/$BIN_FILE" ]; then
        mv -f "$BASE_DIR/$BIN_FILE" "$BIN_PATH"
    fi

    exec "$BIN_PATH" "$lang_code" $filtered_args
}

# 初期化処理のメイン
main() {
    # 実行権限を設定
    if ! chmod_aios; then
        debug_log "DEBUG" "Failed to set execute permission"
        return 1
    fi

    # 必要なディレクトリを作成
    if ! make_directory; then
        debug_log "DEBUG" "Failed to create required directories"
        return 1
    fi

    check_network_connectivity

    setup_wget_options

    check_option "$@"
}

# 🔴　メイン　ここまで　🔴　-------------------------------------------------------------------------------------------------------------------------------------------

# スクリプト実行
main "$@"
 
